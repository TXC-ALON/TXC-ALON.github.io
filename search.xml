<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C/CPP 安全守则</title>
      <link href="/2023/07/12/c-cpp-rules/"/>
      <url>/2023/07/12/c-cpp-rules/</url>
      
        <content type="html"><![CDATA[<img src="logo.png" align="right"/><h1 id="C-x2F-C-安全规则集合"><a href="#C-x2F-C-安全规则集合" class="headerlink" title="C&#x2F;C++ 安全规则集合 "></a>C&#x2F;C++ 安全规则集合 <img src="https://img.shields.io/badge/version-1.3.1-brightgreen" alt="Version"></h1><blockquote><p>Bjarne Stroustrup: “*C makes it easy to shoot yourself in the foot; C++ makes it harder, but when you do it blows your whole leg off.*”</p></blockquote><p>&emsp;&emsp;针对 C、C++ 语言，本文收录了 467 种需要重点关注的问题，可为制定编程规范提供依据，也可为代码审计以及相关培训提供指导意见，适用于桌面、服务端以及嵌入式等软件系统。<br>&emsp;&emsp;每个问题对应一条规则，每条规则可直接作为规范条款或审计检查点，本文是适用于不同应用场景的规则集合，读者可根据自身需求从中选取某个子集作为规范或审计依据，从而提高软件产品的安全性。<br><br/><br><img src="/./../build/img/cover_girl1.jpg" alt="戴珍珠耳环的少女 -- 扬·维米尔[荷兰]"></p><h2 id="规则说明"><a href="#规则说明" class="headerlink" title="规则说明"></a>规则说明</h2><p>规则按如下主题分为 17 个类别：</p><ol><li><a href="#__security">Security</a>：敏感信息防护</li><li><a href="#__resource">Resource</a>：资源管理</li><li><a href="#__precompile">Precompile</a>：预处理、宏、注释</li><li><a href="#__global">Global</a>：全局及命名空间作用域</li><li><a href="#__type">Type</a>：类型设计与实现</li><li><a href="#__declaration">Declaration</a>：声明</li><li><a href="#__exception">Exception</a>：异常</li><li><a href="#__function">Function</a>：函数实现</li><li><a href="#__control">Control</a>：流程控制</li><li><a href="#__expression">Expression</a>：表达式</li><li><a href="#__literal">Literal</a>：常量</li><li><a href="#__cast">Cast</a>：类型转换</li><li><a href="#__buffer">Buffer</a>：缓冲区</li><li><a href="#__pointer">Pointer</a>：指针</li><li><a href="#__interruption">Interruption</a>：中断与信号处理</li><li><a href="#__concurrency">Concurrency</a>：异步与并发</li><li><a href="#__style">Style</a>：样式与风格</li></ol><p>每条规则包括：</p><ul><li>编号：规则在本文中的章节编号，以“R”开头，称为 Section-ID</li><li>名称：用简练的短语描述违反规则的状况，以“ID_”开头，称为 Fault-ID</li><li>标题：规则的定义</li><li>说明：规则设立的原因、违反规则的后果、示例、改进建议、参照依据、参考资料等内容</li></ul><p>如果违反规则，后果的严重程度分为：</p><ul><li>Error：直接导致错误或形成安全漏洞</li><li>Warning：可导致错误或形成安全隐患</li><li>Suspicious：可疑的代码，需进一步排查</li><li>Suggestion：代码质量降低，应依照建议改进</li></ul><p>规则的说明包含：</p><ul><li>示例：规则相关的示例代码，指明符合规则（Compliant）的和违反规则（Non-compliant）的情况</li><li>相关：与当前规则有相关性的规则，可作为扩展阅读的线索</li><li>依据：规则依照的 ISO&#x2F;IEC 标准条目，C 规则以 ISO&#x2F;IEC 9899:2011 为主，C++ 规则以 ISO&#x2F;IEC 14882:2011 为主</li><li>配置：某些规则的细节可灵活设置，审计工具可以此为参照实现定制化功能</li><li>参考：规则参考的其他规范条目，如 C++ Core Guidelines、MISRA、SEI CERT Coding Standards 等，也可作为扩展阅读的线索</li></ul><p>规则的相关性分为：</p><ul><li>特化：设规则 A 的特殊情况需要由规则 B 阐明，称规则 B 是规则 A 的特化</li><li>泛化：与特化相反，称规则 A 是规则 B 的泛化</li><li>相交：设两个规则针对不同的问题，但在内容上有一定的交集，称这两个规则相交</li></ul><p>规则以“<code>标准名称:版本 章节编号(段落编号)-性质</code>”的格式引用标准，如“<code>ISO/IEC 14882:2011 5.6(4)-undefined</code>”，表示引用 C++11 标准的第 5 章第 6 节第 4 段说明的具有 undefined 性质的问题。  </p><p>其中“性质”分为：</p><ul><li>undefined：可使程序产生未定义的行为，这种行为造成的后果是不可预期的</li><li>unspecified：可使程序产生未声明的行为，这种行为由编译器或环境定义，具有随意性</li><li>implementation：可使程序产生由实现定义的行为，这种行为由编译器或环境定义，有明确的文档支持</li><li>deprecated：已被废弃的或不建议继续使用的编程方式</li></ul><p>本文以 ISO&#x2F;IEC 9899:2011、ISO&#x2F;IEC 14882:2011 为主要依据，兼顾 C18、C++17 以及历史标准，没有特殊说明的规则同时适用于 C 语言和 C++ 语言，只适用于某一种语言的规则会另有说明。</p><h2 id="规则选取"><a href="#规则选取" class="headerlink" title="规则选取"></a>规则选取</h2><p>本文是适用于不同应用场景的规则集合，读者可选取适合自己需求的规则。</p><p>指出某种错误的规则，如有“不可”、“不应”等字样的规则应尽量被选取，有“禁用”等字样的规则可能只适用于某一场景，可酌情选取。</p><p>如果将本文作为培训内容，为了全面理解各种场景下存在的问题，应选取全部规则。</p><h2 id="规则列表"><a href="#规则列表" class="headerlink" title="规则列表"></a>规则列表</h2><p><span id="__security"><strong><a href="#security">1. Security</a></strong></span></p><ul><li><a href="#plainsensitiveinfo">R1.1 敏感数据不可写入代码</a></li><li><a href="#secretleak">R1.2 敏感数据不可被系统外界感知</a></li><li><a href="#unsafecleanup">R1.3 敏感数据在使用后应被有效清理</a></li><li><a href="#sensitivename">R1.4 公共成员或全局对象不应记录敏感数据</a></li><li><a href="#hijack">R1.5 预判用户输入造成的不良后果</a></li><li><a href="#unlimitedauthority">R1.6 对资源设定合理的访问权限</a></li><li><a href="#improperauthorization">R1.7 对用户落实有效的权限管理</a></li><li><a href="#dangerousname">R1.8 避免引用危险符号名称</a></li><li><a href="#dangerousfunction">R1.9 避免使用具有危险性的接口</a></li><li><a href="#obsoletefunction">R1.10 不应使用已过时的接口</a></li><li><a href="#unsafestringfunction">R1.11 禁用不安全的字符串函数</a></li><li><a href="#impropernulltermination">R1.12 确保字符串以空字符结尾</a></li><li><a href="#dividebyzero">R1.13 避免除 0 等计算异常</a></li><li><a href="#variableformatstring">R1.14 格式化字符串应为常量</a></li><li><a href="#addressexposure">R1.15 与内存空间布局相关的信息不可被外界感知</a></li><li><a href="#hardcodedip">R1.16 与网络地址相关的信息不应写入代码</a></li><li><a href="#deprecatederrno">R1.17 选择安全的异常处理方式</a></li><li><a href="#missinghardening">R1.18 启用平台和编译器提供的防御机制</a><br/></li></ul><p><span id="__resource"><strong><a href="#resource">2. Resource</a></strong></span></p><ul><li><a href="#resourceleak">R2.1 不可失去对已分配资源的控制</a></li><li><a href="#memoryleak">R2.2 不可失去对已分配内存的控制</a></li><li><a href="#illaccess">R2.3 不可访问未初始化或已释放的资源</a></li><li><a href="#ownerlessresource">R2.4 资源应接受对象化管理</a></li><li><a href="#incompletenewdeletepair">R2.5 资源的分配与回收方法应成对提供</a></li><li><a href="#incompatibledealloc">R2.6 资源的分配与回收方法应配套使用</a></li><li><a href="#crossmoduletransfer">R2.7 模块之间不应传递容器等对象</a></li><li><a href="#memberdeallocation">R2.8 对象申请的资源应在析构函数中释放</a></li><li><a href="#useaftermove">R2.9 对象被移动后应重置状态再使用</a></li><li><a href="#throwinconstructor">R2.10 构造函数抛出异常需避免相关资源泄漏</a></li><li><a href="#doublefree">R2.11 资源不可被重复释放</a></li><li><a href="#deleteincompletetype">R2.12 用 delete 释放对象需保证其类型完整</a></li><li><a href="#excessivedelete">R2.13 用 delete 释放对象不可多写中括号</a></li><li><a href="#insufficientdelete">R2.14 用 delete 释放数组不可漏写中括号</a></li><li><a href="#illdealloc">R2.15 非动态申请的资源不可被释放</a></li><li><a href="#multiallocation">R2.16 在一个表达式语句中最多使用一次 new</a></li><li><a href="#copiedstream">R2.17 流式资源对象不应被复制</a></li><li><a href="#stackallocation">R2.18 避免使用在栈上分配内存的函数</a></li><li><a href="#unnecessaryallocation">R2.19 避免不必要的内存分配</a></li><li><a href="#dynamicallocation">R2.20 避免动态内存分配</a></li><li><a href="#nullderefallocret">R2.21 判断资源分配函数的返回值是否有效</a></li><li><a href="#forbidmallocandfree">R2.22 C++ 代码中禁用 C 内存管理函数</a><br/></li></ul><p><span id="__precompile"><strong><a href="#precompile">3. Precompile</a></strong></span></p><ul><li><a href="#precompile.include">3.1 Include</a><ul><li><a href="#illformedinclude">R3.1.1 include 指令应符合标准格式</a></li><li><a href="#nonstandardcharinheadername">R3.1.2 include 指令中禁用不合规的字符</a></li><li><a href="#forbidbackslashinheadername">R3.1.3 include 指令中不应使用反斜杠</a></li><li><a href="#forbidabspathinheadername">R3.1.4 include 指令中不应使用绝对路径</a></li><li><a href="#forbiddenheader">R3.1.5 禁用不合规的头文件</a></li><li><a href="#forbidcheaderincpp">R3.1.6 C++ 代码不应引用 C 头文件</a></li></ul></li><li><a href="#precompile.macro-definition">3.2 Macro-definition</a><ul><li><a href="#macro_badname">R3.2.1 宏应遵循合理的命名方式</a></li><li><a href="#macro_definereserved">R3.2.2 不可定义具有保留意义的宏名称</a></li><li><a href="#macro_undefreserved">R3.2.3 不可取消定义具有保留意义的宏名称</a></li><li><a href="#macro_expnotenclosed">R3.2.4 可作为子表达式的宏定义应该用括号括起来</a></li><li><a href="#macro_paramnotenclosed">R3.2.5 表达式中的宏参数应该用括号括起来</a></li><li><a href="#macro_stmtnotenclosed">R3.2.6 由多个语句组成的宏定义应该用 do-while(0) 括起来</a></li><li><a href="#macro_complexconcat">R3.2.7 宏定义中的 # 和 ## 运算符不应嵌套使用</a></li><li><a href="#macro_const">R3.2.8 不应使用宏定义常量</a></li><li><a href="#macro_typeid">R3.2.9 不应使用宏定义类型</a></li><li><a href="#macro_function">R3.2.10 可由函数实现的功能不应使用宏实现</a></li><li><a href="#macro_redefined">R3.2.11 宏不应被重定义</a></li><li><a href="#macro_inblock">R3.2.12 只应在全局作用域中定义宏</a></li><li><a href="#macro_undef">R3.2.13 合理使用 #undef</a></li></ul></li><li><a href="#precompile.macro-usage">3.3 Macro-usage</a><ul><li><a href="#macro_sideeffectargs">R3.3.1 宏的实参不应有副作用</a></li><li><a href="#macro_insufficientargs">R3.3.2 宏的实参个数不可小于形参个数</a></li><li><a href="#macro_redundantargs">R3.3.3 宏的实参个数不可大于形参个数</a></li><li><a href="#incompletevamacros">R3.3.4 va_start 或 va_copy 应配合 va_end 使用</a></li><li><a href="#badvaargtype">R3.3.5 va_arg 的类型参数应符合要求</a></li><li><a href="#deprecatedoffsetof">R3.3.6 在 C++ 代码中不应使用宏 offsetof</a></li></ul></li><li><a href="#precompile.directive">3.4 Directive</a><ul><li><a href="#missingheaderguard">R3.4.1 头文件不应缺少守卫</a></li><li><a href="#illformeddirective">R3.4.2 不应出现非标准格式的预编译指令</a></li><li><a href="#nonstddirective">R3.4.3 不应使用非标准预编译指令</a></li><li><a href="#directiveinmacroargument">R3.4.4 宏的参数列表中不应出现预编译指令</a></li><li><a href="#incompletedirective">R3.4.5 条件编译代码块应在同一文件中</a></li><li><a href="#warningdisabled">R3.4.6 对编译警告的屏蔽应慎重</a></li><li><a href="#warningdefault">R3.4.7 在高级别的警告设置下编译</a></li></ul></li><li><a href="#precompile.comment">3.5 Comment</a><ul><li><a href="#specialcomment">R3.5.1 关注 TODO、FIXME、XXX、BUG 等特殊注释</a></li><li><a href="#nestedcomment">R3.5.2 注释不可嵌套</a></li><li><a href="#badcommentposition">R3.5.3 注释应出现在合理的位置</a></li></ul></li><li><a href="#precompile.other">3.6 Other</a><ul><li><a href="#missingnewlinefileend">R3.6.1 非空源文件应以换行符结尾</a></li><li><a href="#badbackslash">R3.6.2 除转义字符、宏定义之外不应使用反斜杠</a><br/></li></ul></li></ul><p><span id="__global"><strong><a href="#global">4. Global</a></strong></span></p><ul><li><a href="#nametooshort">R4.1 全局名称应遵循合理的命名方式</a></li><li><a href="#missingnamespace">R4.2 为代码设定合理的命名空间</a></li><li><a href="#nonglobalmain">R4.3 main 函数只应处于全局作用域中</a></li><li><a href="#usingnamespaceinheader">R4.4 头文件中不应使用 using directive</a></li><li><a href="#staticinheader">R4.5 头文件中不应使用静态声明</a></li><li><a href="#anonymousnamespaceinheader">R4.6 头文件中不应定义匿名命名空间</a></li><li><a href="#staticinanonymousnamespace">R4.7 匿名命名空间中不应使用静态声明</a></li><li><a href="#relyonexternalobject">R4.8 全局对象的初始化不可依赖未初始化的对象</a></li><li><a href="#nonconstnonstaticglobalobject">R4.9 全局对象只应为常量或静态对象</a></li><li><a href="#nonconstglobalobject">R4.10 全局对象只应为常量</a></li><li><a href="#staticandconst">R4.11 全局对象不应同时被 static 和 const 关键字修饰</a></li><li><a href="#forbidusingdirectives">R4.12 全局及命名空间作用域中禁用 using directive</a></li><li><a href="#usingself">R4.13 避免无效的 using directive</a></li><li><a href="#topinlinenamespace">R4.14 不应定义全局 inline 命名空间</a></li><li><a href="#stdnamespacemodified">R4.15 不可修改 std 命名空间</a><br/></li></ul><p><span id="__type"><strong><a href="#type">5. Type</a></strong></span></p><ul><li><a href="#type.class">5.1 Class</a><ul><li><a href="#nonprivatedata">R5.1.1 类的非常量数据成员均应为 private</a></li><li><a href="#protecteddata">R5.1.2 类的非常量数据成员不应定义为 protected</a></li><li><a href="#mixpublicprivatedata">R5.1.3 类不应既有 public 数据成员又有 private 数据成员</a></li><li><a href="#missingvirtualdestructor">R5.1.4 有虚函数的基类应具有虚析构函数</a></li><li><a href="#diamondinheritance">R5.1.5 用虚基类避免冗余的基类实例</a></li><li><a href="#missingcopyconstructor">R5.1.6 存在析构函数或拷贝赋值运算符时，不应缺少拷贝构造函数</a></li><li><a href="#missingcopyassignoperator">R5.1.7 存在拷贝构造函数或析构函数时，不应缺少拷贝赋值运算符</a></li><li><a href="#missingdestructor">R5.1.8 存在拷贝构造函数或拷贝赋值运算符时，不应缺少析构函数</a></li><li><a href="#violateruleoffive">R5.1.9 存在任一拷贝、移动、析构相关的函数时，应定义所有相关函数</a></li><li><a href="#violateruleofzero">R5.1.10 避免重复实现由默认拷贝、移动、析构函数完成的功能</a></li><li><a href="#missingexplicitconstructor">R5.1.11 可接受一个参数的构造函数需用 explicit 关键字限定</a></li><li><a href="#missingexplicitconvertor">R5.1.12 重载的类型转换运算符需用 explicit 关键字限定</a></li><li><a href="#excessiveexplicit">R5.1.13 不应过度使用 explicit 关键字</a></li><li><a href="#roughtemplateassignoperator">R5.1.14 带模板的赋值运算符不应与拷贝或移动赋值运算符混淆</a></li><li><a href="#roughtemplateconstructor">R5.1.15 带模板的构造函数不应与拷贝或移动构造函数混淆</a></li><li><a href="#unsuitableassignoperator">R5.1.16 抽象类禁用拷贝和移动赋值运算符</a></li><li><a href="#toomanyfields">R5.1.17 数据成员的数量应在规定范围之内</a></li><li><a href="#ignorepaddingdata">R5.1.18 数据成员之间的填充数据不应被忽视</a></li><li><a href="#returnnonconstdata">R5.1.19 常量成员函数不应返回数据成员的非常量指针或引用</a></li><li><a href="#accessspecifierdisorder">R5.1.20 类成员应按 public、protected、private 的顺序声明</a></li><li><a href="#unsuitablestructtag">R5.1.21 存在构造、析构或虚函数的类不应采用 struct 关键字</a></li></ul></li><li><a href="#type.enum">5.2 Enum</a><ul><li><a href="#duplicateenumerator">R5.2.1 同类枚举项的值不应相同</a></li><li><a href="#casualinitialization">R5.2.2 合理初始化各枚举项</a></li><li><a href="#forbidunnamedenum">R5.2.3 不应使用匿名枚举声明</a></li><li><a href="#forbidunscopedenum">R5.2.4 用 enum class 取代 enum</a></li></ul></li><li><a href="#type.union">5.3 Union</a><ul><li><a href="#forbidnonbasicfield">R5.3.1 联合体内禁用非基本类型的对象</a></li><li><a href="#forbidnakedunion">R5.3.2 禁用在类之外定义的联合体</a></li><li><a href="#forbidunion">R5.3.3 禁用联合体</a><br/></li></ul></li></ul><p><span id="__declaration"><strong><a href="#declaration">6. Declaration</a></strong></span></p><ul><li><a href="#declaration.naming">6.1 Naming</a><ul><li><a href="#badname">R6.1.1 遵循合理的命名方式</a></li><li><a href="#reservedname">R6.1.2 不应定义具有保留意义的名称</a></li><li><a href="#hidelocal">R6.1.3 局部名称不应被覆盖</a></li><li><a href="#hidemember">R6.1.4 成员名称不应被覆盖</a></li><li><a href="#hideglobal">R6.1.5 全局名称不应被覆盖</a></li><li><a href="#duplicatedtypename">R6.1.6 类型名称不应重复定义</a></li><li><a href="#duplicatedname">R6.1.7 类型名称不应与对象或函数名称相同</a></li><li><a href="#misspelling">R6.1.8 不应存在拼写错误</a></li></ul></li><li><a href="#declaration.qualifier">6.2 Qualifier</a><ul><li><a href="#qualifierrepeated">R6.2.1 const、volatile 不应重复</a></li><li><a href="#qualifierforptralias">R6.2.2 const、volatile 修饰指针类型的别名是可疑的</a></li><li><a href="#qualifierinvalid">R6.2.3 const、volatile 不可修饰引用</a></li><li><a href="#badqualifierposition">R6.2.4 const、volatile 限定类型时的位置应统一</a></li><li><a href="#sandwichedmodifier">R6.2.5 const、volatile 等关键字不应出现在基本类型名称的中间</a></li><li><a href="#conststrtononconstptr">R6.2.6 指向常量字符串的指针应使用 const 声明</a></li><li><a href="#uselessqualifier">R6.2.7 枚举类型的底层类型不应为 const 或 volatile</a></li><li><a href="#constliteralreference">R6.2.8 对常量的定义不应为引用</a></li><li><a href="#forbidrestrictptr">R6.2.9 禁用 restrict 指针</a></li><li><a href="#forbidvolatile">R6.2.10 非适当场景禁用 volatile</a></li><li><a href="#nonconstunmodified">R6.2.11 相关对象未被修改时应使用 const 声明</a></li></ul></li><li><a href="#declaration.specifier">6.3 Specifier</a><ul><li><a href="#abusedauto">R6.3.1 合理使用 auto 关键字</a></li><li><a href="#deprecatedspecifier">R6.3.2 不应使用已过时的关键字</a></li><li><a href="#inlineredundant">R6.3.3 不应使用多余的 inline 关键字</a></li><li><a href="#invalidexternspecifier">R6.3.4 extern 关键字不应作用于类成员的声明或定义</a></li><li><a href="#missingexplicitoverride">R6.3.5 重写的虚函数应声明为 override 或 final</a></li><li><a href="#redundantoverride">R6.3.6 override 和 final 关键字不应同时出现在声明中</a></li><li><a href="#redundantvirtual">R6.3.7 override 或 final 关键字不应与 virtual 关键字同时出现在声明中</a></li><li><a href="#invalidfinal">R6.3.8 不应将 union 设为 final</a></li><li><a href="#this_notused">R6.3.9 未访问 this 指针的成员函数应使用 static 声明</a></li><li><a href="#missingstatic">R6.3.10 声明和定义内部链接的对象和函数时均应使用 static 关键字</a></li><li><a href="#badspecifierposition">R6.3.11 inline、virtual、static、typedef 等关键字的位置应统一</a></li></ul></li><li><a href="#declaration.declarator">6.4 Declarator</a><ul><li><a href="#roughauto">R6.4.1 用 auto 声明指针或引用时应显式标明 *、&amp; 等符号</a></li><li><a href="#forbidvariadicfunction">R6.4.2 禁用可变参数列表</a></li><li><a href="#forbidflexiblearray">R6.4.3 禁用柔性数组</a></li><li><a href="#forbidfunctionvoidptr">R6.4.4 接口的参数类型和返回类型不应为 void*</a></li><li><a href="#forbidmembervoidptr">R6.4.5 类成员的类型不应为 void*</a></li><li><a href="#missingarraysize">R6.4.6 数组大小应被显式声明</a></li><li><a href="#unsuitablearraysize">R6.4.7 局部数组的长度不应过大</a></li><li><a href="#mixedtypeobjdefinition">R6.4.8 不应将类型定义和对象声明写在一个语句中</a></li><li><a href="#mixeddeclarations">R6.4.9 不应将不同类别的声明写在一个语句中</a></li></ul></li><li><a href="#declaration.object">6.5 Object</a><ul><li><a href="#inaccessibletmpobject">R6.5.1 不应产生无效的临时对象</a></li><li><a href="#invalidlocaldeclaration">R6.5.2 不应存在没有被用到的局部声明</a></li><li><a href="#selfdependentinitialization">R6.5.3 对象初始化不可依赖自身的值</a></li><li><a href="#plainnumericchar">R6.5.4 参与数值运算的 char 对象应显式声明 signed 或 unsigned</a></li><li><a href="#plainbinarychar">R6.5.5 字节的类型应为 std::byte 或 unsigned char</a></li></ul></li><li><a href="#declaration.parameter">6.6 Parameter</a><ul><li><a href="#missingparamname">R6.6.1 函数原型声明中的参数应具有合理的名称</a></li><li><a href="#invalidparamarraysize">R6.6.2 不应将数组作为函数的形式参数</a></li><li><a href="#badparmn">R6.6.3 parmN 的声明应符合要求</a></li><li><a href="#inconsistentdefaultargument">R6.6.4 虚函数参数的默认值应与基类中声明的一致</a></li><li><a href="#deprecateddefaultargument">R6.6.5 不建议虚函数的参数有默认值</a></li><li><a href="#missingvoid">R6.6.6 C 代码中参数列表如果为空应声明为“(void)”</a></li><li><a href="#superfluousvoid">R6.6.7 C++ 代码中参数列表如果为空不应声明为“(void)”</a></li><li><a href="#forbidstaticarrsize">R6.6.8 声明数组参数的大小时禁用 static 关键字</a></li></ul></li><li><a href="#declaration.function">6.7 Function</a><ul><li><a href="#nonvirtualoverride">R6.7.1 派生类不应重新定义与基类相同的非虚函数</a></li><li><a href="#nonstdassignmentrettype">R6.7.2 拷贝和移动赋值运算符应返回所属类的非 const 引用</a></li><li><a href="#nonstdcopyassignmentparam">R6.7.3 拷贝赋值运算符的参数应为同类对象的 const 左值引用</a></li><li><a href="#nonstdmoveassignmentparam">R6.7.4 移动赋值运算符的参数应为同类对象的非 const 右值引用</a></li><li><a href="#overloadaddressoperator">R6.7.5 不应重载取地址运算符</a></li><li><a href="#overloadcomma">R6.7.6 不应重载逗号运算符</a></li><li><a href="#overloadlogicoperator">R6.7.7 不应重载“逻辑与”和“逻辑或”运算符</a></li><li><a href="#virtualassignment">R6.7.8 拷贝和移动赋值运算符不应为虚函数</a></li><li><a href="#virtualcomparison">R6.7.9 比较运算符不应为虚函数</a></li><li><a href="#virtualinfinal">R6.7.10 final 类中不应声明虚函数</a></li></ul></li><li><a href="#declaration.bitfield">6.8 Bitfield</a><ul><li><a href="#improperbitfieldtype">R6.8.1 对位域声明合理的类型</a></li><li><a href="#exceededbitfield">R6.8.2 位域长度不应超过类型长度</a></li><li><a href="#singlesignedbitfield">R6.8.3 有符号整型对象的位域长度不应为 1</a></li><li><a href="#forbidenumbitfield">R6.8.4 不应对枚举对象声明位域</a></li><li><a href="#forbidbitfield">R6.8.5 禁用位域</a></li></ul></li><li><a href="#declaration.complexity">6.9 Complexity</a><ul><li><a href="#complexdeclaration">R6.9.1 不应采用复杂的声明</a></li><li><a href="#toomanyptrlevel">R6.9.2 声明中不应包含过多的指针嵌套</a></li><li><a href="#toomanydeclarators">R6.9.3 在一个语句中不应声明多个对象或函数</a></li></ul></li><li><a href="#declaration.other">6.10 Other</a><ul><li><a href="#violateodr">R6.10.1 遵循 One Definition Rule</a></li><li><a href="#inconsistentdeclaration">R6.10.2 声明与实现应一致</a></li><li><a href="#unsuitabledeclaration">R6.10.3 在合理的位置声明</a></li><li><a href="#labelnotused">R6.10.4 不应存在没有被用到的标签</a></li><li><a href="#staticnotused">R6.10.5 不应存在没有被用到的静态声明</a></li><li><a href="#privatenotused">R6.10.6 不应存在没有被用到的 private 成员</a></li><li><a href="#missingtype">R6.10.7 不应省略声明对象或函数的类型</a></li><li><a href="#unportabletype">R6.10.8 用 stdint.h 中的类型代替 short、int、long 等类型</a></li><li><a href="#deprecatedautoptr">R6.10.9 避免使用 std::auto_ptr</a><br/></li></ul></li></ul><p><span id="__exception"><strong><a href="#exception">7. Exception</a></strong></span></p><ul><li><a href="#exceptionunsafe">R7.1 保证异常安全</a></li><li><a href="#throwgenericexception">R7.2 不应抛出过于宽泛的异常</a></li><li><a href="#catch_generic">R7.3 不应捕获过于宽泛的异常</a></li><li><a href="#thrownonexceptiontype">R7.4 不应抛出非异常类型的对象</a></li><li><a href="#catch_nonexceptiontype">R7.5 不应捕获非异常类型的对象</a></li><li><a href="#throwindestructor">R7.6 析构函数不可抛出异常</a></li><li><a href="#throwindelete">R7.7 内存回收函数不可抛出异常</a></li><li><a href="#throwinswap">R7.8 对象交换过程不可抛出异常</a></li><li><a href="#throwinmove">R7.9 移动构造函数和移动赋值运算符不可抛出异常</a></li><li><a href="#exceptioninexception">R7.10 异常类的构造函数和异常信息相关的函数不应抛出异常</a></li><li><a href="#throwinhash">R7.11 与标准库相关的 hash 过程不应抛出异常</a></li><li><a href="#catch_value">R7.12 通过引用捕获异常</a></li><li><a href="#catch_slicing">R7.13 捕获异常时不应产生对象切片问题</a></li><li><a href="#catch_justrethrow">R7.14 捕获异常后不应直接再次抛出异常</a></li><li><a href="#improperrethrow">R7.15 重新抛出异常时应使用空 throw 表达式（throw;）</a></li><li><a href="#rethrowoutofcatch">R7.16 不应在 catch handler 外使用空 throw 表达式（throw;）</a></li><li><a href="#throwpointer">R7.17 不应抛出指针</a></li><li><a href="#thrownull">R7.18 不应抛出 NULL</a></li><li><a href="#thrownullptr">R7.19 不应抛出 nullptr</a></li><li><a href="#forbidthrowspecification">R7.20 禁用含 throw 关键字的异常规格说明</a></li><li><a href="#forbidexception">R7.21 禁用 C++ 异常</a><br/></li></ul><p><span id="__function"><strong><a href="#function">8. Function</a></strong></span></p><ul><li><a href="#mainreturnsnonint">R8.1 main 函数的返回类型只应为 int</a></li><li><a href="#illformedmain">R8.2 main 函数不应被调用、重载或被 inline、static 等限定符修饰</a></li><li><a href="#definedinheader">R8.3 函数不应在头文件中实现</a></li><li><a href="#inconsistentparamname">R8.4 函数的参数名称在声明处和实现处应保持一致</a></li><li><a href="#parammaybeslicing">R8.5 多态类的对象作为参数时不应采用值传递的方式</a></li><li><a href="#paramnotused">R8.6 不应存在未被使用的具名形式参数</a></li><li><a href="#parampassedbyvalue">R8.7 由 const 修饰的参数应为引用或指针</a></li><li><a href="#illforwardingreference">R8.8 转发引用只应作为 std::forward 的参数</a></li><li><a href="#localinitialization">R8.9 局部对象在使用前应被初始化</a></li><li><a href="#memberinitialization">R8.10 成员须在声明处或构造时初始化</a></li><li><a href="#illmembercall">R8.11 基类对象构造完毕之前不可调用成员函数</a></li><li><a href="#illmemberaccess">R8.12 在面向构造或析构函数体的 catch handler 中不可访问非静态成员</a></li><li><a href="#disorderedinitialization">R8.13 成员初始化应遵循声明的顺序</a></li><li><a href="#virtualcallinconstructor">R8.14 在构造函数中不应使用动态类型</a></li><li><a href="#virtualcallindestructor">R8.15 在析构函数中不应使用动态类型</a></li><li><a href="#exitcallindestructor">R8.16 在析构函数中避免调用 exit 函数</a></li><li><a href="#sideeffectcopyconstructor">R8.17 拷贝构造函数应避免实现复制之外的功能</a></li><li><a href="#sideeffectmoveconstructor">R8.18 移动构造函数应避免实现数据移动之外的功能</a></li><li><a href="#this_selfjudgement">R8.19 拷贝赋值运算符应处理参数是自身对象时的情况</a></li><li><a href="#invalidwrite">R8.20 不应存在无效的写入操作</a></li><li><a href="#missingsideeffect">R8.21 不应存在没有副作用的语句</a></li><li><a href="#unreachablecode">R8.22 不应存在得不到执行机会的代码</a></li><li><a href="#notallbranchreturn">R8.23 有返回值的函数其所有分枝都应显式返回</a></li><li><a href="#localaddressflowout">R8.24 不可返回局部对象的地址或引用</a></li><li><a href="#tmpaddressflowout">R8.25 不可返回临时对象的地址或引用</a></li><li><a href="#unsuitablecapture">R8.26 合理设置 lambda 表达式的捕获方式</a></li><li><a href="#returnrvaluereference">R8.27 函数返回值不应为右值引用</a></li><li><a href="#returnconstobject">R8.28 函数返回值不应为常量对象</a></li><li><a href="#returnsuperfluousconst">R8.29 函数返回值不应为基本类型的常量</a></li><li><a href="#returnodd">R8.30 被返回的表达式应与函数的返回类型相符</a></li><li><a href="#returnsameconst">R8.31 被返回的表达式不应为相同的常量</a></li><li><a href="#unsuitablereturn">R8.32 具有 noreturn 属性的函数不应返回</a></li><li><a href="#unsuitablereturntype">R8.33 具有 noreturn 属性的函数返回类型只应为 void</a></li><li><a href="#exithandlernoreturn">R8.34 由 atexit、at_quick_exit 指定的处理函数应正常返回</a></li><li><a href="#functionspecialization">R8.35 函数模板不应被特化</a></li><li><a href="#toomanyexit">R8.36 函数的退出点数量应在规定范围之内</a></li><li><a href="#toomanylabels">R8.37 函数的标签数量应在规定范围之内</a></li><li><a href="#toomanylines">R8.38 函数的行数应在规定范围之内</a></li><li><a href="#toomanylambdalines">R8.39 lambda 表达式的行数应在规定范围之内</a></li><li><a href="#toomanyparams">R8.40 函数参数的数量应在规定范围之内</a></li><li><a href="#complexinlinefunction">R8.41 不应定义过于复杂的内联函数</a></li><li><a href="#recursion">R8.42 避免递归实现</a></li><li><a href="#nestedtoodeep">R8.43 作用域及类型嵌套不应过深</a></li><li><a href="#mixedasm">R8.44 汇编代码不应与普通代码混合</a></li><li><a href="#functionrepetition">R8.45 避免重复的函数实现</a><br/></li></ul><p><span id="__control"><strong><a href="#control">9. Control</a></strong></span></p><ul><li><a href="#control.if">9.1 If</a><ul><li><a href="#if_semicolon">R9.1.1 if 语句不应被分号隔断</a></li><li><a href="#if_identicalcondition">R9.1.2 在 if…else-if 分枝中不应有重复的条件</a></li><li><a href="#if_hiddencondition">R9.1.3 在 if…else-if 分枝中不应有被遮盖的条件</a></li><li><a href="#if_identicalblock">R9.1.4 if 分枝和 else 分枝的代码不应完全相同</a></li><li><a href="#if_identicalelseifblock">R9.1.5 if…else-if 各分枝的代码不应完全相同</a></li><li><a href="#if_identicalimplicitelseblock">R9.1.6 if 分枝和隐含的 else 分枝代码不应完全相同</a></li><li><a href="#if_identicalsucceedingblock">R9.1.7 没有 else 子句的 if 语句与其后续代码相同是可疑的</a></li><li><a href="#if_commonstatements">R9.1.8 if 分枝和 else 分枝的起止语句不应相同</a></li><li><a href="#if_scope">R9.1.9 if 语句作用域的范围不应有误</a></li><li><a href="#if_maybeelseif">R9.1.10 如果 if 关键字前面是右大括号，if 关键字应另起一行</a></li><li><a href="#if_assignment">R9.1.11 if 语句的条件不应为赋值表达式</a></li><li><a href="#if_emptyblock">R9.1.12 if 语句不应为空</a></li><li><a href="#if_toomanyelseif">R9.1.13 if…else-if 分枝数量应在规定范围之内</a></li><li><a href="#if_brace">R9.1.14 if 分枝中的语句应该用大括号括起来</a></li><li><a href="#if_missingendingelse">R9.1.15 所有 if…else-if 分枝都应以 else 子句结束</a></li></ul></li><li><a href="#control.for">9.2 For</a><ul><li><a href="#for_semicolon">R9.2.1 for 语句不应被分号隔断</a></li><li><a href="#for_uncondbroken">R9.2.2 for 语句中不应存在无条件的跳转语句</a></li><li><a href="#for_scope">R9.2.3 for 语句作用域的范围不应有误</a></li><li><a href="#for_simplification">R9.2.4 for 语句没有明确的循环变量时应改用 while 语句</a></li><li><a href="#for_emptyblock">R9.2.5 for 循环体不应为空</a></li><li><a href="#for_floatcounter">R9.2.6 for 循环变量不应为浮点型</a></li><li><a href="#for_counterchangedinbody">R9.2.7 for 循环变量不应在循环体内被改变</a></li><li><a href="#for_counternested">R9.2.8 嵌套的 for 语句不应使用相同的循环变量</a></li><li><a href="#for_brace">R9.2.9 for 循环体应该用大括号括起来</a></li></ul></li><li><a href="#control.while">9.3 While</a><ul><li><a href="#while_semicolon">R9.3.1 while 语句不应被分号隔断</a></li><li><a href="#while_uncondbroken">R9.3.2 while 语句中不应存在无条件的跳转语句</a></li><li><a href="#while_assignment">R9.3.3 while 语句的条件不应为赋值表达式</a></li><li><a href="#while_scope">R9.3.4 while 语句作用域的范围不应有误</a></li><li><a href="#while_emptyblock">R9.3.5 while 循环体不应为空</a></li><li><a href="#while_brace">R9.3.6 while 循环体应该用大括号括起来</a></li></ul></li><li><a href="#control.do">9.4 Do</a><ul><li><a href="#do_suspiciouscontinue">R9.4.1 注意 do-while(0) 中可疑的 continue 语句</a></li><li><a href="#do_emptyblock">R9.4.2 do-while 循环体不应为空</a></li><li><a href="#do_brace">R9.4.3 do-while 循环体应该用大括号括起来</a></li><li><a href="#do_deprecated">R9.4.4 不建议使用 do 语句</a></li></ul></li><li><a href="#control.switch">9.5 Switch</a><ul><li><a href="#switch_semicolon">R9.5.1 switch 语句不应被分号隔断</a></li><li><a href="#switch_emptyblock">R9.5.2 switch 语句不应为空</a></li><li><a href="#switch_caseoutofrange">R9.5.3 case 标签的值不可超出 switch 条件的范围</a></li><li><a href="#switch_invalidstatement">R9.5.4 switch 语句中任何子句都应从属于某个 case 或 default 分枝</a></li><li><a href="#switch_badformedcase">R9.5.5 case 和 default 标签应直接从属于 switch 语句</a></li><li><a href="#switch_uselessfallthrough">R9.5.6 不应存在紧邻 default 标签的空 case 标签</a></li><li><a href="#switch_identicalbranch">R9.5.7 不应存在内容完全相同的 case 分枝</a></li><li><a href="#switch_bool">R9.5.8 switch 语句的条件不应为 bool 型</a></li><li><a href="#switch_onlydefault">R9.5.9 switch 语句不应只包含 default 标签</a></li><li><a href="#switch_onlyonecase">R9.5.10 switch 语句不应只包含一个 case 标签</a></li><li><a href="#switch_toomanycases">R9.5.11 switch 语句分枝数量应在规定范围之内</a></li><li><a href="#switch_missingdefault">R9.5.12 switch 语句应配有 default 分枝</a></li><li><a href="#switch_breakomitted">R9.5.13 switch 语句的每个非空分枝都应该用无条件的 break 或 return 语句终止</a></li><li><a href="#switch_brace">R9.5.14 switch 语句应该用大括号括起来</a></li><li><a href="#switch_forbidnest">R9.5.15 switch 语句不应嵌套</a></li></ul></li><li><a href="#control.try-catch">9.6 Try-catch</a><ul><li><a href="#try_emptyblock">R9.6.1 不应存在空的 try 块</a></li><li><a href="#catch_emptyblock">R9.6.2 不应存在空的 catch handler</a></li><li><a href="#try_forbidnest">R9.6.3 不应嵌套 try-catch 语句</a></li><li><a href="#try_disorderedellipsis">R9.6.4 捕获所有异常的 catch-all handler 应位于最后</a></li><li><a href="#try_disorderedhandlers">R9.6.5 派生类的 catch handler 应排在基类 catch handler 之前</a></li></ul></li><li><a href="#control.jump">9.7 Jump</a><ul><li><a href="#forbidgotoblocks">R9.7.1 禁止 goto 语句向嵌套的或无包含关系的作用域跳转</a></li><li><a href="#forbidgotoback">R9.7.2 禁止 goto 语句向前跳转</a></li><li><a href="#forbidgoto">R9.7.3 禁用 goto 语句</a></li><li><a href="#forbidlongjmp">R9.7.4 禁用 setjmp、longjmp</a></li><li><a href="#redundantjump">R9.7.5 不应存在不受条件控制的跳转语句</a></li><li><a href="#jumpoutloop">R9.7.6 避免使用跳转语句退出循环</a><br/></li></ul></li></ul><p><span id="__expression"><strong><a href="#expression">10. Expression</a></strong></span></p><ul><li><a href="#expression.logic">10.1 Logic</a><ul><li><a href="#illidentical">R10.1.1 不应出现不合逻辑的重复子表达式</a></li><li><a href="#conflictcondition">R10.1.2 各逻辑子表达式不应自相矛盾</a></li><li><a href="#invalidcondition">R10.1.3 条件表达式不应恒为真或恒为假</a></li><li><a href="#redundantcondition">R10.1.4 不应使用多余的逻辑子表达式</a></li><li><a href="#constlogicexpression">R10.1.5 逻辑表达式及其子表达式的结果不应为常量</a></li><li><a href="#shortcircuitsideeffect">R10.1.6 逻辑表达式的右子表达式不应有副作用</a></li><li><a href="#simplifiablecondition">R10.1.7 逻辑表达式应保持简洁明了</a></li><li><a href="#simplifiableternary">R10.1.8 可化简为逻辑表达式的三元表达式应尽量化简</a></li></ul></li><li><a href="#expression.evaluation">10.2 Evaluation</a><ul><li><a href="#unevaluatedsideeffect">R10.2.1 不可依赖不会生效的副作用</a></li><li><a href="#evaluationorderreliance">R10.2.2 避免依赖特定的子表达式求值顺序</a></li><li><a href="#confusingassignment">R10.2.3 在表达式中不应多次读写同一对象</a></li><li><a href="#unexpectedprecedence">R10.2.4 注意运算符优先级，避免非预期的结果</a></li><li><a href="#illptrdiff">R10.2.5 不在同一数组或对象中的地址不可相减或比较大小</a></li><li><a href="#illbooloperation">R10.2.6 bool 值不应参与位运算、大小比较、数值增减</a></li><li><a href="#illformedcompoundassignment">R10.2.7 不应出现复合赋值的错误形式</a></li><li><a href="#suspiciouscompoundassignment">R10.2.8 避免出现复合赋值的可疑形式</a></li><li><a href="#illselfcompoundassignment">R10.2.9 &amp;&#x3D;、|&#x3D;、-&#x3D;、&#x2F;&#x3D;、%&#x3D; 左右子表达式不应相同</a></li><li><a href="#oddnullassignment">R10.2.10 不应将 NULL 当作整数使用</a></li><li><a href="#stickyassignmentoperator">R10.2.11 注意赋值运算符与一元运算符的空格方式</a></li><li><a href="#selfassignment">R10.2.12 赋值运算符左右子表达式不应相同</a></li><li><a href="#selfdivision">R10.2.13 除法和求余运算符左右子表达式不应相同</a></li><li><a href="#selfsubtraction">R10.2.14 减法运算符左右子表达式不应相同</a></li><li><a href="#selfexclusiveor">R10.2.15 异或运算符左右子表达式不应相同</a></li><li><a href="#minusonunsigned">R10.2.16 负号不应作用于无符号整数</a></li><li><a href="#repeatedunaryoperators">R10.2.17 不应重复使用一元运算符</a></li><li><a href="#evaloverflow">R10.2.18 运算结果不应溢出</a></li><li><a href="#bitwiseoperonsigned">R10.2.19 位运算符不应作用于有符号整数</a></li><li><a href="#illshiftcount">R10.2.20 移位数量不可超过相关类型提升后比特位的数量</a></li><li><a href="#invalidcommasubexpression">R10.2.21 逗号表达式的子表达式应具有必要的副作用</a></li></ul></li><li><a href="#expression.comparison">10.3 Comparison</a><ul><li><a href="#illcomparison">R10.3.1 比较运算应在正确的取值范围内进行</a></li><li><a href="#illfloatcomparison">R10.3.2 不应使用 &#x3D;&#x3D; 或 !&#x3D; 判断浮点数是否相等</a></li><li><a href="#illptrstrcomparison">R10.3.3 指针不应与字符串常量直接比较</a></li><li><a href="#differentenumcomparison">R10.3.4 不应比较非同类枚举值</a></li><li><a href="#selfcomparison">R10.3.5 比较运算符左右子表达式不应相同</a></li><li><a href="#successivecomparison">R10.3.6 比较运算不可作为另一个比较运算的直接子表达式</a></li></ul></li><li><a href="#expression.call">10.4 Call</a><ul><li><a href="#returnvalueignored">R10.4.1 不应忽略重要的返回值</a></li><li><a href="#wronguseofreturnvalue">R10.4.2 不可臆断返回值的意义</a></li><li><a href="#objectslicing">R10.4.3 避免对象切片</a></li><li><a href="#explicitdtorcall">R10.4.4 避免显式调用析构函数</a></li><li><a href="#nonpodvariadicargument">R10.4.5 不应将非 POD 对象传入可变参数列表</a></li><li><a href="#inconsistentformatargnum">R10.4.6 C 格式化字符串需要的参数个数与实际传入的参数个数应一致</a></li><li><a href="#inconsistentformatargtype">R10.4.7 C 格式化占位符与其对应参数的类型应一致</a></li><li><a href="#forbidcstringformat">R10.4.8 在 C++ 代码中禁用 C 字符串格式化方法</a></li><li><a href="#forbidatox">R10.4.9 禁用 atof、atoi、atol 以及 atoll 等函数</a></li><li><a href="#implementationdefinedfunction">R10.4.10 避免使用由实现定义的库函数</a></li><li><a href="#unsuitablemove">R10.4.11 合理使用 std::move</a></li><li><a href="#unsuitableforward">R10.4.12 合理使用 std::forward</a></li></ul></li><li><a href="#expression.sizeof">10.5 Sizeof</a><ul><li><a href="#sizeof_arrayparameter">R10.5.1 sizeof 不应作用于数组参数</a></li><li><a href="#sizeof_oddexpression">R10.5.2 sizeof 不应作用于逻辑表达式</a></li><li><a href="#sizeof_pointer">R10.5.3 sizeof 作用于指针是可疑的</a></li><li><a href="#sizeof_pointerdivision">R10.5.4 被除数不应是作用于指针的 sizeof 表达式</a></li><li><a href="#sizeof_suspiciousadd">R10.5.5 指针加减偏移量时计入 sizeof 是可疑的</a></li><li><a href="#sizeof_zerocomparison">R10.5.6 sizeof 表达式的结果不应与 0 或负数比较</a></li><li><a href="#sizeof_sizeof">R10.5.7 sizeof 不应再作用于 sizeof 表达式</a></li><li><a href="#sizeof_null">R10.5.8 C++ 代码中 sizeof 不应作用于 NULL</a></li><li><a href="#sizeof_void">R10.5.9 sizeof 不可作用于 void</a></li></ul></li><li><a href="#expression.assertion">10.6 Assertion</a><ul><li><a href="#badassertion">R10.6.1 断言中的表达式不应恒为真</a></li><li><a href="#sideeffectassertion">R10.6.2 断言中的表达式不应有副作用</a></li><li><a href="#complexassertion">R10.6.3 断言中的表达式不应过于复杂</a></li></ul></li><li><a href="#expression.complexity">10.7 Complexity</a><ul><li><a href="#complexexpression">R10.7.1 表达式不应过于复杂</a></li></ul></li><li><a href="#expression.other">10.8 Other</a><ul><li><a href="#accesspaddingdata">R10.8.1 不应访问填充数据</a></li><li><a href="#oddnew">R10.8.2 new 表达式只可用于赋值或当作参数</a></li><li><a href="#oddsubscripting">R10.8.3 数组下标应为整形表达式</a></li><li><a href="#forbidcommaexpression">R10.8.4 禁用逗号表达式</a><br/></li></ul></li></ul><p><span id="__literal"><strong><a href="#literal">11. Literal</a></strong></span></p><ul><li><a href="#literal_suspiciouschar">R11.1 注意可疑的字符常量</a></li><li><a href="#literal_hardcodechar">R11.2 字符常量中不可存在应转义而未转义的字符</a></li><li><a href="#literal_hardcodestring">R11.3 字符串常量中不可存在应转义而未转义的字符</a></li><li><a href="#literal_nonstandardesc">R11.4 不应使用非标准转义字符</a></li><li><a href="#literal_hybridconcat">R11.5 不同前缀的字符串常量不应连接在一起</a></li><li><a href="#literal_misspelling">R11.6 字符串常量中不应存在拼写错误</a></li><li><a href="#literal_confusingsuffix">R11.7 整数或浮点数常量的后缀应使用大写字母</a></li><li><a href="#literal_forbidoct">R11.8 禁用 8 进制常量</a></li><li><a href="#literal_nonstandardsuffix">R11.9 整数或浮点数常量应使用标准后缀</a></li><li><a href="#literal_oddconcat">R11.10 小心遗漏逗号导致的非预期字符串连接</a></li><li><a href="#literal_magicnumber">R11.11 不应存在 magic number</a></li><li><a href="#literal_magicstring">R11.12 不应存在 magic string</a></li><li><a href="#literal_multicharacter">R11.13 不应使用多字符常量</a><br/></li></ul><p><span id="__cast"><strong><a href="#cast">12. Cast</a></strong></span></p><ul><li><a href="#narrowcast">R12.1 避免类型转换造成数据丢失</a></li><li><a href="#voidcast">R12.2 避免与 void* 相互转换</a></li><li><a href="#downcast">R12.3 避免向下类型转换</a></li><li><a href="#ptrintcast">R12.4 指针与整数不应相互转换</a></li><li><a href="#qualifiercastedaway">R12.5 类型转换不应去掉 const、volatile 等属性</a></li><li><a href="#castnoinheritance">R12.6 不应强制转换无继承关系的指针或引用</a></li><li><a href="#castnonpublicinheritance">R12.7 不应强制转换无 public 继承关系的指针或引用</a></li><li><a href="#nonpodbinarycast">R12.8 非 POD 类的指针与基本类型的指针不应相互转换</a></li><li><a href="#charwcharcast">R12.9 不同的字符串类型之间不可直接转换</a></li><li><a href="#stricteralignedcast">R12.10 避免向对齐要求更严格的指针转换</a></li><li><a href="#arraypointercast">R12.11 避免转换指向数组的指针</a></li><li><a href="#functionpointercast">R12.12 避免转换函数指针</a></li><li><a href="#nondynamicdowncast">R12.13 向下动态类型转换应使用 dynamic_cast</a></li><li><a href="#oddnewcast">R12.14 对 new 表达式不应进行类型转换</a></li><li><a href="#redundantcast">R12.15 不应存在多余的类型转换</a></li><li><a href="#unsuitablereinterpretcast">R12.16 可用其他方式完成的转换不应使用 reinterpret_cast</a></li><li><a href="#forbidreinterpretcast">R12.17 合理使用 reinterpret_cast</a></li><li><a href="#forbidcstylecast">R12.18 在 C++ 代码中禁用 C 风格类型转换</a><br/></li></ul><p><span id="__buffer"><strong><a href="#buffer">13. Buffer</a></strong></span></p><ul><li><a href="#bufferoverflow">R13.1 避免缓冲区溢出</a></li><li><a href="#arrayindexoverflow">R13.2 数组下标不可越界</a></li><li><a href="#insufficientbuffer">R13.3 为缓冲区分配足够的空间</a></li><li><a href="#nonpodfilling">R13.4 memset 等函数不应作用于非 POD 对象</a></li><li><a href="#badlength">R13.5 memset 等函数长度相关的参数不应有误</a></li><li><a href="#valueoverflow">R13.6 memset 等函数填充值相关的参数不应有误</a><br/></li></ul><p><span id="__pointer"><strong><a href="#pointer">14. Pointer</a></strong></span></p><ul><li><a href="#nullderefinscp">R14.1 避免空指针解引用</a></li><li><a href="#nullderefinexp">R14.2 注意逻辑表达式内的空指针解引用</a></li><li><a href="#danglingderef">R14.3 不可解引用已被释放的指针</a></li><li><a href="#invalidnullcheck">R14.4 避免无效的空指针检查</a></li><li><a href="#repeatednullcheck">R14.5 不应重复检查指针是否为空</a></li><li><a href="#fixedaddrtopointer">R14.6 不应将非零常量值赋值给指针</a></li><li><a href="#zeroasptrvalue">R14.7 不应使用常量 0 表示空指针</a></li><li><a href="#oddptrboolassignment">R14.8 不应使用 false 对指针赋值</a></li><li><a href="#oddptrcharassignment">R14.9 不应使用 ‘\0’ 等字符常量对指针赋值</a></li><li><a href="#oddptrboolcomparison">R14.10 指针不应与 false 比较大小</a></li><li><a href="#oddptrcharcomparison">R14.11 指针不应与 ‘\0’ 等字符常量比较大小</a></li><li><a href="#oddptrzerocomparison">R14.12 指针与空指针不应比较大小</a></li><li><a href="#this_zerocomparison">R14.13 不应判断 this 指针是否为空</a></li><li><a href="#this_deleteindestructor">R14.14 析构函数中不可使用 delete this</a></li><li><a href="#this_forbiddeletethis">R14.15 禁用 delete this</a></li><li><a href="#nullderefdynamiccast">R14.16 判断 dynamic_cast 转换是否成功</a></li><li><a href="#missingresetnull">R14.17 指针在释放后应置空</a><br/></li></ul><p><span id="__interruption"><strong><a href="#interruption">15. Interruption</a></strong></span></p><ul><li><a href="#sig_dataraces">R15.1 避免由信号处理产生的数据竞争</a></li><li><a href="#sig_nonasyncsafecall">R15.2 处理信号时避免使用非异步信号安全函数</a></li><li><a href="#sig_illreturn">R15.3 SIGFPE、SIGILL、SIGSEGV 等信号的处理函数不可返回</a></li><li><a href="#forbidsignalfunction">R15.4 禁用 signal 函数</a><br/></li></ul><p><span id="__concurrency"><strong><a href="#concurrency">16. Concurrency</a></strong></span></p><ul><li><a href="#dataraces">R16.1 访问共享数据应遵循合理的同步机制</a></li><li><a href="#toctou">R16.2 避免在事务中通过路径多次访问同一文件</a></li><li><a href="#atomicraces">R16.3 避免在事务中多次非同步地访问原子对象</a></li><li><a href="#deadlock">R16.4 避免死锁</a></li><li><a href="#asynchronoustermination">R16.5 避免异步终止线程</a></li><li><a href="#illlifetime">R16.6 避免异步终止共享对象的生命周期</a></li><li><a href="#spuriouslywakeup">R16.7 避免虚假唤醒造成同步错误</a></li><li><a href="#bitfielddataraces">R16.8 避免并发访问位域造成的数据竞争</a></li><li><a href="#signalinmultithreading">R16.9 多线程环境中不可使用 signal 函数</a><br/></li></ul><p><span id="__style"><strong><a href="#style">17. Style</a></strong></span></p><ul><li><a href="#spacestyle">R17.1 空格应遵循统一风格</a></li><li><a href="#bracestyle">R17.2 大括号应遵循统一风格</a></li><li><a href="#assignmentassubexpression">R17.3 赋值表达式不应作为子表达式</a></li><li><a href="#incdecassubexpression">R17.4 自增、自减表达式不应作为子表达式</a></li><li><a href="#nonboolcondition">R17.5 控制条件应为 bool 型表达式</a></li><li><a href="#nonboolsubcondition">R17.6 !、&amp;&amp;、|| 的子表达式应为 bool 型表达式</a></li><li><a href="#nonpostfixsubcondition">R17.7 &amp;&amp;、|| 的子表达式应为后缀表达式</a></li><li><a href="#mixnullptrandnull">R17.8 在 C++ 代码中 NULL 和 nullptr 不应混用</a></li><li><a href="#deprecatednull">R17.9 在 C++ 代码中用 nullptr 代替 NULL</a></li><li><a href="#redundantparentheses">R17.10 避免多余的括号</a></li><li><a href="#redundantsemicolon">R17.11 避免多余的分号</a><br/><br/></li></ul><h2 id="1-Security"><a href="#1-Security" class="headerlink" title="1. Security"></a><span id="security">1. Security</span></h2><h3 id="▌R1-1-敏感数据不可写入代码"><a href="#▌R1-1-敏感数据不可写入代码" class="headerlink" title="▌R1.1 敏感数据不可写入代码"></a><span id="plainsensitiveinfo">▌R1.1 敏感数据不可写入代码</span></h3><p>ID_plainSensitiveInfo&emsp;&emsp;&emsp;&emsp;&nbsp;:shield: security warning</p><hr/><p>代码中的敏感数据极易泄露，产品及相关运维、测试工具的代码均不可记录任何敏感数据。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * My name is Rabbit</span></span><br><span class="line"><span class="comment"> * My passphrase is Y2Fycm90         // Non-compliant</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PASSWORD <span class="string">&quot;Y2Fycm90&quot;</span>          <span class="comment">// Non-compliant</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* passcode = <span class="string">&quot;Y2Fycm90&quot;</span>;   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>将密码等敏感数据写入代码是非常不安全的，即使例中 Y2Fycm90 是实际密码的某种变换，聪明的读者也会很快将其破解。  </p><p>敏感数据的界定是产品设计的重要环节。对具有高可靠性要求的客户端软件，不建议保存任何敏感数据，对于必须保存敏感数据的软件系统，则需要落实安全的存储机制以及相关的评审与测试。<br><br/><br><br/></p><h4 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h4><p>ID_secretLeak<br><br/></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>CWE-259<br>CWE-798<br>SEI CERT MSC41-C<br><br/><br><br/></p><h3 id="▌R1-2-敏感数据不可被系统外界感知"><a href="#▌R1-2-敏感数据不可被系统外界感知" class="headerlink" title="▌R1.2 敏感数据不可被系统外界感知"></a><span id="secretleak">▌R1.2 敏感数据不可被系统外界感知</span></h3><p>ID_secretLeak&emsp;&emsp;&emsp;&emsp;&nbsp;:shield: security warning</p><hr/><p>敏感数据出入软件系统时需采用有效的保护措施。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(User* u)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">log</span>(<span class="string">&quot;username: %s, password: %s&quot;</span>, u-&gt;name, u-&gt;pw);   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，将敏感数据直接输出到界面、日志或其他外界可感知的介质中是不安全的，需避免敏感数据的有意外传，除此之外，还需要落实具体的保护措施。  </p><p>保护措施包括但不限于：  </p><ul><li>避免用明文或弱加密方式传输敏感数据  </li><li>避免敏感数据从内存交换到外存  </li><li>避免如除零、无效指针解引用等问题造成“<a href="https://en.wikipedia.org/wiki/Core_dump">core dump</a>”  </li><li>应具备反调试机制，使外界无法获得进程的内部数据  </li><li>应具备反注入机制，使外界无法篡改程序的行为</li></ul><p>下面以 Windows 平台为例，给出阻止敏感数据从内存交换到外存的示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SecretBuf</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* buf = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SecretBuf</span>(<span class="type">size_t</span> size) &#123;</span><br><span class="line">        <span class="keyword">auto</span>* tmp = (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="built_in">VirtualAlloc</span>(</span><br><span class="line">            <span class="number">0</span>, size, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">VirtualLock</span>(tmp, size)) &#123;   <span class="comment">// The key point</span></span><br><span class="line">            buf = tmp;</span><br><span class="line">            len = size;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">VirtualFree</span>(tmp, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   ~<span class="built_in">SecretBuf</span>() &#123;</span><br><span class="line">        <span class="built_in">SecureZeroMemory</span>(buf, len);   <span class="comment">// Clear the secret content</span></span><br><span class="line">        <span class="built_in">VirtualUnlock</span>(buf, len);</span><br><span class="line">        <span class="built_in">VirtualFree</span>(buf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        buf = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> len; &#125;</span><br><span class="line">    <span class="function"><span class="type">unsigned</span> <span class="type">char</span>* <span class="title">ptr</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> buf; &#125;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* <span class="title">ptr</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> buf; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中 SecretBuf 是一个缓冲区类，其申请的内存会被锁定在物理内存中，不会与外存交换，可在一定程度上防止其他进程的恶意嗅探，保障缓冲区内数据的安全。SecretBuf 在构造函数中通过 VirtualLock 锁定物理内存，在析构函数中通过 VirtualUnlock 解除锁定，解锁之前有必要清除数据，否则解锁之后残留数据仍有可能被交换到外存，进一步可参见 ID_unsafeCleanup。  </p><p>SecretBuf 的使用方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void foo() &#123;</span><br><span class="line">    SecretBuf buf(256);</span><br><span class="line">    if (buf.ptr()) &#123;</span><br><span class="line">        ....             // Do something secret using buf.ptr()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        ....             // Handle memory error</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 Linux 等系统可参见如下有相似功能的系统 API：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int mlock(const void* addr, size_t len);     // In &lt;sys/mman.h&gt;</span><br><span class="line">int munlock(const void* addr, size_t len);</span><br><span class="line">int mlockall(int flags);</span><br><span class="line">int munlockall(void);</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-1"><a href="#相关-1" class="headerlink" title="相关"></a>相关</h4><p>ID_unsafeCleanup<br><br/></p><h4 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h4><p>CWE-528<br>CWE-591<br>SEI CERT MEM06-C<br><br/><br><br/></p><h3 id="▌R1-3-敏感数据在使用后应被有效清理"><a href="#▌R1-3-敏感数据在使用后应被有效清理" class="headerlink" title="▌R1.3 敏感数据在使用后应被有效清理"></a><span id="unsafecleanup">▌R1.3 敏感数据在使用后应被有效清理</span></h3><p>ID_unsafeCleanup&emsp;&emsp;&emsp;&emsp;&nbsp;:shield: security warning</p><hr/><p>及时清理不再使用的敏感数据是重要的安全措施，且应保证清理过程不会因为编译器的优化而失效。  </p><p>程序会反复利用内存，敏感数据可能会残留在未初始化的对象或对象之间的填充数据中，如果被存储到磁盘或传输到网络就会造成敏感信息的泄露，可参见 ID_secretLeak 和 ID_ignorePaddingData 的进一步讨论。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> password[<span class="number">8</span>] = &#123;&#125;;</span><br><span class="line">    ....</span><br><span class="line">    <span class="built_in">memset</span>(password, <span class="number">0</span>, <span class="built_in">sizeof</span>(password));  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码调用 memset 覆盖敏感数据以达到清理目的，然而保存敏感信息的 password 为局部数组且 memset 之后没有再被引用，根据相关标准，编译器可将 memset 过程去掉，使敏感数据没有得到有效清理。C11 提供了 memset_s 函数以避免这种问题，某些平台和库也提供了相关支持，如 SecureZeroMemory、explicit_bzero、OPENSSL_cleanse 等不会被优化掉的函数。  </p><p>在 C++ 代码中，可用 volatile 限定相关数据以避免编译器的优化，再用 std::fill_n 等方法清理，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void foo() &#123;</span><br><span class="line">    char password[8] = &#123;&#125;;</span><br><span class="line">    ....</span><br><span class="line">    volatile char  v_padding = 0;</span><br><span class="line">    volatile char* v_address = password;</span><br><span class="line">    std::fill_n(v_address, sizeof(password), v_padding);  // Compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-2"><a href="#相关-2" class="headerlink" title="相关"></a>相关</h4><p>ID_secretLeak<br>ID_ignorePaddingData<br><br/></p><h4 id="依据"><a href="#依据" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 5.1.2.3(3)<br>ISO&#x2F;IEC 9899:2011 5.1.2.3(4)<br>ISO&#x2F;IEC 9899:2011 K.3.7.4.1<br><br/></p><h4 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h4><p>CWE-14<br>CWE-226<br>CWE-244<br>CWE-733<br>SEI CERT MSC06-C<br><br/><br><br/></p><h3 id="▌R1-4-公共成员或全局对象不应记录敏感数据"><a href="#▌R1-4-公共成员或全局对象不应记录敏感数据" class="headerlink" title="▌R1.4 公共成员或全局对象不应记录敏感数据"></a><span id="sensitivename">▌R1.4 公共成员或全局对象不应记录敏感数据</span></h3><p>ID_sensitiveName&emsp;&emsp;&emsp;&emsp;&nbsp;:shield: security warning</p><hr/><p>公共成员、全局对象可被外部代码引用，如果存有敏感数据则可能会被误用或窃取。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> string password;   <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    string username;</span><br><span class="line">    string password;      <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>至少应将相关成员改为 private：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">public:</span><br><span class="line">    ....                  // Interfaces for accessing passwords safely</span><br><span class="line">private:</span><br><span class="line">    string username;</span><br><span class="line">    string password;      // Compliant</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>敏感数据最好对引用者完全隐藏，避免被恶意分析、复制或序列化。使数据与接口进一步分离，可参见“<a href="https://en.cppreference.com/w/cpp/language/pimpl">Pimpl idiom</a>”等模式。<br><br/><br><br/></p><h4 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h4><p>CWE-766<br><br/><br><br/></p><h3 id="▌R1-5-预判用户输入造成的不良后果"><a href="#▌R1-5-预判用户输入造成的不良后果" class="headerlink" title="▌R1.5 预判用户输入造成的不良后果"></a><span id="hijack">▌R1.5 预判用户输入造成的不良后果</span></h3><p>ID_hijack&emsp;&emsp;&emsp;&emsp;&nbsp;:shield: security warning</p><hr/><p>须对用户输入的脚本、路径、资源请求等信息进行预判，对产生不良后果的输入予以拒绝。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Result <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqlQuery</span>(</span><br><span class="line">        <span class="string">&quot;select * from db where key=&#x27;%s&#x27;&quot;</span>, <span class="built_in">userInput</span>()   <span class="comment">// Non-compliant</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设 userInput 返回用户输入的字符串，sqlQuery 将用户输入替换格式化占位符后执行 SQL 语句，如果用户输入“xxx’ or ‘x’&#x3D;’x”一类的字符串则相当于执行的是“select * from db where key&#x3D;’xxx’ or ‘x’&#x3D;’x’”，一个恒为真的条件使 where 限制失效，造成所有数据被返回，这是一种常见的攻击方式，称为“<a href="https://en.wikipedia.org/wiki/SQL_injection">SQL 注入（SQL injection）</a>”，对于 XPath、XQuery、LDAP 等脚本均需考虑这种问题，应在执行前判断用户输入的安全性。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string bar() &#123;</span><br><span class="line">    return readFile(</span><br><span class="line">        &quot;/myhome/mydata/&quot; + userInput()   // Non-compliant</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码意在将用户输入的路径限制在 &#x2F;myhome&#x2F;mydata 目录下，然而这么做是不安全的，如果用户输入带有“..&#x2F;”这种相对路径，则仍可绕过限制，这也是一种常见的攻击方式，称为“<a href="https://en.wikipedia.org/wiki/Directory_traversal_attack">路径遍历（directory traversal）</a>”，应在读取文件之前判断路径的安全性。  </p><p>注意，“用户输入”不单指人的手工输入，源自环境变量、配置文件以及其他软硬件的输入均在此范围内。<br><br/><br><br/></p><h4 id="参考-4"><a href="#参考-4" class="headerlink" title="参考"></a>参考</h4><p>CWE-23<br>CWE-73<br>CWE-89<br>CWE-943<br><br/><br><br/></p><h3 id="▌R1-6-对资源设定合理的访问权限"><a href="#▌R1-6-对资源设定合理的访问权限" class="headerlink" title="▌R1.6 对资源设定合理的访问权限"></a><span id="unlimitedauthority">▌R1.6 对资源设定合理的访问权限</span></h3><p>ID_unlimitedAuthority&emsp;&emsp;&emsp;&emsp;&nbsp;:shield: security warning</p><hr/><p>对资源设定合理的访问权限，避免为攻击者提供不应拥有的权限或能力。  </p><p>权限的分类包括但不限于：  </p><ul><li>文件、数据库等资源的读写权限  </li><li>计算、IO 过程的执行权限  </li><li>软硬件资源的占用权限</li></ul><p>权限设定是产品设计与实现的重要环节，需落实相关的评审与测试。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">umask</span>(<span class="number">000</span>);                     <span class="comment">// Non-compliant</span></span><br><span class="line">    FILE* fp = <span class="built_in">fopen</span>(<span class="string">&quot;bar&quot;</span>, <span class="string">&quot;w&quot;</span>);   <span class="comment">// Old method</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 umask 函数开放了所有用户对文件的读写权限，这是很不安全的，进程之间不应直接通过文件通信，应实现安全的接口和交互机制。  </p><p>由于历史原因，C 语言的 fopen 和 C++ 语言的 fstream 都不能确保文件只能被当前用户访问，C11 提供了 fopen_s，C++17 提供了 std::filesystem::permissions 以填补这方面的需求。  </p><p>C11 fopen_s 简例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#define __STDC_WANT_LIB_EXT1__ 1</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    FILE* fp = NULL;</span><br><span class="line">    errno_t e = fopen_s(&amp;fp, &quot;bar&quot;, &quot;w&quot;);   // Good</span><br><span class="line">    ....</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 fopen 不同，fopen_s 可以不受 umask 等函数的影响，直接将文件的权限设为当前用户私有，其他用户不可访问，降低了文件被窃取或篡改的风险，是一种更安全的方法。  </p><p>除此之外，如果需要对资源进行更精细的权限管理，可参见“<a href="https://en.wikipedia.org/wiki/Access-control_list">access control list（ACL）</a>”。<br><br/><br><br/></p><h4 id="依据-1"><a href="#依据-1" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:2011 K.3.5.2.1(7)<br>ISO&#x2F;IEC 14882:2017 30.10.15.26<br><br/></p><h4 id="参考-5"><a href="#参考-5" class="headerlink" title="参考"></a>参考</h4><p>CWE-266<br>CWE-732<br>SEI CERT FIO06-C<br><br/><br><br/></p><h3 id="▌R1-7-对用户落实有效的权限管理"><a href="#▌R1-7-对用户落实有效的权限管理" class="headerlink" title="▌R1.7 对用户落实有效的权限管理"></a><span id="improperauthorization">▌R1.7 对用户落实有效的权限管理</span></h3><p>ID_improperAuthorization&emsp;&emsp;&emsp;&emsp;&nbsp;:shield: security warning</p><hr/><p>需落实有效的权限管理，相关措施包括但不限于：  </p><ul><li>落实授权与认证机制，提供多因素认证  </li><li>遵循最小特权原则，对资源和相关算法设置合理的访问或执行权限  </li><li>避免仅在客户端认证而非服务端认证  </li><li>检查请求是否符合用户的权限设定，拒绝无权限的请求  </li><li>用户放弃某项权限后，应确保相关权限不再生效  </li><li>遵循合理的“认证 - 执行”顺序，避免复杂度攻击或早期放大攻击  </li><li>保证信道完整性，对相关用户进行充分的身份认证，避免中间人攻击  </li><li>验证通信通道的源和目的地，拒绝非预期的请求和应答  </li><li>避免攻击者使用重放攻击等手段绕过身份认证或干扰正常运营  </li><li>避免不恰当地信任反向 DNS（关注 DNS Cache Poisoning）  </li><li>避免过于严格且易触发的账户锁定机制，使攻击者通过锁定账户干扰正常运营</li></ul><p>权限管理与安全直接相关，应落实严格的评审、测试以及攻防演练。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Result <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> req = <span class="built_in">getRequest</span>();</span><br><span class="line">    <span class="keyword">auto</span> res = <span class="built_in">sqlQuery</span>(</span><br><span class="line">        <span class="string">&quot;select * from db where key=&#x27;%s&#x27;&quot;</span>, req[<span class="string">&quot;key&quot;</span>]   <span class="comment">// Non-compliant</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设例中 req 对应用户请求，sqlQuery 将请求中的 key 字段替换格式化占位符后执行查询，这个模式存在多种问题，应先判断用户是否具有读取数据库相关字段的权限，而且还应判断 req[“key”] 的值是否安全，详见 ID_hijack。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void bar(User* user) &#123;</span><br><span class="line">    auto buf = read_large_file();</span><br><span class="line">    if (is_admin(user)) &#123;           // Non-compliant</span><br><span class="line">        do_something(buf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设例中 read_large_file 读取大型文件，is_admin 进行身份认证，在身份认证之前访问资源使得攻击者不必获取有效账号即可消耗系统资源，从而对系统造成干扰，所以应该在访问资源之前进行身份认证。<br><br/><br><br/></p><h4 id="参考-6"><a href="#参考-6" class="headerlink" title="参考"></a>参考</h4><p>CWE-285<br>CWE-350<br><br/><br><br/></p><h3 id="▌R1-8-避免引用危险符号名称"><a href="#▌R1-8-避免引用危险符号名称" class="headerlink" title="▌R1.8 避免引用危险符号名称"></a><span id="dangerousname">▌R1.8 避免引用危险符号名称</span></h3><p>ID_dangerousName&emsp;&emsp;&emsp;&emsp;&nbsp;:shield: security warning</p><hr/><p>弱加密、弱哈希、弱随机、不安全的协议等相关库、函数、类、宏、常量等名称不应出现在代码中。  </p><p>这种危险符号名称主要来自：  </p><ul><li>低质量随机数生成算法，如 srand、rand 等  </li><li>不再适用的哈希算法，如 MD2、MD4、MD5、MD6、RIPEMD 以及 SHA-1 等  </li><li>非加密协议，如 HTTP、FTP 等  </li><li>低版本的传输层安全协议，如 TLSv1.2 之前的版本  </li><li>弱加密算法，如 DES、3DES 等</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/md5.h&gt;</span>   <span class="comment">// Non-compliant, obsolete hash algorithm</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> string myUrl = <span class="string">&quot;http://foo/bar&quot;</span>;   <span class="comment">// Non-compliant, use https instead</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MD5_CTX c;       <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="built_in">MD5_Init</span>(&amp;c);    <span class="comment">// Non-compliant, obsolete hash algorithm</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">0</span>);        <span class="comment">// Non-compliant, unsafe random seed</span></span><br><span class="line">    <span class="built_in">EVP_des_ecb</span>();   <span class="comment">// Non-compliant, unsafe encryption algorithm</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-7"><a href="#参考-7" class="headerlink" title="参考"></a>参考</h4><p>CWE-326<br>CWE-327<br><br/><br><br/></p><h3 id="▌R1-9-避免使用具有危险性的接口"><a href="#▌R1-9-避免使用具有危险性的接口" class="headerlink" title="▌R1.9 避免使用具有危险性的接口"></a><span id="dangerousfunction">▌R1.9 避免使用具有危险性的接口</span></h3><p>ID_dangerousFunction&emsp;&emsp;&emsp;&emsp;&nbsp;:shield: security warning</p><hr/><p>某些库函数或系统 API 本身就具有危险性，使用这种接口相当于直接引入了风险。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">gets       <span class="comment">// The most dangerous function</span></span><br><span class="line">mktemp     <span class="comment">// Every use of ‘mktemp’ is a security risk, use ‘mkstemp’ instead</span></span><br><span class="line">getpass    <span class="comment">// Unsafe and not portable</span></span><br><span class="line">crypt      <span class="comment">// Unsafe, exhaustive searches of the key space are possible</span></span><br><span class="line">getpw      <span class="comment">// It may overflow the provided buffer, use ‘getpwuid’ instead</span></span><br><span class="line">cuserid    <span class="comment">// Not portable and unreliable, use ‘getpwuid(geteuid())’ instead</span></span><br><span class="line">chgrp      <span class="comment">// Prone to TOCTOU race conditions, use ‘fchgrp’ instead</span></span><br><span class="line">chown      <span class="comment">// Prone to TOCTOU race conditions, use ‘fchown’ instead</span></span><br><span class="line">chmod      <span class="comment">// Prone to TOCTOU race conditions, use ‘fchmod’ instead</span></span><br><span class="line"></span><br><span class="line">SuspendThread       <span class="comment">// Forced suspension of a thread can cause many problems</span></span><br><span class="line">TerminateThread     <span class="comment">// Forced termination of a thread can cause many problems</span></span><br><span class="line">GlobalMemoryStatus        <span class="comment">// Return incorrect information, use ‘GlobalMemoryStatusEx’ instead</span></span><br><span class="line">SetProcessWorkingSetSize  <span class="comment">// Cause adverse effects on other processes and the entire system</span></span><br></pre></td></tr></table></figure><p>gets 等函数无法检查缓冲区边界，是公认的危险函数；TerminateThread 等 Windows API 会强制终止线程，线程持有的资源无法正确释放会导致泄漏或死锁等问题，应避免使用这类函数。<br><br/><br><br/></p><h4 id="参考-8"><a href="#参考-8" class="headerlink" title="参考"></a>参考</h4><p>CWE-242<br>CWE-676<br><br/><br><br/></p><h3 id="▌R1-10-不应使用已过时的接口"><a href="#▌R1-10-不应使用已过时的接口" class="headerlink" title="▌R1.10 不应使用已过时的接口"></a><span id="obsoletefunction">▌R1.10 不应使用已过时的接口</span></h3><p>ID_obsoleteFunction&emsp;&emsp;&emsp;&emsp;&nbsp;:shield: security warning</p><hr/><p>某些库函数或系统 API 存在缺陷并已宣布过时，应改用更完善的替代方法。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ctime           <span class="comment">// Use ‘strftime’ instead</span></span><br><span class="line">asctime         <span class="comment">// Use ‘strftime’ instead</span></span><br><span class="line">bcmp            <span class="comment">// Use ‘memcmp’ instead</span></span><br><span class="line">bcopy           <span class="comment">// Use ‘memmove’ or ‘memcpy’ instead</span></span><br><span class="line">bsd_signal      <span class="comment">// Use ‘sigaction’ instead</span></span><br><span class="line">gethostbyaddr   <span class="comment">// Use ‘getnameinfo’ instead</span></span><br><span class="line">gethostbyname   <span class="comment">// Use ‘getaddrinfo’ instead</span></span><br><span class="line"></span><br><span class="line">RegCreateKey    <span class="comment">// Use ‘RegCreateKeyEx’ instead</span></span><br><span class="line">RegEnumKey      <span class="comment">// Use ‘RegEnumKeyEx’ instead</span></span><br><span class="line">RegOpenKey      <span class="comment">// Use ‘RegOpenKeyEx’ instead</span></span><br><span class="line">RegQueryValue   <span class="comment">// Use ‘RegQueryValueEx’ instead</span></span><br><span class="line">RegSetValue     <span class="comment">// Use ‘RegSetValueEx’ instead</span></span><br></pre></td></tr></table></figure><p>例中 C89 声明的 ctime、asctime 等函数在 POSIX.1-2008 中已宣告过时，应改用 strftime；RegCreateKey 等 16 位 Windows API 在 32 和 64 位平台中不应再使用。<br><br/><br><br/></p><h4 id="参考-9"><a href="#参考-9" class="headerlink" title="参考"></a>参考</h4><p>CWE-477<br><br/><br><br/></p><h3 id="▌R1-11-禁用不安全的字符串函数"><a href="#▌R1-11-禁用不安全的字符串函数" class="headerlink" title="▌R1.11 禁用不安全的字符串函数"></a><span id="unsafestringfunction">▌R1.11 禁用不安全的字符串函数</span></h3><p>ID_unsafeStringFunction&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: security warning</p><hr/><p>由于历史原因，C 标准库中的某些字符串函数不执行边界检查，易造成运行时错误和安全漏洞。  </p><p>这类函数包括：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gets、strcpy、strcat、wcscpy、wcscat、</span><br><span class="line">sprintf、vsprintf、swprintf、vswprintf、</span><br><span class="line">scanf、sscanf、fscanf、vfscanf、vscanf、vsscanf</span><br></pre></td></tr></table></figure><p>与这类函数相似的函数同样受本规则约束，如下列 Windows API：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StrCpy、StrCpyA、StrCpyW、StrCat、StrCatA、StrCatW、</span><br><span class="line">lstrcpy、lstrcpyA、lstrcpyW、lstrcat、lstrcatA、lstrcatW</span><br></pre></td></tr></table></figure><p>在 C 代码中应采用更安全的库函数，如用 fgets 代替 gets，snprintf 代替 sprintf。在 C++ 代码中应采用 STL 标准库提供的相关功能。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">gets</span>(buf);      <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中 gets 函数无法检查缓冲区的大小，一旦输入超过了 buf 数组的边界，程序的数据或流程就会遭到破坏，这种情况会被攻击者利用，可参见 ID_bufferOverflow 的进一步说明。如果代码中存在 gets 等函数，可以直接判定程序是有漏洞的。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">fgets</span>(buf, <span class="built_in">sizeof</span>(buf), stdin);  <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><p>fgets 与 gets 不同，当输入超过缓冲区大小时会被截断，保证缓冲区之外的数据不会被破坏。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char buf[100];</span><br><span class="line">scanf(&quot;%s&quot;, buf);  // Non-compliant</span><br></pre></td></tr></table></figure><p>例中 scanf 函数与 gets 函数有相同的问题，可改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char buf[100];</span><br><span class="line">scanf(&quot;%99s&quot;, buf);  // Let it go, but ‘fgets’ is better</span><br></pre></td></tr></table></figure><p>scanf、sprintf、strcpy 等函数无视缓冲区大小，需要在外部另行实现防止缓冲区溢出的代码，完全依赖于开发者的小心谨慎。历史表明，对人的单方面依赖是不可靠的，改用更安全的方法才是明智的选择。<br><br/><br><br/></p><h4 id="相关-3"><a href="#相关-3" class="headerlink" title="相关"></a>相关</h4><p>ID_bufferOverflow<br><br/></p><h4 id="依据-2"><a href="#依据-2" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:2011 Annex K<br>ISO&#x2F;IEC 9899:2011 K.3.7<br>ISO&#x2F;IEC 9899:2011 K.3.9<br><br/></p><h4 id="参考-10"><a href="#参考-10" class="headerlink" title="参考"></a>参考</h4><p>CWE-119<br>CWE-120<br>CWE-676<br>MISRA C++ 2008 18-0-5<br><br/><br><br/></p><h3 id="▌R1-12-确保字符串以空字符结尾"><a href="#▌R1-12-确保字符串以空字符结尾" class="headerlink" title="▌R1.12 确保字符串以空字符结尾"></a><span id="impropernulltermination">▌R1.12 确保字符串以空字符结尾</span></h3><p>ID_improperNullTermination&emsp;&emsp;&emsp;&emsp;&nbsp;:shield: security warning</p><hr/><p>语言要求字符串以空字符结尾，程序应保证有足够的内存空间安置空字符，否则会破坏程序基本的执行机制，造成严重问题。  </p><p>空字符指 ‘\0’、L’\0’、u’\0’、U’\0’，分别对应 char*、wchar_t*、char16_t*、char32_t* 等字符串类型。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* p)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">strncpy</span>(a, p, <span class="built_in">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">strupr</span>(a));   <span class="comment">// To upper case and print, dangerous</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例示代码将字符串复制到数组中，转为大写并打印，然而如果 p 所指字符串的长度超过 3，strncpy 不会在数组的结尾安置空字符 ‘\0’，导致 strupr 内存访问越界，程序可能会崩溃，也可能打印出本该隐藏的敏感数据。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* p)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">4</span>] = <span class="string">&quot;&quot;</span>;                 <span class="comment">// Initialize all to &#x27;\0&#x27;</span></span><br><span class="line">    <span class="built_in">strncpy</span>(a, p, <span class="built_in">sizeof</span>(a));</span><br><span class="line">    <span class="keyword">if</span> (a[<span class="number">3</span>] == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">strupr</span>(a));  <span class="comment">// OK</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ....                        <span class="comment">// Handle string length exceptions</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将所有数组元素初始化为 ‘\0’，调用 strncpy 后如果数组最后一个元素是 ‘\0’，说明输入字符串的长度符合要求，否则可作出相应的异常处理。<br><br/><br><br/></p><h4 id="相关-4"><a href="#相关-4" class="headerlink" title="相关"></a>相关</h4><p>ID_unsafeStringFunction<br><br/></p><h4 id="依据-3"><a href="#依据-3" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.21.2.4<br>ISO&#x2F;IEC 9899:2011 7.24.2.4<br><br/></p><h4 id="参考-11"><a href="#参考-11" class="headerlink" title="参考"></a>参考</h4><p>CWE-170<br><br/><br><br/></p><h3 id="▌R1-13-避免除-0-等计算异常"><a href="#▌R1-13-避免除-0-等计算异常" class="headerlink" title="▌R1.13 避免除 0 等计算异常"></a><span id="dividebyzero">▌R1.13 避免除 0 等计算异常</span></h3><p>ID_divideByZero&emsp;&emsp;&emsp;&emsp;&nbsp;:shield: security error</p><hr/><p>除 0 等在数学上没有定义的运算、浮点异常、非法指令、段错误等问题称为“计算异常”，意味着严重的底层运行时错误，而且这种异常无法用语言层面的常规方法捕获。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n) &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span> / n;   <span class="comment">// Non-compliant, must determine whether ‘n’ is 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当除数为 0 时，对于整形数据的除法，进程往往会崩溃，对于浮点型数据的除法，一般会产生“<a href="https://en.wikipedia.org/wiki/Infinity#Computing">Inf</a>”或“<a href="https://en.wikipedia.org/wiki/NaN">NaN</a>”等无效结果，在特殊的设置下，也可以使进程异常终止。  </p><p>崩溃会给用户不好的体验，而且要注意如果崩溃可由外部输入引起，会被攻击者利用从而迫使程序无法正常工作，具有高可靠性要求的服务类程序更应该注意这一点，可参见“<a href="https://en.wikipedia.org/wiki/Denial-of-service_attack">拒绝服务攻击</a>”的进一步说明。对于客户端程序，也要防止攻击者对崩溃产生的“<a href="https://en.wikipedia.org/wiki/Core_dump">core dump</a>”进行恶意调试，避免泄露敏感数据，总之程序的健壮性与安全性是紧密相关的。<br><br/><br><br/></p><h4 id="相关-5"><a href="#相关-5" class="headerlink" title="相关"></a>相关</h4><p>ID_sig_illReturn<br><br/></p><h4 id="依据-4"><a href="#依据-4" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.5.5(5)-undefined<br>ISO&#x2F;IEC 9899:2011 6.5.5(5)-undefined<br>ISO&#x2F;IEC 14882:2011 5.6(4)-undefined<br>ISO&#x2F;IEC 14882:2017 8.6(4)-undefined<br><br/></p><h4 id="参考-12"><a href="#参考-12" class="headerlink" title="参考"></a>参考</h4><p>CWE-189<br>CWE-369<br>C++ Core Guidelines ES.105<br><br/><br><br/></p><h3 id="▌R1-14-格式化字符串应为常量"><a href="#▌R1-14-格式化字符串应为常量" class="headerlink" title="▌R1.14 格式化字符串应为常量"></a><span id="variableformatstring">▌R1.14 格式化字符串应为常量</span></h3><p>ID_variableFormatString&emsp;&emsp;&emsp;&emsp;&nbsp;:shield: security warning</p><hr/><p>出于可读性和安全性的考量，格式化字符串最好直接写成常量字符串的形式。  </p><p>本规则是 ID_hijack 的特化。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* fmt = <span class="built_in">foo</span>();</span><br><span class="line">....</span><br><span class="line"><span class="built_in">printf</span>(fmt, a, b, c);  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中格式化字符串 fmt 是变量，这种方式可读性较差，而且要注意如果 fmt 可受外界影响，则可能被攻击者利用造成不良后果。  </p><p>应将 fmt 改为常量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;%d %d %d&quot;, a, b, c);  // Compliant</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-6"><a href="#相关-6" class="headerlink" title="相关"></a>相关</h4><p>ID_hijack<br><br/></p><h4 id="参考-13"><a href="#参考-13" class="headerlink" title="参考"></a>参考</h4><p>CWE-134<br><br/><br><br/></p><h3 id="▌R1-15-与内存空间布局相关的信息不可被外界感知"><a href="#▌R1-15-与内存空间布局相关的信息不可被外界感知" class="headerlink" title="▌R1.15 与内存空间布局相关的信息不可被外界感知"></a><span id="addressexposure">▌R1.15 与内存空间布局相关的信息不可被外界感知</span></h3><p>ID_addressExposure&emsp;&emsp;&emsp;&emsp;&nbsp;:shield: security warning</p><hr/><p>函数、对象、缓冲区的地址以及相关内存区域的长度等信息不可被外界感知，否则会成为攻击者的线索。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>* p, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= some_value) &#123;</span><br><span class="line">        <span class="built_in">log</span>(<span class="string">&quot;buffer address: %p, size: %d&quot;</span>, p, n);   <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码将缓冲区的地址和长度输出到日志是不安全的，这种代码多以调试为目的，不应将其编译到产品的正式版本中。<br><br/><br><br/></p><h4 id="相关-7"><a href="#相关-7" class="headerlink" title="相关"></a>相关</h4><p>ID_bufferOverflow<br><br/></p><h4 id="参考-14"><a href="#参考-14" class="headerlink" title="参考"></a>参考</h4><p>CWE-200<br><br/><br><br/></p><h3 id="▌R1-16-与网络地址相关的信息不应写入代码"><a href="#▌R1-16-与网络地址相关的信息不应写入代码" class="headerlink" title="▌R1.16 与网络地址相关的信息不应写入代码"></a><span id="hardcodedip">▌R1.16 与网络地址相关的信息不应写入代码</span></h3><p>ID_hardcodedIP&emsp;&emsp;&emsp;&emsp;&nbsp;:shield: security warning</p><hr/><p>在代码中记录网络地址不利于维护和移植，也容易暴露产品的网络结构，属于安全隐患。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string host = <span class="string">&quot;10.16.25.93&quot;</span>;    <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="built_in">foo</span>(<span class="string">&quot;172.16.10.36:8080&quot;</span>);       <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="built_in">bar</span>(<span class="string">&quot;https://192.168.73.90&quot;</span>);   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>应从配置文件中获取地址，并配以加密措施：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MyConf cfg;</span><br><span class="line">string host = cfg.host();   // Compliant</span><br><span class="line">foo(cfg.port());            // Compliant</span><br><span class="line">bar(cfg.url());             // Compliant</span><br></pre></td></tr></table></figure><p>特殊的 IP 地址可不受本规则限制，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0.0.0.0</span><br><span class="line">255.255.255.255</span><br><span class="line">127.0.0.1-127.255.255.255</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-8"><a href="#相关-8" class="headerlink" title="相关"></a>相关</h4><p>ID_addressExposure<br><br/><br><br/></p><h3 id="▌R1-17-选择安全的异常处理方式"><a href="#▌R1-17-选择安全的异常处理方式" class="headerlink" title="▌R1.17 选择安全的异常处理方式"></a><span id="deprecatederrno">▌R1.17 选择安全的异常处理方式</span></h3><p>ID_deprecatedErrno&emsp;&emsp;&emsp;&emsp;&nbsp;:shield: security warning</p><hr/><p>避免使用 errno 和与其相同的模式，应根据实际需求选择通过函数返回值或 C++ 异常机制来处理异常情况。  </p><p>errno 被设定的位置和被读取的位置相距较远，不遵循固定的静态结构，极易误用，是不安全的异常处理方式，对异常情况的错误处理往往会成为业务漏洞，使攻击者轻易地实现其目的。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">somecall</span>() == FAILED) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;somecall failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (errno == SOME_VALUE) &#123;     <span class="comment">// Non-compliant</span></span><br><span class="line">            .... </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 somecall 执行异常，通过 errno 获取异常信息，但 errno 的值会被 printf 修改，相应的异常处理也失去了意义。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void bar(const char* s) &#123;</span><br><span class="line">    int i = atoi(s);</span><br><span class="line">    if (errno) &#123;        // Non-compliant</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>errno 并不能反映所有异常情况，atoi 等函数与 errno 无关，例中 errno 的值来自函数外部难以预料的位置，相应的异常处理也将是错误的。<br><br/><br><br/></p><h4 id="参考-15"><a href="#参考-15" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines E.28<br>MISRA C 2004 20.5<br>MISRA C++ 2008 19-3-1<br><br/><br><br/></p><h3 id="▌R1-18-启用平台和编译器提供的防御机制"><a href="#▌R1-18-启用平台和编译器提供的防御机制" class="headerlink" title="▌R1.18 启用平台和编译器提供的防御机制"></a><span id="missinghardening">▌R1.18 启用平台和编译器提供的防御机制</span></h3><p>ID_missingHardening&emsp;&emsp;&emsp;&emsp;&nbsp;:shield: security suggestion</p><hr/><p>针对一些常见攻击，平台和编译器会提供防御机制，如：  </p><ul><li><a href="https://en.wikipedia.org/wiki/Executable_space_protection">数据执行保护（NX、DEP）</a>  </li><li><a href="https://en.wikipedia.org/wiki/Buffer_overflow_protection">栈溢出防护（CANARY、GS）</a>  </li><li><a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">地址空间布局随机化（ASLR、PIE）</a></li></ul><p>程序应利用这种机制加强自身的安全性，进一步可参见“<a href="https://en.wikipedia.org/wiki/Hardening_(computing)">security hardening</a>”。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In test.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, main);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在 Linux 等平台上按如下方式编译：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc test.c -o test</span><br></pre></td></tr></table></figure><p>各函数的地址在虚拟内存中是固定的，易被攻击者猜中，进而施展攻击手段。  </p><p>当平台启用了“<a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">ASLR</a>”机制，再按如下方式编译：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc test.c -o test -fPIE -pie</span><br></pre></td></tr></table></figure><p>可使程序各结构的地址随机化，函数的地址在每次运行时均不相同，有效提高了攻击难度。  </p><p>如无特殊原因，在编译程序时不应屏蔽这种防御机制，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cc test.c -o test -z execstack           # Non-compliant, disable NX</span><br><span class="line">cc test.c -o test -z norelro             # Non-compliant, disable RELRO</span><br><span class="line">cc test.c -o test -fno-stack-protector   # Non-compliant, disable CANARY</span><br></pre></td></tr></table></figure><p>如果必须屏蔽，应落实相关的评审与测试。<br><br/><br><br/><br><br/></p><h2 id="2-Resource"><a href="#2-Resource" class="headerlink" title="2. Resource"></a><span id="resource">2. Resource</span></h2><h3 id="▌R2-1-不可失去对已分配资源的控制"><a href="#▌R2-1-不可失去对已分配资源的控制" class="headerlink" title="▌R2.1 不可失去对已分配资源的控制"></a><span id="resourceleak">▌R2.1 不可失去对已分配资源的控制</span></h3><p>ID_resourceLeak&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource warning</p><hr/><p>对于动态分配的资源，其地址、句柄或描述符等标志性信息不可被遗失，否则资源无法被访问也无法被回收，这种问题称为“资源泄漏”，会导致资源耗尽或死锁等问题，使程序无法正常运行。  </p><p>在资源被回收之前，记录其标志性信息的变量如果：  </p><ul><li>均被重新赋值  </li><li>生命周期均已结束  </li><li>所在线程均被终止</li></ul><p>相关资源便失去了控制，无法再通过正常手段访问相关资源。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fd;</span><br><span class="line">fd = <span class="built_in">open</span>(<span class="string">&quot;a&quot;</span>, O_RDONLY);   <span class="comment">// Open a file descriptor</span></span><br><span class="line"><span class="built_in">read</span>(fd, buf1, <span class="number">100</span>);</span><br><span class="line">fd = <span class="built_in">open</span>(<span class="string">&quot;b&quot;</span>, O_RDONLY);   <span class="comment">// Non-compliant, the previous descriptor is lost</span></span><br><span class="line"><span class="built_in">read</span>(fd, buf2, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>例中变量 fd 记录文件资源描述符，在回收资源之前对其重新赋值会导致资源泄漏。<br><br/><br><br/></p><h4 id="相关-9"><a href="#相关-9" class="headerlink" title="相关"></a>相关</h4><p>ID_memoryLeak<br>ID_asynchronousTermination<br><br/></p><h4 id="参考-16"><a href="#参考-16" class="headerlink" title="参考"></a>参考</h4><p>CWE-772<br>C++ Core Guidelines P.8<br><br/><br><br/></p><h3 id="▌R2-2-不可失去对已分配内存的控制"><a href="#▌R2-2-不可失去对已分配内存的控制" class="headerlink" title="▌R2.2 不可失去对已分配内存的控制"></a><span id="memoryleak">▌R2.2 不可失去对已分配内存的控制</span></h3><p>ID_memoryLeak&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource warning</p><hr/><p>动态分配的内存地址不可被遗失，否则相关内存无法被访问也无法被回收，这种问题称为“<a href="https://en.wikipedia.org/wiki/Memory_leak">内存泄漏（memory leak）</a>”，会导致可用内存被耗尽，使程序无法正常运行。  </p><p>程序需要保证内存分配与回收之间的流程可达，且不可被异常中断，相关线程也不可在中途停止。  </p><p>本规则是 ID_resourceLeak 的特化。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">size_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">void</span>* p = <span class="built_in">malloc</span>(n);</span><br><span class="line">    <span class="keyword">if</span> (cond) &#123;</span><br><span class="line">        <span class="keyword">return</span>;  <span class="comment">// Non-compliant, ‘p’ is lost</span></span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中局部变量 p 记录已分配的内存地址，释放前在某种情况下函数返回，之后便再也无法访问到这块内存了，导致内存泄露。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void bar(size_t n) &#123;</span><br><span class="line">    void* p = malloc(n);</span><br><span class="line">    if (n &lt; 100) &#123;</span><br><span class="line">        p = realloc(p, 100);  // Non-compliant, the original value of ‘p’ is lost</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 realloc 函数分配失败会返回 NULL，p 未经释放而被重新赋值，导致内存泄露。<br><br/><br><br/></p><h4 id="相关-10"><a href="#相关-10" class="headerlink" title="相关"></a>相关</h4><p>ID_resourceLeak<br>ID_ownerlessResource<br>ID_throwInConstructor<br>ID_memberDeallocation<br>ID_multiAllocation<br><br/></p><h4 id="依据-5"><a href="#依据-5" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.20.3(1)<br>ISO&#x2F;IEC 9899:2011 7.22.3(1)<br>ISO&#x2F;IEC 14882:2003 3.7.3.1(2)<br>ISO&#x2F;IEC 14882:2003 3.7.4.1(2)<br><br/></p><h4 id="参考-17"><a href="#参考-17" class="headerlink" title="参考"></a>参考</h4><p>CWE-401<br>C++ Core Guidelines P.8<br>C++ Core Guidelines E.13<br><br/><br><br/></p><h3 id="▌R2-3-不可访问未初始化或已释放的资源"><a href="#▌R2-3-不可访问未初始化或已释放的资源" class="headerlink" title="▌R2.3 不可访问未初始化或已释放的资源"></a><span id="illaccess">▌R2.3 不可访问未初始化或已释放的资源</span></h3><p>ID_illAccess&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource error</p><hr/><p>访问未初始化或已释放的资源属于逻辑错误，会导致标准未定义的行为。  </p><p>对于解引用已被释放的指针，本规则特化为 ID_danglingDeref。<br>对于访问未初始化的局部对象，本规则特化为 ID_localInitialization。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, <span class="type">char</span> buf[], <span class="type">size_t</span> n)</span> </span>&#123;</span><br><span class="line">    FILE* f;</span><br><span class="line">    <span class="keyword">if</span> (path != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        f = <span class="built_in">fopen</span>(path, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fread</span>(buf, <span class="number">1</span>, n, f);       <span class="comment">// Non-compliant, ‘f’ may be invalid</span></span><br><span class="line">    <span class="built_in">fclose</span>(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(FILE* f, <span class="type">char</span> buf[], <span class="type">size_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">feof</span>(f)) &#123;</span><br><span class="line">        <span class="built_in">fclose</span>(f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fread</span>(buf, <span class="number">1</span>, n, f);       <span class="comment">// Non-compliant, ‘f’ may be closed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-11"><a href="#相关-11" class="headerlink" title="相关"></a>相关</h4><p>ID_danglingDeref<br>ID_localInitialization<br><br/></p><h4 id="依据-6"><a href="#依据-6" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.19.3(4)<br>ISO&#x2F;IEC 9899:2011 7.21.3(4)<br><br/></p><h4 id="参考-18"><a href="#参考-18" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT FIO46-C<br><br/><br><br/></p><h3 id="▌R2-4-资源应接受对象化管理"><a href="#▌R2-4-资源应接受对象化管理" class="headerlink" title="▌R2.4 资源应接受对象化管理"></a><span id="ownerlessresource">▌R2.4 资源应接受对象化管理</span></h3><p>ID_ownerlessResource&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource warning</p><hr/><p>使资源接受对象化管理，免去繁琐易错的手工分配回收过程，是 C++ 程序设计的重要方法。  </p><p>将资源分配的结果直接在程序中传递是非常不安全的，极易产生泄漏或死锁等问题。动态申请的资源如果只用普通变量引用，不受对象的构造或析构机制控制，则称为“无主”资源，在 C++ 程序设计中应当避免。  </p><p>应尽量使用标准库提供的容器或智能指针，避免显式使用资源管理接口。本规则集合示例中的 new&#x2F;delete、lock&#x2F;unlock 意在代指一般的资源操作，仅作示例，在实际代码中应尽量避免。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = <span class="keyword">new</span> <span class="type">int</span>[size];   <span class="comment">// Bad, ownerless</span></span><br><span class="line">    ....                      <span class="comment">// If any exception is thrown, or a wrong jump, leak</span></span><br><span class="line">    <span class="keyword">delete</span>[] p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">X</span> &#123;</span><br><span class="line">    <span class="type">int</span>* p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    X x;</span><br><span class="line">    x.p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">123</span>];   <span class="comment">// Bad, ‘X’ has no destructor, ‘x’ is not an owner</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Y</span> &#123;</span><br><span class="line">    <span class="type">int</span>* p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Y</span>(<span class="type">size_t</span> n): <span class="built_in">p</span>(<span class="keyword">new</span> <span class="type">int</span>[n]) &#123;&#125;</span><br><span class="line">   ~<span class="built_in">Y</span>() &#123; <span class="keyword">delete</span>[] p; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">baz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Y <span class="title">y</span><span class="params">(<span class="number">123</span>)</span></span>;   <span class="comment">// Good, ‘y’ is the owner of the resource</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 foo 和 bar 函数的资源管理方式是不符合 C++ 理念的，baz 函数中的 y 对象负责资源的分配与回收，称 y 对象具有资源的所有权，相关资源的生命周期与 y 的生命周期一致，有效避免了资源泄漏或错误回收等问题。  </p><p>资源的所有权可以发生转移，但应保证转移前后均有对象负责管理资源，并且在转移过程中不会产生异常。进一步理解对象化管理方法，可参见“<a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization">RAII（Resource Acquisition Is Initialization）</a>”等机制。  </p><p>与资源相关的系统接口不应直接被业务代码引用，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void foo(const TCHAR* path) &#123;</span><br><span class="line">    HANDLE h;</span><br><span class="line">    WIN32_FIND_DATA ffd;</span><br><span class="line"></span><br><span class="line">    h = FindFirstFile(path, &amp;ffd);  // Bad, ownerless</span><br><span class="line">    ....</span><br><span class="line">    CloseHandle(h);  // Is it right?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 Windows API FindFirstFile 返回资源句柄，是“无主”资源，很可能被后续代码误用或遗忘。  </p><p>应进行合理封装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class MY_FIND_DATA</span><br><span class="line">&#123;</span><br><span class="line">    struct HANDLE_DELETER</span><br><span class="line">    &#123;</span><br><span class="line">        using pointer = HANDLE;</span><br><span class="line">        void operator()(pointer p) &#123; FindClose(p); &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    WIN32_FIND_DATA ffd;</span><br><span class="line">    unique_ptr&lt;HANDLE, HANDLE_DELETER&gt; uptr;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    MY_FIND_DATA(const TCHAR* path): uptr(FindFirstFile(path, &amp;ffd)) &#123;&#125;</span><br><span class="line">    ....</span><br><span class="line">    HANDLE handle() &#123; return uptr.get(); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>本例将 FindFirstFile 及其相关数据封装成一个类，由 unique_ptr 对象保存 FindFirstFile 的结果，FindClose 是资源的回收方法，将其作为 unique_ptr 对象的组成部分，使资源可以被自动回收。<br><br/><br><br/></p><h4 id="参考-19"><a href="#参考-19" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines R.11<br>C++ Core Guidelines R.12<br><br/><br><br/></p><h3 id="▌R2-5-资源的分配与回收方法应成对提供"><a href="#▌R2-5-资源的分配与回收方法应成对提供" class="headerlink" title="▌R2.5 资源的分配与回收方法应成对提供"></a><span id="incompletenewdeletepair">▌R2.5 资源的分配与回收方法应成对提供</span></h3><p>ID_incompleteNewDeletePair&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource suggestion</p><hr/><p>资源的分配方法和相应的回收方法应在同一模块中提供。  </p><p>如果一个模块分配的资源需要另一个模块回收，会打破模块之间的独立性，增加维护成本，而且 so、dll、exe 等模块一般都有独立的堆栈，跨模块的分配与回收往往会造成严重错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In a.dll</span></span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">1024</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In b.dll</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = <span class="built_in">foo</span>();</span><br><span class="line">    ....</span><br><span class="line">    <span class="built_in">free</span>(p);   <span class="comment">// Non-compliant, crash</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 a.dll 分配的内存由 b.dll 释放，相当于混淆了不同堆栈中的数据，程序一般会崩溃。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In a.dll</span></span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">foo_alloc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">1024</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo_dealloc</span><span class="params">(<span class="type">int</span>* p)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In b.dll</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = <span class="built_in">foo_alloc</span>();</span><br><span class="line">    ....</span><br><span class="line">    <span class="built_in">foo_dealloc</span>(p);   <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修正后 a.dll 成对提供分配回收函数，b.dll 配套使用这些函数，避免了冲突。  </p><p>对类等逻辑模块也有相同要求，在构造函数中分配了资源，应提供相应的析构函数，重载了 new 运算符，也应重载相应的 delete 运算符。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    void* operator new(size_t);   // Non-compliant, missing ‘operator delete’</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class B &#123;</span><br><span class="line">    void operator delete(void*);   // Non-compliant, missing ‘operator new’</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class C &#123;</span><br><span class="line">    void* operator new(size_t);   // Compliant</span><br><span class="line">    void operator delete(void*);   // Compliant</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>placement-new 与 placement-delete 也应成对提供：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class D &#123;</span><br><span class="line">    void* operator new(size_t, bool);   // Non-compliant</span><br><span class="line"></span><br><span class="line">    void* operator new(size_t, int, int);   // Compliant</span><br><span class="line">    void operator delete(void*, int, int);   // Compliant</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-12"><a href="#相关-12" class="headerlink" title="相关"></a>相关</h4><p>ID_memberDeallocation<br>ID_crossModuleTransfer<br>ID_incompatibleDealloc<br><br/></p><h4 id="参考-20"><a href="#参考-20" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines R.15<br><br/><br><br/></p><h3 id="▌R2-6-资源的分配与回收方法应配套使用"><a href="#▌R2-6-资源的分配与回收方法应配套使用" class="headerlink" title="▌R2.6 资源的分配与回收方法应配套使用"></a><span id="incompatibledealloc">▌R2.6 资源的分配与回收方法应配套使用</span></h3><p>ID_incompatibleDealloc&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource error</p><hr/><p>使用了某种分配方法，就应使用与其配套的回收方法，否则会引发严重错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T* p = <span class="keyword">new</span> T;</span><br><span class="line">    ....</span><br><span class="line">    <span class="built_in">free</span>(p);   <span class="comment">// Non-compliant, use ‘delete’ instead</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(<span class="type">size_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span>* p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(n);</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">delete</span>[] p;   <span class="comment">// Non-compliant, use ‘free’ instead</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同的分配回收方法属于不同的资源管理体系，用 new 分配的资源应使用 delete 回收，malloc 分配的应使用 free 回收。<br><br/><br><br/></p><h4 id="相关-13"><a href="#相关-13" class="headerlink" title="相关"></a>相关</h4><p>ID_incompleteNewDeletePair<br><br/></p><h4 id="依据-7"><a href="#依据-7" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.20.3.2(2)-undefined<br>ISO&#x2F;IEC 9899:2011 7.22.3.3(2)-undefined<br>ISO&#x2F;IEC 14882:2003 3.7.3.2(3)<br>ISO&#x2F;IEC 14882:2011 3.7.4.2(3)-undefined<br><br/></p><h4 id="参考-21"><a href="#参考-21" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT MEM51-CPP<br><br/><br><br/></p><h3 id="▌R2-7-模块之间不应传递容器等对象"><a href="#▌R2-7-模块之间不应传递容器等对象" class="headerlink" title="▌R2.7 模块之间不应传递容器等对象"></a><span id="crossmoduletransfer">▌R2.7 模块之间不应传递容器等对象</span></h3><p>ID_crossModuleTransfer&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource warning</p><hr/><p>容器的容量可以动态变化，在模块间传递这种对象会造成分配回收方面的冲突。  </p><p>具有同等功能的对象，如流、字符串、智能指针等均不应在模块间传递。  </p><p>在模块间传递复杂的对象也意味着模块耦合过于紧密，不是良好的设计。如果必须在模块间传递对象，需将所有相关资源的分配与回收过程限定在同一模块内，是繁琐且不利于维护的。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In a.dll</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">    v.<span class="built_in">reserve</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In b.exe</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v &#123;  <span class="comment">// Allocation in b.exe</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">foo</span>(v);          <span class="comment">// Non-compliant, reallocation in a.dll, crash</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中容器 v 的初始内存由 b.exe 分配，b.exe 与 a.dll 有各自独立的堆栈，由于模板库的内联实现，reserve 函数会调用 a.dll 的内存管理函数重新分配 b.exe 中的内存，造成严重冲突。  </p><p>另外，不同的模块可能由不同的编译器生成，声明与实现的差异也会导致冲突，参见“<a href="https://en.wikipedia.org/wiki/DLL_Hell">Dll hell</a>”。<br><br/><br><br/></p><h4 id="相关-14"><a href="#相关-14" class="headerlink" title="相关"></a>相关</h4><p>ID_incompleteNewDeletePair<br><br/><br><br/></p><h3 id="▌R2-8-对象申请的资源应在析构函数中释放"><a href="#▌R2-8-对象申请的资源应在析构函数中释放" class="headerlink" title="▌R2.8 对象申请的资源应在析构函数中释放"></a><span id="memberdeallocation">▌R2.8 对象申请的资源应在析构函数中释放</span></h3><p>ID_memberDeallocation&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource warning</p><hr/><p>对象在析构函数中释放自己申请的资源是 C++ 程序设计的重要原则，不可被遗忘，也不应要求用户释放。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span>* p = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">size_t</span> n): <span class="built_in">p</span>(<span class="keyword">new</span> <span class="type">int</span>[n]) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   ~<span class="built_in">A</span>() &#123;  <span class="comment">// Non-compliant, must delete[] p</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中成员 p 与内存分配有关，但析构函数为空，不符合本规则要求。<br><br/><br><br/></p><h4 id="相关-15"><a href="#相关-15" class="headerlink" title="相关"></a>相关</h4><p>ID_memoryLeak<br>ID_resourceLeak<br><br/></p><h4 id="参考-22"><a href="#参考-22" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.31<br>C++ Core Guidelines E.6<br><br/><br><br/></p><h3 id="▌R2-9-对象被移动后应重置状态再使用"><a href="#▌R2-9-对象被移动后应重置状态再使用" class="headerlink" title="▌R2.9 对象被移动后应重置状态再使用"></a><span id="useaftermove">▌R2.9 对象被移动后应重置状态再使用</span></h3><p>ID_useAfterMove&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource warning</p><hr/><p>对象被移动后在逻辑上不再有效，如果没有通过清空数据或重新初始化等方法更新对象的状态，不应再使用该对象。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(string&amp; a, string&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = <span class="built_in">move</span>(b);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; a &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;   <span class="comment">// OK</span></span><br><span class="line">    cout &lt;&lt; b &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 b 对象的数据被转移到 a 对象后，b 对象不再有效，如果要继续使用 b，应清空其数据或对其重新赋值。<br><br/><br><br/></p><h4 id="相关-16"><a href="#相关-16" class="headerlink" title="相关"></a>相关</h4><p>ID_unsuitableMove<br><br/></p><h4 id="参考-23"><a href="#参考-23" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.56<br>SEI CERT EXP63-CPP<br><br/><br><br/></p><h3 id="▌R2-10-构造函数抛出异常需避免相关资源泄漏"><a href="#▌R2-10-构造函数抛出异常需避免相关资源泄漏" class="headerlink" title="▌R2.10 构造函数抛出异常需避免相关资源泄漏"></a><span id="throwinconstructor">▌R2.10 构造函数抛出异常需避免相关资源泄漏</span></h3><p>ID_throwInConstructor&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource warning</p><hr/><p>构造函数抛出异常表示对象构造失败，不会再执行相关析构函数，需要保证已分配的资源被有效回收。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> *a, *b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">size_t</span> n):</span><br><span class="line">        <span class="built_in">a</span>(<span class="keyword">new</span> <span class="type">int</span>[n]),</span><br><span class="line">        <span class="built_in">b</span>(<span class="keyword">new</span> <span class="type">int</span>[n])     <span class="comment">// The allocations may fail</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sth_wrong) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">E</span>();    <span class="comment">// User exceptions</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   ~<span class="built_in">A</span>() &#123;                 <span class="comment">// May be invalid</span></span><br><span class="line">        <span class="keyword">delete</span>[] a;</span><br><span class="line">        <span class="keyword">delete</span>[] b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中内存分配可能会失败，抛出 bad_alloc 异常，在某种条件下还会抛出自定义的异常，任何一种异常被抛出析构函数就不会被执行，已分配的资源就无法被回收，但已构造完毕的对象还是会正常析构的，所以应采用对象化资源管理方法，使资源可以被自动回收。  </p><p>可改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">A::A(size_t n) &#123;</span><br><span class="line">    // Use objects to hold resources</span><br><span class="line">    auto holder_a = make_unique&lt;int[]&gt;(n);</span><br><span class="line">    auto holder_b = make_unique&lt;int[]&gt;(n);</span><br><span class="line"></span><br><span class="line">    // Do the tasks that may throw exceptions</span><br><span class="line">    if (sth_wrong) &#123;</span><br><span class="line">        throw E();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Transfer ownership, make sure no exception is thrown</span><br><span class="line">    a = holder_a.release();</span><br><span class="line">    b = holder_b.release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先用 unique_ptr 对象持有资源，完成可能抛出异常的事务之后，再将资源转移给相关成员，转移的过程不可抛出异常，这种模式可以保证异常安全，如果有异常抛出，资源均可被正常回收。对遵循 C++11 及之后标准的代码，建议用 make_unique 函数代替 new 运算符。  </p><p>示例代码意在讨论一种通用模式，实际代码可采用更直接的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    vector&lt;int&gt; a, b;  // Or use ‘unique_ptr’</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    A(size_t n): a(n), b(n) &#123;  // Safe and brief</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>保证已分配的资源时刻有对象负责回收是重要的设计原则，可参见 ID_ownerlessResource 的进一步讨论。  </p><p>注意，“未成功初始化的对象”在 C++ 语言中是不存在的，应避免相关逻辑错误，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">struct T &#123;</span><br><span class="line">    A() &#123; throw CtorException(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void foo() &#123;</span><br><span class="line">    T* p = nullptr;</span><br><span class="line">    try &#123;</span><br><span class="line">        p = new T;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (CtorException&amp;) &#123;</span><br><span class="line">        delete p;              // Logic error, ‘p’ is nullptr</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">    delete p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 T 类型的对象在构造时抛出异常，而实际上 p 并不会指向一个未能成功初始化的对象，赋值被异常中断，catch  中的 p 仍然是一个空指针，new 表达式中抛出异常会自动回收已分配的内存。<br><br/><br><br/></p><h4 id="相关-17"><a href="#相关-17" class="headerlink" title="相关"></a>相关</h4><p>ID_ownerlessResource<br>ID_multiAllocation<br>ID_memoryLeak<br><br/></p><h4 id="依据-8"><a href="#依据-8" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 5.3.4(17)<br>ISO&#x2F;IEC 14882:2011 5.3.4(18)<br>ISO&#x2F;IEC 14882:2017 8.3.4(21)<br><br/><br><br/></p><h3 id="▌R2-11-资源不可被重复释放"><a href="#▌R2-11-资源不可被重复释放" class="headerlink" title="▌R2.11 资源不可被重复释放"></a><span id="doublefree">▌R2.11 资源不可被重复释放</span></h3><p>ID_doubleFree&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource error</p><hr/><p>重复释放资源属于逻辑错误，导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path)</span> </span>&#123;</span><br><span class="line">    FILE* p = <span class="built_in">fopen</span>(path, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (p) &#123;</span><br><span class="line">        ....</span><br><span class="line">        <span class="built_in">fclose</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fclose</span>(p);  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-9"><a href="#依据-9" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.20.3.2(2)-undefined<br>ISO&#x2F;IEC 9899:2011 7.22.3.3(2)-undefined<br>ISO&#x2F;IEC 14882:2003 3.7.3.2(4)-undefined<br>ISO&#x2F;IEC 14882:2011 3.7.4.2(4)-undefined<br><br/></p><h4 id="参考-24"><a href="#参考-24" class="headerlink" title="参考"></a>参考</h4><p>CWE-415<br><br/><br><br/></p><h3 id="▌R2-12-用-delete-释放对象需保证其类型完整"><a href="#▌R2-12-用-delete-释放对象需保证其类型完整" class="headerlink" title="▌R2.12 用 delete 释放对象需保证其类型完整"></a><span id="deleteincompletetype">▌R2.12 用 delete 释放对象需保证其类型完整</span></h3><p>ID_deleteIncompleteType&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource warning</p><hr/><p>如果用 delete 释放不完整类型的对象，而对象完整类型声明中有 non-trivial 析构函数，会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">T</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(T* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> p;       <span class="comment">// Non-compliant, undefined behavior</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">T</span> &#123;</span><br><span class="line">   ~<span class="built_in">T</span>();            <span class="comment">// Non-trivial destructor</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中 delete 作用于不完整类型的指针 p，析构函数不会正确执行，应保证 T 在 foo 之前定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct T &#123;</span><br><span class="line">   ~T();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void foo(T* p) &#123;</span><br><span class="line">    delete p;       // Compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-10"><a href="#依据-10" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 5.3.5(5)-undefined<br>ISO&#x2F;IEC 14882:2011 5.3.5(5)-undefined<br><br/><br><br/></p><h3 id="▌R2-13-用-delete-释放对象不可多写中括号"><a href="#▌R2-13-用-delete-释放对象不可多写中括号" class="headerlink" title="▌R2.13 用 delete 释放对象不可多写中括号"></a><span id="excessivedelete">▌R2.13 用 delete 释放对象不可多写中括号</span></h3><p>ID_excessiveDelete&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource error</p><hr/><p>用 new 分配的对象应该用 delete 释放，不可用 delete[] 释放，否则导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span>* p = <span class="keyword">new</span> X;  <span class="comment">// One object</span></span><br><span class="line">....</span><br><span class="line"><span class="keyword">delete</span>[] p;       <span class="comment">// Non-compliant, use ‘delete p;’ instead</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-18"><a href="#相关-18" class="headerlink" title="相关"></a>相关</h4><p>ID_insufficientDelete<br><br/></p><h4 id="依据-11"><a href="#依据-11" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 5.3.5(2)-undefined<br>ISO&#x2F;IEC 14882:2011 5.3.5(2)-undefined<br>ISO&#x2F;IEC 14882:2017 8.3.5(2)-undefined<br><br/></p><h4 id="参考-25"><a href="#参考-25" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.61<br><br/><br><br/></p><h3 id="▌R2-14-用-delete-释放数组不可漏写中括号"><a href="#▌R2-14-用-delete-释放数组不可漏写中括号" class="headerlink" title="▌R2.14 用 delete 释放数组不可漏写中括号"></a><span id="insufficientdelete">▌R2.14 用 delete 释放数组不可漏写中括号</span></h3><p>ID_insufficientDelete&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource error</p><hr/><p>用 new 分配的数组应该用 delete[] 释放，不可漏写中括号，否则导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span>* p = <span class="keyword">new</span> X[n];  <span class="comment">// n default-constructed X objects</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">delete</span> p;            <span class="comment">// Non-compliant, use ‘delete[] p;’ instead</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在某些环境中，可能只有第一个对象的析构函数被执行，其他对象的析构函数都没有被执行，如果对象与资源分配有关就会导致资源泄漏。<br><br/><br><br/></p><h4 id="相关-19"><a href="#相关-19" class="headerlink" title="相关"></a>相关</h4><p>ID_excessiveDelete<br><br/></p><h4 id="依据-12"><a href="#依据-12" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 5.3.5(2)-undefined<br>ISO&#x2F;IEC 14882:2011 5.3.5(2)-undefined<br>ISO&#x2F;IEC 14882:2017 8.3.5(2)-undefined<br><br/></p><h4 id="参考-26"><a href="#参考-26" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.61<br><br/><br><br/></p><h3 id="▌R2-15-非动态申请的资源不可被释放"><a href="#▌R2-15-非动态申请的资源不可被释放" class="headerlink" title="▌R2.15 非动态申请的资源不可被释放"></a><span id="illdealloc">▌R2.15 非动态申请的资源不可被释放</span></h3><p>ID_illDealloc&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource error</p><hr/><p>释放非动态申请的资源会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">size_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = (<span class="type">int</span>*)<span class="built_in">alloca</span>(n);</span><br><span class="line">    ....</span><br><span class="line">    <span class="built_in">free</span>(p);    <span class="comment">// Non-compliant, ‘p’ should not be freed</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    ....</span><br><span class="line">    <span class="built_in">free</span>(&amp;i);   <span class="comment">// Non-compliant, naughty behavior</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放在栈上分配的空间或者局部对象的地址会造成严重的运行时错误。<br><br/><br><br/></p><h4 id="依据-13"><a href="#依据-13" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.20.3.2(2)-undefined<br>ISO&#x2F;IEC 9899:2011 7.22.3.3(2)-undefined<br>ISO&#x2F;IEC 14882:2003 5.3.5(2)-undefined<br>ISO&#x2F;IEC 14882:2011 5.3.5(2)-undefined<br><br/></p><h4 id="参考-27"><a href="#参考-27" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 22.2<br><br/><br><br/></p><h3 id="▌R2-16-在一个表达式语句中最多使用一次-new"><a href="#▌R2-16-在一个表达式语句中最多使用一次-new" class="headerlink" title="▌R2.16 在一个表达式语句中最多使用一次 new"></a><span id="multiallocation">▌R2.16 在一个表达式语句中最多使用一次 new</span></h3><p>ID_multiAllocation&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource warning</p><hr/><p>如果表达式语句多次使用 new，一旦某个构造函数抛出异常就会造成内存泄漏。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fun</span>(</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;T&gt;(<span class="keyword">new</span> T),</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;T&gt;(<span class="keyword">new</span> T)   <span class="comment">// Non-compliant, potential memory leak</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>例中 fun 的两个参数均为 new 表达式，实际执行时可以先为两个对象分配内存，再分别执行对象的构造函数，如果某个构造函数抛出异常，已分配的内存就得不到回收了。  </p><p>保证一次内存分配对应一个构造函数可解决这种问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto a(shared_ptr&lt;T&gt;(new T));   // Compliant</span><br><span class="line">auto b(shared_ptr&lt;T&gt;(new T));   // Compliant</span><br><span class="line">fun(a, b);</span><br></pre></td></tr></table></figure><p>这样即使构造函数抛出异常也会自动回收已分配的内存。  </p><p>更好的方法是避免显式资源分配：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fun(</span><br><span class="line">    make_shared&lt;T&gt;(),</span><br><span class="line">    make_shared&lt;T&gt;()    // Compliant, safe and brief</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>用 make_shared、make_unique 等函数代替 new 运算符可有效规避这种问题。<br><br/><br><br/></p><h4 id="相关-20"><a href="#相关-20" class="headerlink" title="相关"></a>相关</h4><p>ID_memoryLeak<br><br/></p><h4 id="参考-28"><a href="#参考-28" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines R.13<br><br/><br><br/></p><h3 id="▌R2-17-流式资源对象不应被复制"><a href="#▌R2-17-流式资源对象不应被复制" class="headerlink" title="▌R2.17 流式资源对象不应被复制"></a><span id="copiedstream">▌R2.17 流式资源对象不应被复制</span></h3><p>ID_copiedStream&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource warning</p><hr/><p>FILE 等流式对象不应被复制，如果存在多个副本会造成数据不一致的问题。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FILE f;</span><br><span class="line">FILE* fp = <span class="built_in">fopen</span>(path, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">f = *fp;                      <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="built_in">memcpy</span>(fp, &amp;f, <span class="built_in">sizeof</span>(*fp));  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-14"><a href="#依据-14" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.19.3(6)<br>ISO&#x2F;IEC 9899:2011 7.21.3(6)<br><br/></p><h4 id="参考-29"><a href="#参考-29" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 22.5<br><br/><br><br/></p><h3 id="▌R2-18-避免使用在栈上分配内存的函数"><a href="#▌R2-18-避免使用在栈上分配内存的函数" class="headerlink" title="▌R2.18 避免使用在栈上分配内存的函数"></a><span id="stackallocation">▌R2.18 避免使用在栈上分配内存的函数</span></h3><p>ID_stackAllocation&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource warning</p><hr/><p>alloca、__builtin_alloca 等在栈上分配内存的函数难以控制失败时的情况，尤其在循环中更不应使用这种函数。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = (<span class="type">int</span>*)<span class="built_in">alloca</span>(size);  <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">        <span class="keyword">return</span>;  <span class="comment">// Invalid</span></span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 alloca 函数在失败时会直接崩溃，不会返回空指针，对其返回值的检查是无效的，这种后果不可控的函数应避免使用。<br><br/><br><br/></p><h4 id="相关-21"><a href="#相关-21" class="headerlink" title="相关"></a>相关</h4><p>ID_invalidNullCheck<br><br/></p><h4 id="参考-30"><a href="#参考-30" class="headerlink" title="参考"></a>参考</h4><p>CWE-770<br>SEI CERT MEM05-C<br><br/><br><br/></p><h3 id="▌R2-19-避免不必要的内存分配"><a href="#▌R2-19-避免不必要的内存分配" class="headerlink" title="▌R2.19 避免不必要的内存分配"></a><span id="unnecessaryallocation">▌R2.19 避免不必要的内存分配</span></h3><p>ID_unnecessaryAllocation&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource warning</p><hr/><p>对单独的基本变量或只包含少量基本变量的对象不应使用动态内存分配。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span>* pb = <span class="keyword">new</span> <span class="type">bool</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="type">char</span>* pc = <span class="keyword">new</span> <span class="type">char</span>;   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>内存分配的开销远大于变量的直接使用，而且还涉及到回收问题，是得不偿失的。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> b = <span class="literal">false</span>;   <span class="comment">// Compliant</span></span><br><span class="line"><span class="type">char</span> c = <span class="number">0</span>;       <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><p>用 new 分配数组时方括号被误写成小括号，或使用 unique_ptr 等智能指针时遗漏了数组括号也是常见笔误，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int* pi = new int(32);            // Non-compliant</span><br><span class="line">auto ui = make_unique&lt;int&gt;(32);   // Non-compliant</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* pi = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">32</span>];              <span class="comment">// Compliant</span></span><br><span class="line"><span class="keyword">auto</span> ui = <span class="built_in">make_unique</span>&lt;<span class="type">int</span>[]&gt;(<span class="number">32</span>);   <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><p>有时可能需要区分变量是否存在，用空指针表示不存在，并通过资源分配创建变量的方式属于低效实现，不妨改用变量的特殊值表示变量的状态，在 C++ 代码中也可使用 std::optional 实现相关功能。<br><br/><br><br/></p><h4 id="相关-22"><a href="#相关-22" class="headerlink" title="相关"></a>相关</h4><p>ID_dynamicAllocation<br><br/><br><br/></p><h3 id="▌R2-20-避免动态内存分配"><a href="#▌R2-20-避免动态内存分配" class="headerlink" title="▌R2.20 避免动态内存分配"></a><span id="dynamicallocation">▌R2.20 避免动态内存分配</span></h3><p>ID_dynamicAllocation&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource warning</p><hr/><p>标准库提供的动态内存分配方法，其算法或策略不在使用者的控制之内，很多细节是标准没有规定的，而且也是内存耗尽等问题的根源，有高可靠性要求的嵌入式系统应避免动态内存分配。  </p><p>在内存资源有限的环境中，由于难以控制具体的分配策略，很可能会导致已分配的空间用不上，未分配的空间不够用的情况。而在资源充足的环境中，也应尽量避免动态分配，如果能在栈上创建对象，就不应采用动态分配的方式，以提高效率并降低资源管理的复杂性。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; v;   <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 vector 容器使用了动态内存分配方法，容量的增长策略可能会导致内存空间的浪费，甚至使程序难以稳定运行。<br><br/><br><br/></p><h4 id="依据-15"><a href="#依据-15" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.20.3<br>ISO&#x2F;IEC 9899:2011 7.22.3<br><br/></p><h4 id="参考-31"><a href="#参考-31" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines R.5<br>MISRA C 2004 20.4<br>MISRA C 2012 21.3<br>MISRA C++ 2008 18-4-1<br><br/><br><br/></p><h3 id="▌R2-21-判断资源分配函数的返回值是否有效"><a href="#▌R2-21-判断资源分配函数的返回值是否有效" class="headerlink" title="▌R2.21 判断资源分配函数的返回值是否有效"></a><span id="nullderefallocret">▌R2.21 判断资源分配函数的返回值是否有效</span></h3><p>ID_nullDerefAllocRet&emsp;&emsp;&emsp;&emsp;&nbsp;:drop_of_blood: resource warning</p><hr/><p>malloc 等函数在分配失败时返回空指针，如果不加判断直接使用会导致标准未定义的行为。  </p><p>在有虚拟内存支持的平台中，正常的内存分配一般不会失败，但申请内存过多或有误时（如参数为负数）也会导致分配失败，而对于没有虚拟内存支持的或可用内存有限的嵌入式系统，检查分配资源是否成功是十分重要的，所以本规则应该作为代码编写的一般性要求。  </p><p>库的实现更需要注意这一点，如果库在分配失败时直接崩溃或不加说明地结束进程，相当于干扰了主程序的决策权，很可能会造成难以排查的问题，对于有高可靠性要求的软件，在极端环境中的行为是需要明确设定的。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">size_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span>* p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(n);</span><br><span class="line">    p[n - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;              <span class="comment">// Non-compliant, check ‘p’ first</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码未检查 p 的有效性便直接使用是不符合要求的。<br><br/><br><br/></p><h4 id="依据-16"><a href="#依据-16" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.20.3(1)<br>ISO&#x2F;IEC 9899:2011 7.22.3(1)<br><br/></p><h4 id="参考-32"><a href="#参考-32" class="headerlink" title="参考"></a>参考</h4><p>CWE-252<br>CWE-476<br><br/><br><br/></p><h3 id="▌R2-22-C-代码中禁用-C-内存管理函数"><a href="#▌R2-22-C-代码中禁用-C-内存管理函数" class="headerlink" title="▌R2.22 C++ 代码中禁用 C 内存管理函数"></a><span id="forbidmallocandfree">▌R2.22 C++ 代码中禁用 C 内存管理函数</span></h3><p>ID_forbidMallocAndFree&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: resource warning</p><hr/><p>在 C++ 代码中不应使用 malloc、free 等 C 内存管理函数，应使用 C++ 内存管理方法。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">size_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(n * <span class="built_in">sizeof</span>(<span class="type">int</span>));  <span class="comment">// Unsafe and verbose</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">size_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> p = <span class="built_in">make_unique</span>&lt;<span class="type">int</span>[]&gt;(n);  <span class="comment">// Safe and brief</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-23"><a href="#相关-23" class="headerlink" title="相关"></a>相关</h4><p>ID_ownerlessResource<br><br/></p><h4 id="参考-33"><a href="#参考-33" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines R.10<br><br/><br><br/></p><h2 id="3-Precompile"><a href="#3-Precompile" class="headerlink" title="3. Precompile"></a><span id="precompile">3. Precompile</span></h2><h3 id="3-1-Include"><a href="#3-1-Include" class="headerlink" title="3.1 Include"></a><span id="precompile.include">3.1 Include</span></h3><h3 id="▌R3-1-1-include-指令应符合标准格式"><a href="#▌R3-1-1-include-指令应符合标准格式" class="headerlink" title="▌R3.1.1 include 指令应符合标准格式"></a><span id="illformedinclude">▌R3.1.1 include 指令应符合标准格式</span></h3><p>ID_illFormedInclude&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: precompile error</p><hr/><p>#include 后只应为 &lt; 头文件路径 &gt; 或 “ 头文件路径 “，否则会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span>         <span class="comment">// Compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span>         <span class="comment">// Compliant </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEADER <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> HEADER             <span class="comment">// Compliant</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> stdlib.h           <span class="comment">// Non-compliant, undefined behavior</span></span></span><br></pre></td></tr></table></figure><p>例中对 string.h 的引用符合标准，而对 stdlib.h 的引用会导致标准未定义的行为。  </p><p>注意，由引号标识的头文件路径并非字符串常量，不应对其使用字符串常量的特性，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdlib&quot; &quot;.h&quot;      // Non-compliant, implementation defined</span><br></pre></td></tr></table></figure><p>是否会将引号中的内容连接成一个路径是由实现定义的，这种代码是不可移植的。  </p><p>另外，如下形式的代码也是不符合标准的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#include L&quot;foo&quot;             // Non-compliant</span><br><span class="line">#include u&quot;bar&quot;             // Non-compliant</span><br><span class="line">#include U&quot;baz&quot;             // Non-compliant</span><br><span class="line">#include R&quot;(..\foo\bar)&quot;    // Non-compliant</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-24"><a href="#相关-24" class="headerlink" title="相关"></a>相关</h4><p>ID_nonStandardCharInHeaderName<br><br/></p><h4 id="依据-17"><a href="#依据-17" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.10.2<br>ISO&#x2F;IEC 9899:2011 6.10.2<br>ISO&#x2F;IEC 14882:2003 2.8<br>ISO&#x2F;IEC 14882:2003 16.2(4)-undefined<br>ISO&#x2F;IEC 14882:2003 16.2(4)-implementation<br>ISO&#x2F;IEC 14882:2011 2.9<br>ISO&#x2F;IEC 14882:2011 16.2(4)-undefined<br>ISO&#x2F;IEC 14882:2011 16.2(4)-implementation<br><br/></p><h4 id="参考-34"><a href="#参考-34" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 19.3<br>MISRA C 2012 20.3<br>MISRA C++ 2008 16-2-6<br><br/><br><br/></p><h3 id="▌R3-1-2-include-指令中禁用不合规的字符"><a href="#▌R3-1-2-include-指令中禁用不合规的字符" class="headerlink" title="▌R3.1.2 include 指令中禁用不合规的字符"></a><span id="nonstandardcharinheadername">▌R3.1.2 include 指令中禁用不合规的字符</span></h3><p>ID_nonStandardCharInHeaderName&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: precompile warning</p><hr/><p>字母、数字、下划线、点号之外的字符可能与文件系统存在冲突，也可能导致标准未定义的行为，不应出现在头文件和相关目录名称中。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;&quot;foo&quot;&gt;</span>        <span class="comment">// Non-compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;foo*&gt;</span>         <span class="comment">// Non-compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;foo&#x27;bar&gt;</span>      <span class="comment">// Non-compliant</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;foo&gt;</span>          <span class="comment">// Compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;foo.h&gt;</span>        <span class="comment">// Compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;foo_bar&gt;</span>      <span class="comment">// Compliant</span></span></span><br></pre></td></tr></table></figure><p>可以用 &#x2F; 作为路径分隔符，但不应出现  &#x2F;&#x2F; 或 &#x2F;*，  如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;foo//bar.h&gt;   // Non-Compliant, undefined behavior</span><br><span class="line">#include &lt;foo/*bar.h&gt;   // Non-Compliant, undefined behavior</span><br></pre></td></tr></table></figure><p>另外，由于某些平台的文件系统不区分路径大小写，建议头文件名称只使用小写字母以减少移植类问题。<br><br/><br><br/></p><h4 id="依据-18"><a href="#依据-18" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.4.7(3)-undefined<br>ISO&#x2F;IEC 9899:2011 6.4.7(3)-undefined<br>ISO&#x2F;IEC 14882:2003 2.8(2)-undefined<br>ISO&#x2F;IEC 14882:2011 2.9(2)-implementation<br><br/></p><h4 id="参考-35"><a href="#参考-35" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 19.2<br>MISRA C 2012 20.2<br>MISRA C++ 2008 16-2-4<br><br/><br><br/></p><h3 id="▌R3-1-3-include-指令中不应使用反斜杠"><a href="#▌R3-1-3-include-指令中不应使用反斜杠" class="headerlink" title="▌R3.1.3 include 指令中不应使用反斜杠"></a><span id="forbidbackslashinheadername">▌R3.1.3 include 指令中不应使用反斜杠</span></h3><p>ID_forbidBackslashInHeaderName&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: precompile warning</p><hr/><p>如果在 include 指令中使用反斜杠，程序的行为在 C 和 C++03 标准中是未定义的，在 C++11 标准中是由实现定义的。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;foo\bar.h&gt;</span>     <span class="comment">// Non-compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;foo\\bar.h&quot;</span>    <span class="comment">// Non-compliant</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;foo/bar.h&gt;</span>     <span class="comment">// Compliant</span></span></span><br></pre></td></tr></table></figure><p>在有可移植性要求的代码中应避免使用反斜杠。<br><br/><br><br/></p><h4 id="依据-19"><a href="#依据-19" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.4.7(3)-undefined<br>ISO&#x2F;IEC 9899:2011 6.4.7(3)-undefined<br>ISO&#x2F;IEC 14882:2003 2.8(2)-undefined<br>ISO&#x2F;IEC 14882:2011 2.9(2)-implementation<br><br/></p><h4 id="参考-36"><a href="#参考-36" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 16-2-5<br><br/><br><br/></p><h3 id="▌R3-1-4-include-指令中不应使用绝对路径"><a href="#▌R3-1-4-include-指令中不应使用绝对路径" class="headerlink" title="▌R3.1.4 include 指令中不应使用绝对路径"></a><span id="forbidabspathinheadername">▌R3.1.4 include 指令中不应使用绝对路径</span></h3><p>ID_forbidAbsPathInHeaderName&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: precompile warning</p><hr/><p>绝对路径使代码过分依赖编译环境，意味着项目的编译设置不完善，应使用相对路径。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;C:\\foo\\bar.h&quot;</span>   <span class="comment">// Non-compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;/foo/bar.h&quot;</span>       <span class="comment">// Non-compliant</span></span></span><br></pre></td></tr></table></figure><br/><br/><br/><h3 id="▌R3-1-5-禁用不合规的头文件"><a href="#▌R3-1-5-禁用不合规的头文件" class="headerlink" title="▌R3.1.5 禁用不合规的头文件"></a><span id="forbiddenheader">▌R3.1.5 禁用不合规的头文件</span></h3><p>ID_forbiddenHeader&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: precompile warning</p><hr/><p>已过时的、无意义的或有不良副作用的头文件应禁用。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tgmath.h&gt;</span>   <span class="comment">// Non-compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;setjmp.h&gt;</span>   <span class="comment">// Non-compliant</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iso646.h&gt;</span>   <span class="comment">// Non-compliant in C++</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span>  <span class="comment">// Non-compliant in C++</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ciso646&gt;</span>    <span class="comment">// Non-compliant in C++</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdbool&gt;</span>   <span class="comment">// Non-compliant in C++</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctgmath&gt;</span>    <span class="comment">// Non-compliant in C++</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ccomplex&gt;</span>   <span class="comment">// Non-compliant in C++</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdalign&gt;</span>  <span class="comment">// Non-compliant in C++</span></span></span><br></pre></td></tr></table></figure><p>tgmath.h 和 ctgmath 会使用语言标准之外的技术实现某种重载效果，而且其中的部分函数名称会干扰其他标准库中的名称，setjmp.h 和 csetjmp 则包含危险的过程间跳转函数。  </p><p>iso646.h、stdalign.h、stdbool.h 以及 ciso646、cstdalign、cstdbool 对 C++ 语言没有意义，ccomplex、cstdalign、cstdbool、ctgmath 等在 C++17 标准中已声明为过时，在 C++ 代码中不应使用这类头文件。  </p><p>stdio.h、signal.h、time.h、fenv.h 等头文件含有较多标准未声明或由实现定义的内容，对有高可靠性要求的软件系统也不建议使用。  </p><p>审计工具不妨通过配置设定不合规头文件的名称，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ID_forbiddenHeader]</span><br><span class="line">inC=tgmath.h|setjmp.h</span><br><span class="line">inCpp=tgmath.h|ctgmath|setjmp.h|csetjmp</span><br></pre></td></tr></table></figure><p>表示对 C 代码将 tgmath.h、setjmp.h 设为不合规，对 C++ 代码将 tgmath.h、ctgmath、setjmp.h、csetjmp 设为不合规。<br><br/><br><br/></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>inC：C 代码中不合规头文件名称<br>inCpp：C++ 代码中不合规头文件名称<br><br/></p><h4 id="依据-20"><a href="#依据-20" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2017 C.5.1(4)<br>ISO&#x2F;IEC 14882:2017 D.4(1)-deprecated<br><br/></p><h4 id="参考-37"><a href="#参考-37" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 21.4<br>MISRA C 2012 21.5<br>MISRA C 2012 21.10<br>MISRA C 2012 21.11<br>MISRA C 2012 21.12<br>MISRA C++ 2008 18-0-4<br>MISRA C++ 2008 18-7-1<br>MISRA C++ 2008 27-0-1<br><br/><br><br/></p><h3 id="▌R3-1-6-C-代码不应引用-C-头文件"><a href="#▌R3-1-6-C-代码不应引用-C-头文件" class="headerlink" title="▌R3.1.6 C++ 代码不应引用 C 头文件"></a><span id="forbidcheaderincpp">▌R3.1.6 C++ 代码不应引用 C 头文件</span></h3><p>ID_forbidCHeaderInCpp&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: precompile warning</p><hr/><p>为了与 C 语言兼容，C++ 标准库也会提供 C 头文件，但在这种 C 头文件在 C++ 标准中是已过时的。  </p><p>C 标准头文件均有对应的 C++ 版本，C++ 版本提供了更适合 C++ 代码的命名空间、模板以及函数重载等功能。C 标准不在 C++ 标准之内，在 C++ 代码中不建议使用 C 标准库的功能，如果确有必要，应使用 C++ 版本的头文件。  </p><p>本规则是 ID_forbiddenHeader 的特化。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span>    <span class="comment">// Non-compliant, use &lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span>     <span class="comment">// Non-compliant, use &lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span>     <span class="comment">// Non-compliant, use &lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;float.h&gt;</span>     <span class="comment">// Non-compliant, use &lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span>    <span class="comment">// Non-compliant, use &lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale.h&gt;</span>    <span class="comment">// Non-compliant, use &lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span>      <span class="comment">// Non-compliant, use &lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;setjmp.h&gt;</span>    <span class="comment">// Non-compliant, use &lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span>    <span class="comment">// Non-compliant, use &lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span>    <span class="comment">// Non-compliant, use &lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span>    <span class="comment">// Non-compliant, use &lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>     <span class="comment">// Non-compliant, use &lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>    <span class="comment">// Non-compliant, use &lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span>    <span class="comment">// Non-compliant, use &lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>      <span class="comment">// Non-compliant, use &lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wchar.h&gt;</span>     <span class="comment">// Non-compliant, use &lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wctype.h&gt;</span>    <span class="comment">// Non-compliant, use &lt;cwctype&gt;</span></span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-25"><a href="#相关-25" class="headerlink" title="相关"></a>相关</h4><p>ID_forbiddenHeader<br><br/></p><h4 id="依据-21"><a href="#依据-21" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:1998 D.5-deprecated<br>ISO&#x2F;IEC 14882:2003 D.5-deprecated<br>ISO&#x2F;IEC 14882:2011 D.5-deprecated<br>ISO&#x2F;IEC 14882:2017 D.5-deprecated<br><br/></p><h4 id="参考-38"><a href="#参考-38" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 18-0-1<br><br/><br><br/></p><h3 id="3-2-Macro-definition"><a href="#3-2-Macro-definition" class="headerlink" title="3.2 Macro-definition"></a><span id="precompile.macro-definition">3.2 Macro-definition</span></h3><h3 id="▌R3-2-1-宏应遵循合理的命名方式"><a href="#▌R3-2-1-宏应遵循合理的命名方式" class="headerlink" title="▌R3.2.1 宏应遵循合理的命名方式"></a><span id="macro_badname">▌R3.2.1 宏应遵循合理的命名方式</span></h3><p>ID_macro_badName&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: precompile suggestion</p><hr/><p>宏的名称应采用全大写字母的形式，非宏名称则应包含小写字母。  </p><p>宏用于文本处理，不受语言规则限制，易被误用，在命名方式上将其与普通代码分开可引起使用者或维护者的注意，有助于规避错误。  </p><p>本规则是 ID_badName 的特化，宏名称同样受 ID_badName 的约束。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> word_size 8   <span class="comment">// Non-compliant, like a normal variable</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WORD_SIZE 8   <span class="comment">// Compliant</span></span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-26"><a href="#相关-26" class="headerlink" title="相关"></a>相关</h4><p>ID_badName<br><br/></p><h4 id="参考-39"><a href="#参考-39" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.32<br>C++ Core Guidelines ES.9<br><br/><br><br/></p><h3 id="▌R3-2-2-不可定义具有保留意义的宏名称"><a href="#▌R3-2-2-不可定义具有保留意义的宏名称" class="headerlink" title="▌R3.2.2 不可定义具有保留意义的宏名称"></a><span id="macro_definereserved">▌R3.2.2 不可定义具有保留意义的宏名称</span></h3><p>ID_macro_defineReserved&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: precompile warning</p><hr/><p>重新定义已有特殊用途的名称会导致标准未定义的行为，也会使代码陷入难以维护的境地。  </p><p>标准库、编译环境中的名称以及关键字不应重新定义。  </p><p>C++ 标准指明不可重新定义的宏有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__cplusplus、__TIME__、__DATE__、__FILE__、__ LINE__、</span><br><span class="line">__STDC__、__STDC_HOSTED__、__STDCPP_THREADS__、</span><br><span class="line">__STDC_MB_MIGHT_NEQ_WC__、__STDC_VERSION__、</span><br><span class="line">__STDC_ISO_10646__、__STDCPP_STRICT_POINTER_SAFETY__</span><br></pre></td></tr></table></figure><p>以下划线开头的名称用于表示标准库或编译环境的保留名称，自定义名称不应以下划线开头。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _WIN64   0      <span class="comment">// Non-compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __GNUC__ 1      <span class="comment">// Non-compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __STDC__ 1      <span class="comment">// Non-compliant, undefined behavior</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __cplusplus 0   <span class="comment">// Non-compliant, undefined behavior</span></span></span><br></pre></td></tr></table></figure><p>标识平台或编译环境的宏不可在代码中写死。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define defined            // Non-compliant, undefined behavior</span><br><span class="line">#define new new(nothrow)   // Non-compliant</span><br></pre></td></tr></table></figure><p>不可重定义关键字。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define NDEBUG 0    // Non-compliant</span><br><span class="line">#define errno 0     // Non-compliant</span><br><span class="line">#define assert(x)   // Non-compliant</span><br></pre></td></tr></table></figure><p>编译优化相关的宏不可在代码中写死，标准库中的名称不应被重新定义。<br><br/><br><br/></p><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>keywordAsReserved：是否将关键字作为保留名称<br>stdNameAsReserved：是否将标准库中的名称作为保留名称<br>underscoreAsReserved：是否将下划线开头的名称作为保留名称<br>reservedNames：用户指定的保留名称<br><br/></p><h4 id="相关-27"><a href="#相关-27" class="headerlink" title="相关"></a>相关</h4><p>ID_macro_undefReserved<br>ID_reservedName<br><br/></p><h4 id="依据-22"><a href="#依据-22" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.1.3(2)-undefined<br>ISO&#x2F;IEC 9899:2011 7.1.3(2)-undefined<br>ISO&#x2F;IEC 14882:2003 16.8(3)-undefined<br>ISO&#x2F;IEC 14882:2011 16.8(4)-undefined<br><br/></p><h4 id="参考-40"><a href="#参考-40" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 20.4<br>MISRA C 2012 21.1<br>MISRA C++ 2008 17-0-1<br><br/><br><br/></p><h3 id="▌R3-2-3-不可取消定义具有保留意义的宏名称"><a href="#▌R3-2-3-不可取消定义具有保留意义的宏名称" class="headerlink" title="▌R3.2.3 不可取消定义具有保留意义的宏名称"></a><span id="macro_undefreserved">▌R3.2.3 不可取消定义具有保留意义的宏名称</span></h3><p>ID_macro_undefReserved&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: precompile warning</p><hr/><p>取消定义已有特殊用途的宏会导致标准未定义的行为，也会使代码陷入难以维护的境地。  </p><p>标准库、编译环境中的宏不可被取消定义。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">undef</span> __LINE__      <span class="comment">// Non-compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> __cplusplus   <span class="comment">// Non-compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _WIN64        <span class="comment">// Non-compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> NDEBUG        <span class="comment">// Non-compliant</span></span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><p>keywordAsReserved：是否将关键字作为保留名称<br>stdNameAsReserved：是否将标准库中的名称作为保留名称<br>underscoreAsReserved：是否将下划线开头的名称作为保留名称<br>reservedNames：用户指定的保留名称<br><br/></p><h4 id="相关-28"><a href="#相关-28" class="headerlink" title="相关"></a>相关</h4><p>ID_macro_defineReserved<br>ID_reservedName<br><br/></p><h4 id="依据-23"><a href="#依据-23" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.1.3(3)-undefined<br>ISO&#x2F;IEC 9899:2011 7.1.3(3)-undefined<br>ISO&#x2F;IEC 14882:2003 16.8(3)-undefined<br>ISO&#x2F;IEC 14882:2011 16.8(4)-undefined<br><br/></p><h4 id="参考-41"><a href="#参考-41" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 21.1<br>MISRA C++ 2008 17-0-1<br><br/><br><br/></p><h3 id="▌R3-2-4-可作为子表达式的宏定义应该用括号括起来"><a href="#▌R3-2-4-可作为子表达式的宏定义应该用括号括起来" class="headerlink" title="▌R3.2.4 可作为子表达式的宏定义应该用括号括起来"></a><span id="macro_expnotenclosed">▌R3.2.4 可作为子表达式的宏定义应该用括号括起来</span></h3><p>ID_macro_expNotEnclosed&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: precompile warning</p><hr/><p>由于宏只做文本处理，不考虑运算符优先级等问题，可作为子表达式的宏定义应该用括号括起来，否则易产生意料之外的错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ABS(x) (x) &lt; 0? -(x): (x)  <span class="comment">// Non-compliant</span></span></span><br></pre></td></tr></table></figure><p>设 a 为变量，如果按如下使用方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = ABS(a) + 1;</span><br></pre></td></tr></table></figure><p>则相当于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = (a) &lt; 0? -(a): (a) + 1;</span><br></pre></td></tr></table></figure><p>这显然会造成意料之外的结果，所以 ABS 的定义应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ABS(x) ((x) &lt; 0? -(x): (x))  <span class="comment">// Compliant</span></span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-24"><a href="#依据-24" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.10.3.5(4)<br>ISO&#x2F;IEC 9899:2011 6.10.3.5(4)<br><br/></p><h4 id="参考-42"><a href="#参考-42" class="headerlink" title="参考"></a>参考</h4><p>CWE-783<br>MISRA C 2004 19.10<br>MISRA C 2012 20.7<br><br/><br><br/></p><h3 id="▌R3-2-5-表达式中的宏参数应该用括号括起来"><a href="#▌R3-2-5-表达式中的宏参数应该用括号括起来" class="headerlink" title="▌R3.2.5 表达式中的宏参数应该用括号括起来"></a><span id="macro_paramnotenclosed">▌R3.2.5 表达式中的宏参数应该用括号括起来</span></h3><p>ID_macro_paramNotEnclosed&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: precompile warning</p><hr/><p>由于宏只做文本处理，不考虑运算符优先级等问题，故应将宏参数用括号括起来，否则易产生意料之外的错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SUM(a, b) (a + b)  <span class="comment">// Non-compliant</span></span></span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SUM(a, b) ((a) + (b))  <span class="comment">// Compliant</span></span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-25"><a href="#依据-25" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.10.3.5(4)<br>ISO&#x2F;IEC 9899:2011 6.10.3.5(4)<br><br/></p><h4 id="参考-43"><a href="#参考-43" class="headerlink" title="参考"></a>参考</h4><p>CWE-783<br>MISRA C++ 2008 16-0-6<br><br/><br><br/></p><h3 id="▌R3-2-6-由多个语句组成的宏定义应该用-do-while-0-括起来"><a href="#▌R3-2-6-由多个语句组成的宏定义应该用-do-while-0-括起来" class="headerlink" title="▌R3.2.6 由多个语句组成的宏定义应该用 do-while(0) 括起来"></a><span id="macro_stmtnotenclosed">▌R3.2.6 由多个语句组成的宏定义应该用 do-while(0) 括起来</span></h3><p>ID_macro_stmtNotEnclosed&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: precompile warning</p><hr/><p>可以作为一条语句使用的宏，且宏包含多个并列子句时，应该用“do {”和“} while(0)”括起来，否则易造成作用域的混乱。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SWAP(a, b)\</span></span><br><span class="line"><span class="meta">    a ^= b; b ^= a; a ^= b   <span class="comment">// Non-compliant</span></span></span><br></pre></td></tr></table></figure><p>如果按如下使用方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (x &gt; y)</span><br><span class="line">    SWAP(x, y);</span><br></pre></td></tr></table></figure><p>展开后 b ^&#x3D; a; a ^&#x3D; b; 不在 if 语句的范围内，应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SWAP(a, b) &#123;\          <span class="comment">// Compliant</span></span></span><br><span class="line">    a ^= b; b ^= a; a ^= b;\</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更进一步地，建议使用 do-while(0) 结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define SWAP(a, b) do &#123;\       // Good</span><br><span class="line">    a ^= b; b ^= a; a ^= b;\</span><br><span class="line">&#125; while(0)</span><br></pre></td></tr></table></figure><p>这样在使用宏时必须以分号结尾，否则无法通过编译，使宏在使用风格上与函数相同，易于阅读。<br><br/><br><br/></p><h4 id="相关-29"><a href="#相关-29" class="headerlink" title="相关"></a>相关</h4><p>ID_if_scope<br>ID_while_scope<br>ID_for_scope<br><br/></p><h4 id="依据-26"><a href="#依据-26" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.10.3.5(4)<br>ISO&#x2F;IEC 9899:2011 6.10.3.5(4)<br><br/></p><h4 id="参考-44"><a href="#参考-44" class="headerlink" title="参考"></a>参考</h4><p>CWE-483<br><br/><br><br/></p><h3 id="▌R3-2-7-宏定义中的-和-运算符不应嵌套使用"><a href="#▌R3-2-7-宏定义中的-和-运算符不应嵌套使用" class="headerlink" title="▌R3.2.7 宏定义中的 # 和 ## 运算符不应嵌套使用"></a><span id="macro_complexconcat">▌R3.2.7 宏定义中的 # 和 ## 运算符不应嵌套使用</span></h3><p>ID_macro_complexConcat&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: precompile warning</p><hr/><p># 和 ## 运算符的优先级在标准中是未声明的，在有可移植性要求的代码中不应嵌套使用。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> M0(a, b) # a ## b          <span class="comment">// Non-compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M1(a, b, c) a ## #b ## c   <span class="comment">// Non-compliant</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M2(a) #a                   <span class="comment">// Compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M3(a, b) M1(a ## b)        <span class="comment">// Compliant</span></span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-27"><a href="#依据-27" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.10.3.2(2)-unspecified<br>ISO&#x2F;IEC 9899:1999 6.10.3.3(3)-unspecified<br>ISO&#x2F;IEC 9899:2011 6.10.3.2(2)-unspecified<br>ISO&#x2F;IEC 9899:2011 6.10.3.3(3)-unspecified<br>ISO&#x2F;IEC 14882:2003 16.3.2(2)-unspecified<br>ISO&#x2F;IEC 14882:2003 16.3.3(3)-unspecified<br>ISO&#x2F;IEC 14882:2011 16.3.2(2)-unspecified<br>ISO&#x2F;IEC 14882:2011 16.3.3(3)-unspecified<br>ISO&#x2F;IEC 14882:2017 19.3.2(2)-unspecified<br>ISO&#x2F;IEC 14882:2017 19.3.3(3)-unspecified<br><br/></p><h4 id="参考-45"><a href="#参考-45" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 19.12<br>MISRA C 2012 20.11<br>MISRA C++ 2008 16-3-1<br><br/><br><br/></p><h3 id="▌R3-2-8-不应使用宏定义常量"><a href="#▌R3-2-8-不应使用宏定义常量" class="headerlink" title="▌R3.2.8 不应使用宏定义常量"></a><span id="macro_const">▌R3.2.8 不应使用宏定义常量</span></h3><p>ID_macro_const&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: precompile suggestion</p><hr/><p>宏用于文本处理，不受作用域等语言规则限制，不应使用宏实现常量等语言层面的概念。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> U &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> PI 3.14F  <span class="comment">// Non-compliant</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> V &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> PI 3.14159L  <span class="comment">// Non-compliant</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> W &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">double</span> PI)</span></span>;  <span class="comment">// Disturbed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中宏 PI 不受命名空间的限制，第二个宏定义会覆盖第一个宏定义，而且会干扰其他作用域中相同的名称。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> U &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">float</span> PI = <span class="number">3.14F</span>;  <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> V &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> PI = <span class="number">3.14159L</span>;  <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了避免混乱，建议宏只作为 #if、#elif 等指令的条件，不参与具体的功能实现。<br><br/><br><br/></p><h4 id="相关-30"><a href="#相关-30" class="headerlink" title="相关"></a>相关</h4><p>ID_macro_typeid<br>ID_macro_function<br><br/></p><h4 id="参考-46"><a href="#参考-46" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.31<br>C++ Core Guidelines Enum.1<br><br/><br><br/></p><h3 id="▌R3-2-9-不应使用宏定义类型"><a href="#▌R3-2-9-不应使用宏定义类型" class="headerlink" title="▌R3.2.9 不应使用宏定义类型"></a><span id="macro_typeid">▌R3.2.9 不应使用宏定义类型</span></h3><p>ID_macro_typeid&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: precompile suggestion</p><hr/><p>宏用于文本处理，不受作用域等语言规则限制，不应使用宏实现类型等语言层面的概念。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> U &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> Type int  <span class="comment">// Non-compliant</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> V &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> Type long  <span class="comment">// Non-compliant</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(Type)</span></span>;  <span class="comment">// Unreliable</span></span><br></pre></td></tr></table></figure><p>例中 Type 的最终定义是 long，第二个宏定义会覆盖第一个宏定义，这显然是不可靠的。<br><br/><br><br/></p><h4 id="相关-31"><a href="#相关-31" class="headerlink" title="相关"></a>相关</h4><p>ID_macro_sideEffectArgs<br>ID_macro_const<br>ID_macro_function<br><br/></p><h4 id="参考-47"><a href="#参考-47" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.30<br><br/><br><br/></p><h3 id="▌R3-2-10-可由函数实现的功能不应使用宏实现"><a href="#▌R3-2-10-可由函数实现的功能不应使用宏实现" class="headerlink" title="▌R3.2.10 可由函数实现的功能不应使用宏实现"></a><span id="macro_function">▌R3.2.10 可由函数实现的功能不应使用宏实现</span></h3><p>ID_macro_function&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: precompile suggestion</p><hr/><p>宏用于文本处理，不受作用域、参数传递、重载等语言规则限制，且难以调试，可由函数实现的功能不应使用宏实现。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SUM(a, b) ((a) + (b))            <span class="comment">// Non-compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUM(a, b, c) ((a) + (b) + (c))   <span class="comment">// Non-compliant</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">SUM</span>(a, b);     <span class="comment">// Error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中宏 SUM 意在获取参数的和，但宏无法被重载，最终只有一个宏被定义，foo 函数中的宏展开会造成错误。<br><br/><br><br/></p><h4 id="相关-32"><a href="#相关-32" class="headerlink" title="相关"></a>相关</h4><p>ID_macro_sideEffectArgs<br>ID_macro_const<br>ID_macro_typeid<br><br/></p><h4 id="参考-48"><a href="#参考-48" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.31<br>MISRA C 2004 19.7<br>MISRA C 2012 Dir 4.9<br>MISRA C++ 2008 16-0-4<br><br/><br><br/></p><h3 id="▌R3-2-11-宏不应被重定义"><a href="#▌R3-2-11-宏不应被重定义" class="headerlink" title="▌R3.2.11 宏不应被重定义"></a><span id="macro_redefined">▌R3.2.11 宏不应被重定义</span></h3><p>ID_macro_redefined&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: precompile warning</p><hr/><p>宏不受作用域限制，重定义后无法恢复，往往意味着错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> M 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> M 0   <span class="comment">// Non-compliant, redefine</span></span></span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span> M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> M;     <span class="comment">// Probably wrong</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中宏 M 被重定义，实际影响范围是难以估计的，在语言标准中也是非良构的（ill-formed）。如果一定要重定义，应在定义之前用 #undef 取消定义，但不建议这么做，宏的名称不应被复用，否则不利于维护。<br><br/><br><br/></p><h4 id="依据-28"><a href="#依据-28" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.10.3(2)<br>ISO&#x2F;IEC 9899:2011 6.10.3(2)<br>ISO&#x2F;IEC 14882:2003 16.3(2 3)<br>ISO&#x2F;IEC 14882:2011 16.3(2)<br><br/><br><br/></p><h3 id="▌R3-2-12-只应在全局作用域中定义宏"><a href="#▌R3-2-12-只应在全局作用域中定义宏" class="headerlink" title="▌R3.2.12 只应在全局作用域中定义宏"></a><span id="macro_inblock">▌R3.2.12 只应在全局作用域中定义宏</span></h3><p>ID_macro_inBlock&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: precompile suggestion</p><hr/><p>宏不受作用域限制，在非全局作用域中定义宏易引起误解。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> M 123   <span class="comment">// Non-compliant, define in function scope</span></span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中在函数作用域内定义宏是不符合要求的。  </p><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void foo(void) &#123;</span><br><span class="line">    #define M 123   // Let it go</span><br><span class="line">    ....</span><br><span class="line">    #undef M</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果宏与某作用域密切相关，也可以在该作用域内定义宏，但在作用域结尾应使用 #undef 取消定义。<br><br/><br><br/></p><h4 id="相关-33"><a href="#相关-33" class="headerlink" title="相关"></a>相关</h4><p>ID_macro_undef<br><br/></p><h4 id="依据-29"><a href="#依据-29" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.10.3.5(1)<br>ISO&#x2F;IEC 9899:2011 6.10.3.5(1)<br><br/></p><h4 id="参考-49"><a href="#参考-49" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 19.5<br>MISRA C++ 2008 16-0-2<br><br/><br><br/></p><h3 id="▌R3-2-13-合理使用-undef"><a href="#▌R3-2-13-合理使用-undef" class="headerlink" title="▌R3.2.13 合理使用 #undef"></a><span id="macro_undef">▌R3.2.13 合理使用 #undef</span></h3><p>ID_macro_undef&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: precompile suggestion</p><hr/><p>内部宏在使用完毕后可用 #undef 取消定义，以免被外部非法使用，除此之外不应使用 #undef。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HEADER_GUARD</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEADER_GUARD </span></span><br><span class="line">....</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> HEADER_GUARD   <span class="comment">// Non-compliant</span></span></span><br><span class="line">....</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>对其他模块的宏、系统宏以及头文件守卫等宏均不应使用 #undef。<br><br/><br><br/></p><h4 id="相关-34"><a href="#相关-34" class="headerlink" title="相关"></a>相关</h4><p>ID_macro_undefReserved<br><br/></p><h4 id="参考-50"><a href="#参考-50" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 19.6<br>MISRA C 2012 20.5<br>MISRA C++ 2008 16-0-3<br><br/><br><br/></p><h3 id="3-3-Macro-usage"><a href="#3-3-Macro-usage" class="headerlink" title="3.3 Macro-usage"></a><span id="precompile.macro-usage">3.3 Macro-usage</span></h3><h3 id="▌R3-3-1-宏的实参不应有副作用"><a href="#▌R3-3-1-宏的实参不应有副作用" class="headerlink" title="▌R3.3.1 宏的实参不应有副作用"></a><span id="macro_sideeffectargs">▌R3.3.1 宏的实参不应有副作用</span></h3><p>ID_macro_sideEffectArgs&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: precompile warning</p><hr/><p>当宏参数有“<a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)">副作用（side effect）</a>”时，如果宏定义中没有或多次引用到该参数，会导致意料之外的错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> I(a)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M(a) ((a) + (a))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">M</span>(++a);   <span class="comment">// Non-compliant, returns ‘((++a) + (++a))’</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(<span class="type">int</span>&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">I</span>(a--);          <span class="comment">// Non-compliant, does nothing</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 M 和 I 看起来像是函数调用，而展开后的结果却在意料之外。<br><br/><br><br/></p><h4 id="相关-35"><a href="#相关-35" class="headerlink" title="相关"></a>相关</h4><p>ID_sideEffectAssertion<br>ID_macro_function<br><br/></p><h4 id="参考-51"><a href="#参考-51" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT PRE31-C<br><br/><br><br/></p><h3 id="▌R3-3-2-宏的实参个数不可小于形参个数"><a href="#▌R3-3-2-宏的实参个数不可小于形参个数" class="headerlink" title="▌R3.3.2 宏的实参个数不可小于形参个数"></a><span id="macro_insufficientargs">▌R3.3.2 宏的实参个数不可小于形参个数</span></h3><p>ID_macro_insufficientArgs&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: precompile error</p><hr/><p>宏的实参个数小于形参个数是不符合 C&#x2F;C++ 标准的，参数个数不一致必然意味着某种错误，然而在某些编译环境下却可以通过编译。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> M(a, b, c)  a ## b ## c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">M</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>);  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>早期标准（ISO 9899:1990）对这种情况没有明确定义，后续标准对其进行了约束，但 MSVC 等编译器至今仍不把这种问题视作编译错误，需要特别注意。<br><br/><br><br/></p><h4 id="相关-36"><a href="#相关-36" class="headerlink" title="相关"></a>相关</h4><p>ID_macro_redundantArgs<br><br/></p><h4 id="依据-30"><a href="#依据-30" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.10.3(4)<br>ISO&#x2F;IEC 9899:2011 6.10.3(4)<br>ISO&#x2F;IEC 14882:2003 16.3(4)<br>ISO&#x2F;IEC 14882:2011 16.3(4)<br><br/></p><h4 id="参考-52"><a href="#参考-52" class="headerlink" title="参考"></a>参考</h4><p>CWE-628<br>MISRA C 2004 19.8<br><br/><br><br/></p><h3 id="▌R3-3-3-宏的实参个数不可大于形参个数"><a href="#▌R3-3-3-宏的实参个数不可大于形参个数" class="headerlink" title="▌R3.3.3 宏的实参个数不可大于形参个数"></a><span id="macro_redundantargs">▌R3.3.3 宏的实参个数不可大于形参个数</span></h3><p>ID_macro_redundantArgs&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: precompile warning</p><hr/><p>宏的实参个数大于形参个数是不符合 C&#x2F;C++ 标准的，多余的宏参数是没有意义的，然而在某些编译环境下却可以通过编译。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> M(a, b, c)  a ## b ## c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">M</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>);  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#define MSG(fmt, ...) printf(fmt, __VA_ARGS__)</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    MSG(&quot;%d %d\n&quot;, 1, 2);  // Compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可变宏参数列表可不受本规则约束。<br><br/><br><br/></p><h4 id="相关-37"><a href="#相关-37" class="headerlink" title="相关"></a>相关</h4><p>ID_macro_insufficientArgs<br><br/></p><h4 id="依据-31"><a href="#依据-31" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.10.3(4)<br>ISO&#x2F;IEC 9899:2011 6.10.3(4)<br>ISO&#x2F;IEC 14882:2003 16.3(4)<br>ISO&#x2F;IEC 14882:2011 16.3(4)<br><br/></p><h4 id="参考-53"><a href="#参考-53" class="headerlink" title="参考"></a>参考</h4><p>CWE-628<br><br/><br><br/></p><h3 id="▌R3-3-4-va-start-或-va-copy-应配合-va-end-使用"><a href="#▌R3-3-4-va-start-或-va-copy-应配合-va-end-使用" class="headerlink" title="▌R3.3.4 va_start 或 va_copy 应配合 va_end 使用"></a><span id="incompletevamacros">▌R3.3.4 va_start 或 va_copy 应配合 va_end 使用</span></h3><p>ID_incompleteVaMacros&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: precompile warning</p><hr/><p>可变参数列表相关的 va_start 或 va_copy 和 va_end 应在同一函数中使用，否则会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> n, ...)</span> </span>&#123;</span><br><span class="line">    va_list ap;</span><br><span class="line">    <span class="built_in">va_start</span>(ap, n);</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sum += <span class="built_in">va_arg</span>(ap, <span class="type">int</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;   <span class="comment">// Non-compliant, missing ‘va_end(ap);’</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应在函数返回前使用 va_end。<br><br/><br><br/></p><h4 id="相关-38"><a href="#相关-38" class="headerlink" title="相关"></a>相关</h4><p>ID_forbidVariadicFunction<br><br/></p><h4 id="依据-32"><a href="#依据-32" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.15.1.3(2)-undefined<br>ISO&#x2F;IEC 9899:2011 7.16.1.3(2)-undefined<br><br/><br><br/></p><h3 id="▌R3-3-5-va-arg-的类型参数应符合要求"><a href="#▌R3-3-5-va-arg-的类型参数应符合要求" class="headerlink" title="▌R3.3.5 va_arg 的类型参数应符合要求"></a><span id="badvaargtype">▌R3.3.5 va_arg 的类型参数应符合要求</span></h3><p>ID_badVaArgType&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: precompile error</p><hr/><p>对于 stdarg.h 中的宏 va_arg(ap, type)，其类型参数 type 在  </p><p>对于宏 va_arg(ap, type) 的类型参数 type，下列情况会导致标准未定义的行为：  </p><ul><li>type 后加 * 号不能表示指针类型  </li><li>与“默认参数提升”后的类型不兼容  </li><li>与可变参数列表中对应的实参类型不兼容，或没有对应的实参</li></ul><p>以下类型不可作为 av_arg 的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bool、_Bool、</span><br><span class="line">char、signed char、unsigned char、char16_t、</span><br><span class="line">float、</span><br><span class="line">short、unsigned short、signed short、</span><br><span class="line">short int、signed short int、unsigned short int</span><br></pre></td></tr></table></figure><p>这些类型的参数在传入可变参数列表时，会被提升为 int、unsigned int、double 等类型，va_arg 如果再按提升前的类型解析参数的值就会产生错误，参见“<a href="https://en.cppreference.com/w/cpp/language/variadic_arguments#Default_conversions">默认参数提升（default argument promotion）</a>”机制。  </p><p>另外，C++ 代码中非 POD 类型也不可作为 va_arg 的参数，参见 ID_nonPODVariadicArgument。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> n, ...)</span> </span>&#123;</span><br><span class="line">    va_list ap;</span><br><span class="line">    <span class="built_in">va_start</span>(ap, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> c = <span class="built_in">va_arg</span>(ap, <span class="type">char</span>);   <span class="comment">// Non-compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">va_end</span>(ap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 va_arg 的类型参数为 char 是不符合要求的。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="type">char</span> c = (<span class="type">char</span>)<span class="built_in">va_arg</span>(ap, <span class="type">int</span>);   <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-39"><a href="#相关-39" class="headerlink" title="相关"></a>相关</h4><p>ID_badParmN<br>ID_nonPODVariadicArgument<br>ID_forbidVariadicFunction<br><br/></p><h4 id="依据-33"><a href="#依据-33" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.15.1.1(2)-undefined<br>ISO&#x2F;IEC 9899:2011 7.16.1.1(2)-undefined<br><br/></p><h4 id="参考-54"><a href="#参考-54" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT EXP47-C<br><br/><br><br/></p><h3 id="▌R3-3-6-在-C-代码中不应使用宏-offsetof"><a href="#▌R3-3-6-在-C-代码中不应使用宏-offsetof" class="headerlink" title="▌R3.3.6 在 C++ 代码中不应使用宏 offsetof"></a><span id="deprecatedoffsetof">▌R3.3.6 在 C++ 代码中不应使用宏 offsetof</span></h3><p>ID_deprecatedOffsetof&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: precompile suggestion</p><hr/><p>宏 offsetof 很难适用于具有 C++ 特性的类，在 C++ 代码中不应使用。  </p><p>如果 offsetof 用于：  </p><ul><li>非“<a href="https://en.cppreference.com/w/cpp/named_req/StandardLayoutType">standard layout</a>”类型  </li><li>计算静态成员或成员函数的偏移量</li></ul><p>会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">offsetof</span>(A, i);  <span class="comment">// Non-compliant, undefined behavior</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">offsetof</span>(B, i);  <span class="comment">// Non-compliant, undefined behavior</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">baz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">offsetof</span>(B, f);  <span class="comment">// Non-compliant, undefined behavior</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-34"><a href="#依据-34" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 18.1(5)-undefined<br>ISO&#x2F;IEC 14882:2011 18.2(4)-undefined<br><br/></p><h4 id="参考-55"><a href="#参考-55" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 18-2-1<br>SEI CERT EXP59-CPP<br><br/><br><br/></p><h3 id="3-4-Directive"><a href="#3-4-Directive" class="headerlink" title="3.4 Directive"></a><span id="precompile.directive">3.4 Directive</span></h3><h3 id="▌R3-4-1-头文件不应缺少守卫"><a href="#▌R3-4-1-头文件不应缺少守卫" class="headerlink" title="▌R3.4.1 头文件不应缺少守卫"></a><span id="missingheaderguard">▌R3.4.1 头文件不应缺少守卫</span></h3><p>ID_missingHeaderGuard&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: precompile warning</p><hr/><p>以 .h 或 .hpp 为扩展名的头文件应包含头文件守卫。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Header file foo.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LIBRARY_FOO_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIBRARY_FOO_H</span></span><br><span class="line">....</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>例中 foo.h 是“Library”模块中的头文件，宏 LIBRARY_FOO_H 即可作为它的守卫，保证头文件被重复引入也不会出现问题，守卫名称不可有重复，建议守卫名称遵循“模块名_文件名”的形式。  </p><p>#pragma once 指令也可作为头文件守卫，但并不是 C&#x2F;C++ 的标准方式，只是多数编译器均有支持。这种方式由编译器维护一个列表，引入头文件时，如果发现文件中有 #pragma once 指令就将文件路径加入列表，当这个文件再次被 include 时便不会加载，而宏守卫的方式仍然要对文件进行预编译，所以 #pragma once 方式在编译效率上会更高一些。  </p><p>宏守卫用宏名区分头文件，所以不能有重复。宏的引入可以使相关设定更灵活，比如声明头文件之间的依赖或排斥关系，如果 bar.h 依赖 foo.h，在 #include “bar.h” 之前必须 #include “foo.h”，可在 bar.h 中设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Header file bar.h</span><br><span class="line">#ifndef LIBRARY_FOO_H</span><br><span class="line">#error foo.h should be included first</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>这样如果不满足条件无法通过编译。  </p><p>本规则建议使用宏守卫的方式，但 #pragma once 方法也是惯用写法，不妨通过配置项决定其是否合规。<br><br/><br><br/></p><h4 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h4><p>allowPragmaOnce：是否允许 #pragma once 作为头文件守卫<br><br/></p><h4 id="参考-56"><a href="#参考-56" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines SF.8<br>MISRA C 2004 19.15<br>MISRA C++ 2008 16-2-3<br><br/><br><br/></p><h3 id="▌R3-4-2-不应出现非标准格式的预编译指令"><a href="#▌R3-4-2-不应出现非标准格式的预编译指令" class="headerlink" title="▌R3.4.2 不应出现非标准格式的预编译指令"></a><span id="illformeddirective">▌R3.4.2 不应出现非标准格式的预编译指令</span></h3><p>ID_illFormedDirective&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: precompile warning</p><hr/><p>非标准格式的预编译指令往往意味着错误，也会导致标准未定义的行为。  </p><p>需注意：  </p><ul><li>defined 只应作用于宏名称或括号括起来的宏名称  </li><li>defined 不应出现在宏定义中  </li><li>#if、#elif 之后应为正确的常量表达式  </li><li>#ifdef、#ifndef 之后只应为宏名称  </li><li>#else、#endif 之后应直接换行  </li><li>#line 之后应接整数常量，或整数常量和文件名称  </li><li>#line 指定的行号应在有效范围内  </li><li>#line 不应出现在非自动生成的代码中</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> defined M            <span class="comment">// Compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(M)           <span class="comment">// Compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(M == 0)      <span class="comment">// Non-compliant, undefined behavior</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFINED defined  <span class="comment">// Non-compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DEFINED M            <span class="comment">// Undefined behavior</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">line</span> 0                  <span class="comment">// Non-compliant, invalid line number</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">line</span> 4294967295         <span class="comment">// Non-compliant, line number too large</span></span></span><br></pre></td></tr></table></figure><p>例中作用于比较表达式的 defined 和 #if 条件中由宏展开产生的 defined 均会导致未定义的行为，由 #line 指定的行号应大于 0 且小于 2147483648（按 C++03 标准则应小于 32768），否则也会导致未定义的行为。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#define M 2</span><br><span class="line"></span><br><span class="line">int foo() &#123;</span><br><span class="line">    int x = 0;</span><br><span class="line">#ifdef M</span><br><span class="line">        x = M;</span><br><span class="line">#elif            // Non-compliant, use ‘#else’ instead</span><br><span class="line">        x = 1;</span><br><span class="line">#endif M         // Non-compliant, remove ‘M’</span><br><span class="line">    return x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种代码是不符合标准的，但可被某些编译器接受，应避免。<br><br/><br><br/></p><h4 id="依据-35"><a href="#依据-35" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.10(1)<br>ISO&#x2F;IEC 9899:1999 6.10.1(3)-undefined<br>ISO&#x2F;IEC 9899:2011 6.10(1)<br>ISO&#x2F;IEC 9899:2011 6.10.1(4)-undefined<br>ISO&#x2F;IEC 14882:2003 16.1(4)-undefined<br>ISO&#x2F;IEC 14882:2003 16.2(4)-undefined<br>ISO&#x2F;IEC 14882:2003 16.4(3)-undefined<br>ISO&#x2F;IEC 14882:2003 16.4(5)-undefined<br>ISO&#x2F;IEC 14882:2011 16.1(4)-undefined<br>ISO&#x2F;IEC 14882:2011 16.2(4)-undefined<br>ISO&#x2F;IEC 14882:2011 16.4(3)-undefined<br>ISO&#x2F;IEC 14882:2011 16.4(5)-undefined<br><br/></p><h4 id="参考-57"><a href="#参考-57" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 16-0-7<br>MISRA C++ 2008 16-0-8<br>MISRA C++ 2008 16-1-1<br><br/><br><br/></p><h3 id="▌R3-4-3-不应使用非标准预编译指令"><a href="#▌R3-4-3-不应使用非标准预编译指令" class="headerlink" title="▌R3.4.3 不应使用非标准预编译指令"></a><span id="nonstddirective">▌R3.4.3 不应使用非标准预编译指令</span></h3><p>ID_nonStdDirective&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: precompile warning</p><hr/><p>非标准预编译指令往往属于某种编译器独有，在有可移植性要求的代码中应避免使用。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;foo&quot;</span>          <span class="comment">// Non-compliant</span></span></span><br><span class="line">#include_next <span class="string">&quot;bar.h&quot;</span>  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-36"><a href="#依据-36" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.10(1)<br>ISO&#x2F;IEC 9899:2011 6.10(1)<br>ISO&#x2F;IEC 14882:2003 16(1)<br>ISO&#x2F;IEC 14882:2011 16(1)<br>ISO&#x2F;IEC 14882:2017 19(1)<br><br/></p><h4 id="参考-58"><a href="#参考-58" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 19.16<br>MISRA C 2012 20.13<br><br/><br><br/></p><h3 id="▌R3-4-4-宏的参数列表中不应出现预编译指令"><a href="#▌R3-4-4-宏的参数列表中不应出现预编译指令" class="headerlink" title="▌R3.4.4 宏的参数列表中不应出现预编译指令"></a><span id="directiveinmacroargument">▌R3.4.4 宏的参数列表中不应出现预编译指令</span></h3><p>ID_directiveInMacroArgument&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: precompile warning</p><hr/><p>如果预编译指令出现在宏的参数列表中，会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PRINT(s) printf(#s)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">PRINT</span>(</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> MAC      <span class="comment">// Non-compliant, undefined behavior</span></span></span><br><span class="line">    rabbit</span><br><span class="line"><span class="meta">#<span class="keyword">else</span>           <span class="comment">// Non-compliant</span></span></span><br><span class="line">    hamster</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>          <span class="comment">// Non-compliant</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>可能会打印出 hamster，也可能是 #ifdef MAC rabbit #else hamster #endif 这种怪异的结果。<br><br/><br><br/></p><h4 id="依据-37"><a href="#依据-37" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.10.3(11)-undefined<br>ISO&#x2F;IEC 9899:2011 6.10.3(11)-undefined<br>ISO&#x2F;IEC 14882:2003 16.3(10)-undefined<br>ISO&#x2F;IEC 14882:2011 16.3(11)-undefined<br><br/></p><h4 id="参考-59"><a href="#参考-59" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 20.6<br>MISRA C++ 2008 16-0-5<br><br/><br><br/></p><h3 id="▌R3-4-5-条件编译代码块应在同一文件中"><a href="#▌R3-4-5-条件编译代码块应在同一文件中" class="headerlink" title="▌R3.4.5 条件编译代码块应在同一文件中"></a><span id="incompletedirective">▌R3.4.5 条件编译代码块应在同一文件中</span></h3><p>ID_incompleteDirective&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: precompile warning</p><hr/><p>#if、#ifdef 与对应的 #else、#elif、#endif 应在同一文件中，否则会增加代码的维护成本。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> M      <span class="comment">// Non-compliant</span></span></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span>         <span class="comment">// Non-compliant</span></span></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="comment">// c.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;a.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;b.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>           <span class="comment">// Non-compliant</span></span></span><br></pre></td></tr></table></figure><p>示例代码将 #ifdef、#else、#endif 分成了三个文件，使这些文件的依赖关系变得复杂，也使单个文件失去了可读性。<br><br/><br><br/></p><h4 id="参考-60"><a href="#参考-60" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 19.17<br>MISRA C 2012 20.14<br>MISRA C++ 2008 16-1-2<br><br/><br><br/></p><h3 id="▌R3-4-6-对编译警告的屏蔽应慎重"><a href="#▌R3-4-6-对编译警告的屏蔽应慎重" class="headerlink" title="▌R3.4.6 对编译警告的屏蔽应慎重"></a><span id="warningdisabled">▌R3.4.6 对编译警告的屏蔽应慎重</span></h3><p>ID_warningDisabled&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: precompile suggestion</p><hr/><p>编译器一般允许使用预编译指令屏蔽某些编译警告，但对于反映风险或安全问题的警告不应屏蔽。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _MSC_VER</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable: 4172)  <span class="comment">// Non-compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined __GNUC__</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC diagnostic ignored <span class="string">&quot;-Wreturn-local-addr&quot;</span>  <span class="comment">// Non-compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>示例代码屏蔽了 Visual Studio C4172 和 GCC -Wreturn-local-addr 对应的警告，当局部变量的地址被返回时编译器不会给出警告，但这种警告是不应该被屏蔽的，详见 ID_localAddressFlowOut。  </p><p>本规则集合提到的部分问题编译器也可以给出警告，这种警告均不应被屏蔽。<br><br/><br><br/></p><h4 id="相关-40"><a href="#相关-40" class="headerlink" title="相关"></a>相关</h4><p>ID_warningDefault<br><br/><br><br/></p><h3 id="▌R3-4-7-在高级别的警告设置下编译"><a href="#▌R3-4-7-在高级别的警告设置下编译" class="headerlink" title="▌R3.4.7 在高级别的警告设置下编译"></a><span id="warningdefault">▌R3.4.7 在高级别的警告设置下编译</span></h3><p>ID_warningDefault&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: precompile suggestion</p><hr/><p>编译器一般允许设定编译警告的级别，级别越高关注的问题就越多，也可以将警告设为错误，当有警告产生时停止编译，建议代码在高级别的警告设置下编译。  </p><p>应避免代码中出现 #pragma warning(default:…) 等指令，这种指令将警告级别设为默认，可能与整个项目的设置不一致，如果一定要使用，应改用 #pragma warning(pop) 方式。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4706)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;somecode&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(default:4706)  <span class="comment">// Non-compliant</span></span></span><br></pre></td></tr></table></figure><p>示例代码在导入某些代码之前将代号为 4706 的警告屏蔽，之后又将其设为默认级别，首先要关注 4706 是否应该被屏蔽，还要关注如果将其设为默认是否与整个项目的设置有冲突。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(push)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4706)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;somecode&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(pop)  <span class="comment">// Compliant</span></span></span><br></pre></td></tr></table></figure><p>改用这种方式之后不必再关注是否与整个项目的设置有冲突了。<br><br/><br><br/></p><h4 id="相关-41"><a href="#相关-41" class="headerlink" title="相关"></a>相关</h4><p>ID_warningDisabled<br><br/></p><h4 id="参考-61"><a href="#参考-61" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT MSC00-C<br><br/><br><br/></p><h3 id="3-5-Comment"><a href="#3-5-Comment" class="headerlink" title="3.5 Comment"></a><span id="precompile.comment">3.5 Comment</span></h3><h3 id="▌R3-5-1-关注-TODO、FIXME、XXX、BUG-等特殊注释"><a href="#▌R3-5-1-关注-TODO、FIXME、XXX、BUG-等特殊注释" class="headerlink" title="▌R3.5.1 关注 TODO、FIXME、XXX、BUG 等特殊注释"></a><span id="specialcomment">▌R3.5.1 关注 TODO、FIXME、XXX、BUG 等特殊注释</span></h3><p>ID_specialComment&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: precompile warning</p><hr/><p>TODO、FIXME、XXX、BUG 等特殊注释表示代码中存在问题，这种问题不应被遗忘，应有计划地予以解决。  </p><p>及时记录问题是一种好习惯，而且最好有署名和日期。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Some plans...         // Bad, easy to forget</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* <span class="doctag">TODO:</span></span></span><br><span class="line"><span class="comment">     * Some plans...  -- my name, date     // Good</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>审计工具不妨定期搜索这些关键词对应的注释，以供相关人员核对问题解决情况。<br><br/><br><br/></p><h4 id="参考-62"><a href="#参考-62" class="headerlink" title="参考"></a>参考</h4><p>CWE-546<br><br/><br><br/></p><h3 id="▌R3-5-2-注释不可嵌套"><a href="#▌R3-5-2-注释不可嵌套" class="headerlink" title="▌R3.5.2 注释不可嵌套"></a><span id="nestedcomment">▌R3.5.2 注释不可嵌套</span></h3><p>ID_nestedComment&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: precompile warning</p><hr/><p>嵌套的 &#x2F;*…*&#x2F; 注释不符合标准，&#x2F;* 与 *&#x2F; 之间不应出现 &#x2F;*，某些编译器可以接受嵌套，但不具备可移植性。  </p><p>示例：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*                         // #1</span><br><span class="line">    /*                     // #2, Non-compliant</span><br><span class="line">    nested comments</span><br><span class="line">     */                    // #3</span><br><span class="line">*/                         // #4, Non-compliant</span><br></pre></td></tr></table></figure><p>根据标准，<code>#1</code> 处的 &#x2F;* 与 <code>#3</code> 处的 *&#x2F; 匹配，而 <code>#4</code> 处的 *&#x2F; 处于失配状态。<br><br/><br><br/></p><h4 id="依据-38"><a href="#依据-38" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.4.9(1)<br>ISO&#x2F;IEC 9899:2011 6.4.9(1)<br><br/></p><h4 id="参考-63"><a href="#参考-63" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 2.3<br>MISRA C 2012 3.1<br>MISRA C++ 2008 2-7-1<br><br/><br><br/></p><h3 id="▌R3-5-3-注释应出现在合理的位置"><a href="#▌R3-5-3-注释应出现在合理的位置" class="headerlink" title="▌R3.5.3 注释应出现在合理的位置"></a><span id="badcommentposition">▌R3.5.3 注释应出现在合理的位置</span></h3><p>ID_badCommentPosition&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: precompile suggestion</p><hr/><p>注释应出现在段落的前后或行尾，不应出现在行首或中间，否则干扰阅读，甚至会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#<span class="comment">/*comment*/</span>include <span class="string">&quot;foo.h&quot;</span>         <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bar.h /*comment*/&gt;</span>        <span class="comment">// Non-compliant, undefined behavior</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*comment*/</span> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>              <span class="comment">// Non-compliant</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b <span class="comment">/*comment*/</span> + c;   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;foo.h&quot;</span>    <span class="comment">// comment      // Compliant</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bar.h&gt;</span>    <span class="comment">// comment      // Compliant</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * comment                          // Compliant</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;  <span class="comment">// comment   // Compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void foo(int i = 0);                // Declaration</span><br><span class="line"></span><br><span class="line">void foo(int i /*= 0*/) &#123;           // Let it go</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果参数有默认值，在函数实现中参数声明的结尾可用注释说明，不受本规则限制。<br><br/><br><br/></p><h4 id="依据-39"><a href="#依据-39" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.4.7(3)-undefined<br>ISO&#x2F;IEC 9899:2011 6.4.7(3)-undefined<br>ISO&#x2F;IEC 14882:2003 2.8(2)-undefined<br>ISO&#x2F;IEC 14882:2011 2.9(2)-implementation<br><br/><br><br/></p><h3 id="3-6-Other"><a href="#3-6-Other" class="headerlink" title="3.6 Other"></a><span id="precompile.other">3.6 Other</span></h3><h3 id="▌R3-6-1-非空源文件应以换行符结尾"><a href="#▌R3-6-1-非空源文件应以换行符结尾" class="headerlink" title="▌R3.6.1 非空源文件应以换行符结尾"></a><span id="missingnewlinefileend">▌R3.6.1 非空源文件应以换行符结尾</span></h3><p>ID_missingNewLineFileEnd&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: precompile suggestion</p><hr/><p>如果非空源文件未以换行符结尾，或以换行符结尾但换行符之前是反斜杠，在 C 和 C++03 标准中会导致未定义的行为。  </p><p>一般情况下 IDE 或编辑器会保证源文件以空行结尾，而且 C++11 规定编译器应补全所需的空行，但为了提高兼容性，并便于各种相关工具的使用，所有与代码相关的文本文件均应以有效的换行符结尾。<br><br/><br><br/></p><h4 id="配置-4"><a href="#配置-4" class="headerlink" title="配置"></a>配置</h4><p>allTxtFileNeedNewLineEnd：是否要求所有文本文件均以换行符结尾<br><br/></p><h4 id="依据-40"><a href="#依据-40" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 5.1.1.2(1)-undefined<br>ISO&#x2F;IEC 9899:2011 5.1.1.2(1)-undefined<br>ISO&#x2F;IEC 14882:2003 2.1(1)-undefined<br>ISO&#x2F;IEC 14882:2011 2.2(1)<br><br/><br><br/></p><h3 id="▌R3-6-2-除转义字符、宏定义之外不应使用反斜杠"><a href="#▌R3-6-2-除转义字符、宏定义之外不应使用反斜杠" class="headerlink" title="▌R3.6.2 除转义字符、宏定义之外不应使用反斜杠"></a><span id="badbackslash">▌R3.6.2 除转义字符、宏定义之外不应使用反斜杠</span></h3><p>ID_badBackslash&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: precompile warning</p><hr/><p>反斜杠可用于标识转义字符，也可用于实现“伪换行”，即代码换行显示但在语法上并没有换行，一般用于宏定义，除此之外不应再使用反斜杠，否则没有实际意义，也会造成混乱。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> M(x, y) <span class="keyword">if</span>(x) &#123;\    <span class="comment">// Compliant</span></span></span><br><span class="line">    <span class="built_in">foo</span>(y);\                <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (condition1 \        <span class="comment">// Non-compliant, meaningless</span></span><br><span class="line">     || condition2) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a\                      <span class="comment">// Non-compliant, odd usage</span></span><br><span class="line">b\</span><br><span class="line">c = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// comment  \           // Non-compliant, The next line is also commented out</span></span><br><span class="line">    <span class="built_in">do_something</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果“universal character name”被反斜杠截断会导致标准未定义的行为，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const char* s = &quot;\u4e\      // Non-compliant, undefined behavior</span><br><span class="line">2d&quot;;</span><br></pre></td></tr></table></figure><p>应去掉反斜杠：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const char* s = &quot;\u4e2d&quot;;   // Compliant</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-41"><a href="#依据-41" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 2.1(1)-undefined<br>ISO&#x2F;IEC 14882:2011 2.2(1)-undefined<br><br/><br><br/></p><h2 id="4-Global"><a href="#4-Global" class="headerlink" title="4. Global"></a><span id="global">4. Global</span></h2><h3 id="▌R4-1-全局名称应遵循合理的命名方式"><a href="#▌R4-1-全局名称应遵循合理的命名方式" class="headerlink" title="▌R4.1 全局名称应遵循合理的命名方式"></a><span id="nametooshort">▌R4.1 全局名称应遵循合理的命名方式</span></h3><p>ID_nameTooShort&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: global suggestion</p><hr/><p>全局名称应具有标识性，长度不应过短，否则易与局部名称产生冲突。  </p><p>本规则是 ID_badName 的特化。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In global scope</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> i = <span class="number">0</span>;     <span class="comment">// Non-compliant, name too short</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> t;       <span class="comment">// Non-compliant, name too short</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; .... &#125;;    <span class="comment">// Non-compliant, name too short</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i + i;    <span class="comment">// Confusing</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>名称适用的作用域范围越广，其长度也应该越长，建议全局名称长度不小于 3 个字符。<br><br/><br><br/></p><h4 id="配置-5"><a href="#配置-5" class="headerlink" title="配置"></a>配置</h4><p>minVariableNameLength：全局对象名称长度下限，小于则报出<br>minFunctionNameLength：全局函数名称长度下限，小于则报出<br>minNameSpaceNameLength：全局命名空间名称长度下限，小于则报出<br>minTypeNameLength：全局类型名称长度下限，小于则报出<br><br/></p><h4 id="相关-42"><a href="#相关-42" class="headerlink" title="相关"></a>相关</h4><p>ID_badName<br><br/></p><h4 id="参考-64"><a href="#参考-64" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines NL.7<br><br/><br><br/></p><h3 id="▌R4-2-为代码设定合理的命名空间"><a href="#▌R4-2-为代码设定合理的命名空间" class="headerlink" title="▌R4.2 为代码设定合理的命名空间"></a><span id="missingnamespace">▌R4.2 为代码设定合理的命名空间</span></h3><p>ID_missingNamespace&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: global warning</p><hr/><p>命名空间是 C++ 项目的必要组成结构，可有效规避名称冲突等问题。  </p><p>C++ 代码的顶层作用域应为具名非内联命名空间，命名空间名称应与项目名称相符，且具有标识性。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> NS &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;           <span class="comment">// Compliant</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">char</span>*)</span></span>;      <span class="comment">// Compliant</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">wchar_t</span>*)</span></span>;   <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;              <span class="comment">// Non-compliant, it is not ‘int NS::foo()’</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">NS::foo</span><span class="params">(<span class="type">char</span>*)</span> </span>&#123;     <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> NS &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">wchar_t</span>*)</span> </span>&#123;  <span class="comment">// Compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 main 函数和 extern “C” 声明的代码可不受本规则限制，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extern &quot;C&quot; int bar();    // Compliant</span><br><span class="line"></span><br><span class="line">int main () &#123;            // Compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-43"><a href="#相关-43" class="headerlink" title="相关"></a>相关</h4><p>ID_usingNamespaceInHeader<br>ID_forbidUsingDirectives<br><br/></p><h4 id="参考-65"><a href="#参考-65" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 7-3-1<br><br/><br><br/></p><h3 id="▌R4-3-main-函数只应处于全局作用域中"><a href="#▌R4-3-main-函数只应处于全局作用域中" class="headerlink" title="▌R4.3 main 函数只应处于全局作用域中"></a><span id="nonglobalmain">▌R4.3 main 函数只应处于全局作用域中</span></h3><p>ID_nonGlobalMain&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: global warning</p><hr/><p>main 函数作为程序的入口，链接器需对其特殊处理，不应受命名空间等作用域的限制。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;   <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;   <span class="comment">// Non-compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> NS &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;   <span class="comment">// Non-compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-42"><a href="#依据-42" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 3.6.1(1)<br>ISO&#x2F;IEC 14882:2011 3.6.1(1)<br><br/></p><h4 id="参考-66"><a href="#参考-66" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 7-3-2<br><br/><br><br/></p><h3 id="▌R4-4-头文件中不应使用-using-directive"><a href="#▌R4-4-头文件中不应使用-using-directive" class="headerlink" title="▌R4.4 头文件中不应使用 using directive"></a><span id="usingnamespaceinheader">▌R4.4 头文件中不应使用 using directive</span></h3><p>ID_usingNamespaceInHeader&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: global warning</p><hr/><p>在头文件的全局作用域中使用 using directive 极易造成命名冲突，且影响范围难以控制。  </p><p>如果代码涉及多个命名空间，而这些命名空间中又有名称相同且功能相似的代码元素时，将造成难以排查的混乱。对于库的头文件，更应该严禁使用全局的 using directive，否则造成对用户命名空间的干扰。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In a header file</span></span><br><span class="line"><span class="keyword">namespace</span> NS &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">short</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> NS;   <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>下例展示的问题是头文件不同的包含顺序竟导致同一函数产生了不同的行为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// In a.h</span><br><span class="line">void foo(char);</span><br><span class="line"></span><br><span class="line">namespace ns &#123;</span><br><span class="line">    void foo(int);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void bar() &#123;</span><br><span class="line">    foo(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// In b.h</span><br><span class="line">namespace ns &#123;&#125;</span><br><span class="line">using namespace ns;</span><br><span class="line"></span><br><span class="line">// In a.cpp</span><br><span class="line">#include &quot;a.h&quot;</span><br><span class="line">#include &quot;b.h&quot;</span><br><span class="line"></span><br><span class="line">void fun1() &#123;</span><br><span class="line">    bar();      // ‘bar’ calls ‘foo(char)’</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// In b.cpp</span><br><span class="line">#include &quot;b.h&quot;</span><br><span class="line">#include &quot;a.h&quot;</span><br><span class="line"></span><br><span class="line">void fun2() &#123;</span><br><span class="line">    bar();      // ‘bar’ calls ‘foo(int)’</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>头文件 a.h 和 b.h 以不同的顺序被包含，使 bar 函数调用了不同的 foo 函数，导致这种混乱的正是 b.h 中的 using directive。<br><br/><br><br/></p><h4 id="相关-44"><a href="#相关-44" class="headerlink" title="相关"></a>相关</h4><p>ID_forbidUsingDirectives<br><br/></p><h4 id="参考-67"><a href="#参考-67" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines SF.7<br>MISRA C++ 2008 7-3-6<br><br/><br><br/></p><h3 id="▌R4-5-头文件中不应使用静态声明"><a href="#▌R4-5-头文件中不应使用静态声明" class="headerlink" title="▌R4.5 头文件中不应使用静态声明"></a><span id="staticinheader">▌R4.5 头文件中不应使用静态声明</span></h3><p>ID_staticInHeader&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: global warning</p><hr/><p>头文件中由 static 关键字声明的对象、数组或函数，会在每个包含该头文件的翻译单元或模块中生成副本造成数据冗余，如果将静态数据误用作全局数据也会造成逻辑错误。  </p><p>类的静态成员不受本规则限制。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In a header file</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> i = <span class="number">0</span>;    <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;   <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编译每个包含该头文件的源文件时，变量 i 和函数 foo 都会生成不必要的副本。  </p><p>在头文件中实现的内联或模板函数中，也不应使用静态声明，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// In a header file</span><br><span class="line">inline void bar() &#123;</span><br><span class="line">    static Type obj;   // Non-compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果该头文件被不同的模块（so、dll、exe）包含，obj 对象会生成不同的副本，很可能造成逻辑错误。  </p><p>另外，由 const 或 constexpr 关键字修饰的常量也具有静态数据的特性，在头文件中定义常量也面对这种问题，基本类型的常量经过编译优化可以不占用存储空间（有取地址操作的除外），而对于非基本类型的常量对象或数组也不应在头文件中定义，建议采用单件模式，将其数据定义在 cpp 等源文件中，在头文件中定义访问这些数据的接口，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// In arr.h</span><br><span class="line">using Arr = int[256];</span><br><span class="line">const Arr&amp; getArr();</span><br><span class="line"></span><br><span class="line">// In arr.cpp</span><br><span class="line">#include &quot;arr.h&quot;</span><br><span class="line"></span><br><span class="line">const Arr&amp; getArr() &#123;</span><br><span class="line">    static Arr a = &#123;</span><br><span class="line">        1, 2, 3, ....</span><br><span class="line">    &#125;;</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要用到常量数组的地方调用 getArr 函数，即可获取该数组的引用，没有任何重复的数据产生，并可保证数组在使用之前被有效初始化。<br><br/><br><br/></p><h4 id="相关-45"><a href="#相关-45" class="headerlink" title="相关"></a>相关</h4><p>ID_unsuitableDeclaration<br><br/></p><h4 id="依据-43"><a href="#依据-43" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.2.2(3)<br>ISO&#x2F;IEC 9899:2011 6.2.2(3)<br>ISO&#x2F;IEC 14882:2003 3.5(3)<br>ISO&#x2F;IEC 14882:2011 3.5(3)<br><br/><br><br/></p><h3 id="▌R4-6-头文件中不应定义匿名命名空间"><a href="#▌R4-6-头文件中不应定义匿名命名空间" class="headerlink" title="▌R4.6 头文件中不应定义匿名命名空间"></a><span id="anonymousnamespaceinheader">▌R4.6 头文件中不应定义匿名命名空间</span></h3><p>ID_anonymousNamespaceInHeader&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: global warning</p><hr/><p>在头文件中定义匿名命名空间相当于在头文件中定义静态数据，头文件被多个源文件包含时会造成数据冗余。  </p><p>可参见 ID_staticInHeader 的进一步讨论。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In a header file</span></span><br><span class="line"><span class="keyword">namespace</span> &#123;       <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-46"><a href="#相关-46" class="headerlink" title="相关"></a>相关</h4><p>ID_staticInHeader<br>ID_unsuitableDeclaration<br><br/></p><h4 id="依据-44"><a href="#依据-44" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 7.3.1.1<br>ISO&#x2F;IEC 14882:2011 7.3.1.1<br><br/></p><h4 id="参考-68"><a href="#参考-68" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines SF.21<br>MISRA C++ 2008 7-3-3<br><br/><br><br/></p><h3 id="▌R4-7-匿名命名空间中不应使用静态声明"><a href="#▌R4-7-匿名命名空间中不应使用静态声明" class="headerlink" title="▌R4.7 匿名命名空间中不应使用静态声明"></a><span id="staticinanonymousnamespace">▌R4.7 匿名命名空间中不应使用静态声明</span></h3><p>ID_staticInAnonymousNamespace&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: global warning</p><hr/><p>匿名命名空间中的元素已具有内部链接性（internal linkage），不应再用 static 关键字修饰。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> i = <span class="number">0</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;  <span class="comment">// Non-compliant</span></span><br><span class="line">        <span class="keyword">return</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 static 关键字是多余的。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;          <span class="comment">// Compliant</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;         <span class="comment">// Compliant</span></span><br><span class="line">        <span class="keyword">return</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-45"><a href="#依据-45" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2011 3.5(4)<br>ISO&#x2F;IEC 14882:2017 6.5(4)<br><br/><br><br/></p><h3 id="▌R4-8-全局对象的初始化不可依赖未初始化的对象"><a href="#▌R4-8-全局对象的初始化不可依赖未初始化的对象" class="headerlink" title="▌R4.8 全局对象的初始化不可依赖未初始化的对象"></a><span id="relyonexternalobject">▌R4.8 全局对象的初始化不可依赖未初始化的对象</span></h3><p>ID_relyOnExternalObject&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: global warning</p><hr/><p>全局对象的初始化或构造过程不可依赖在其他源文件中定义的全局对象，也不可依赖在其后面定义的对象。  </p><p>在不同源文件中定义的全局对象，以及类的静态成员对象，其初始化顺序是不确定的，在同一源文件中定义的对象，排在前面的会先于后面的初始化。为避免产生问题，建议只使用基本类型的常量作为全局对象，且尽量不要使用 extern 关键字。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i;   <span class="comment">// Defined in other translate unit</span></span><br><span class="line"><span class="type">int</span> j = i;      <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中 i 是在其他源文件中定义的对象，j 初始化时无法保证 i 已被正确初始化。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int foo() &#123;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line">extern int x;   // Defined after ‘y’</span><br><span class="line">int y = x;      // Non-compliant, unspecified</span><br><span class="line">int x = foo();</span><br></pre></td></tr></table></figure><p>例中 x 在 y 的后面定义，y 会先于 x 初始化，y 的值是 0 还是 foo 函数的返回值在标准中是未声明的。<br><br/><br><br/></p><h4 id="依据-46"><a href="#依据-46" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:2011 5.1.2(1)-unspecified<br>ISO&#x2F;IEC 14882:2011 3.6.2(2)<br>ISO&#x2F;IEC 14882:2011 3.6.2(3)-unspecified<br>ISO&#x2F;IEC 14882:2017 6.6.2(3)-unspecified<br>ISO&#x2F;IEC 14882:2017 6.6.3(2)<br><br/></p><h4 id="参考-69"><a href="#参考-69" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines I.22<br><br/><br><br/></p><h3 id="▌R4-9-全局对象只应为常量或静态对象"><a href="#▌R4-9-全局对象只应为常量或静态对象" class="headerlink" title="▌R4.9 全局对象只应为常量或静态对象"></a><span id="nonconstnonstaticglobalobject">▌R4.9 全局对象只应为常量或静态对象</span></h3><p>ID_nonConstNonStaticGlobalObject&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: global warning</p><hr/><p>非常量全局对象破坏了面向对象的封装理念，如果必须使用全局对象，应将其限定在文件范围之内。  </p><p>本规则放宽了 ID_nonConstGlobalObject 的要求，对于 C++ 代码不建议选取本规则，对于 C 代码可酌情选取。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In global scope</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;          <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> j = <span class="number">0</span>;   <span class="comment">// Let it go</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> k = <span class="number">0</span>;    <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-47"><a href="#相关-47" class="headerlink" title="相关"></a>相关</h4><p>ID_nonConstGlobalObject<br><br/></p><h4 id="参考-70"><a href="#参考-70" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines I.2<br>C++ Core Guidelines CP.3<br>C++ Core Guidelines R.6<br><br/><br><br/></p><h3 id="▌R4-10-全局对象只应为常量"><a href="#▌R4-10-全局对象只应为常量" class="headerlink" title="▌R4.10 全局对象只应为常量"></a><span id="nonconstglobalobject">▌R4.10 全局对象只应为常量</span></h3><p>ID_nonConstGlobalObject&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: global warning</p><hr/><p>非常量全局对象对外部的读写没有限制，破坏了面向对象的封装理念，不利于维护。  </p><p>全局对象的初始化顺序和依赖关系也是开发与维护的难点，建议只允许基本类型的常量作为全局对象。  </p><p>进一步讨论可参见 ID_nonPrivateData、ID_relyOnExternalObject。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> foo;               <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> bar;        <span class="comment">// Non-compliant, worse</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> baz = <span class="string">&#x27;c&#x27;</span>;   <span class="comment">// Compliant</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">do_something</span>(foo, bar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应将全局对象和相关函数封装成类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    char foo;   // Compliant</span><br><span class="line">    char bar;   // Compliant</span><br><span class="line">public:</span><br><span class="line">    void fun() &#123;</span><br><span class="line">        do_something(foo, bar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果变量 foo、bar 确有全局意义，多个模块都需要访问，不妨将其单件化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A&amp; getGlobal() &#123;</span><br><span class="line">    static A obj;</span><br><span class="line">    return obj;     // The object must be initialized before returning</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 getGlobal 函数获取对象，再由其成员函数对数据进行读写，有效实现封装理念，而且可以保证对象在使用之前已被初始化。<br><br/><br><br/></p><h4 id="配置-6"><a href="#配置-6" class="headerlink" title="配置"></a>配置</h4><p>onlyConstBasicTypeAllowed：是否只允许基本类型的常量作为全局对象<br><br/></p><h4 id="相关-48"><a href="#相关-48" class="headerlink" title="相关"></a>相关</h4><p>ID_nonPrivateData<br>ID_relyOnExternalObject<br><br/></p><h4 id="参考-71"><a href="#参考-71" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines I.2<br>C++ Core Guidelines CP.3<br>C++ Core Guidelines R.6<br><br/><br><br/></p><h3 id="▌R4-11-全局对象不应同时被-static-和-const-关键字修饰"><a href="#▌R4-11-全局对象不应同时被-static-和-const-关键字修饰" class="headerlink" title="▌R4.11 全局对象不应同时被 static 和 const 关键字修饰"></a><span id="staticandconst">▌R4.11 全局对象不应同时被 static 和 const 关键字修饰</span></h3><p>ID_staticAndConst&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: global warning</p><hr/><p>在 C++ 语言中，由 const 或 constexpr 关键字修饰的全局对象已具有内部链接性（internal linkage），不应再用 static 关键字修饰。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> i = <span class="number">123</span>;   <span class="comment">// Non-compliant, redundant ‘static’</span></span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> i = <span class="number">123</span>;   <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-49"><a href="#相关-49" class="headerlink" title="相关"></a>相关</h4><p>ID_staticInHeader<br><br/></p><h4 id="依据-47"><a href="#依据-47" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 7.1.1(6)<br>ISO&#x2F;IEC 14882:2011 7.1.1(7)<br><br/><br><br/></p><h3 id="▌R4-12-全局及命名空间作用域中禁用-using-directive"><a href="#▌R4-12-全局及命名空间作用域中禁用-using-directive" class="headerlink" title="▌R4.12 全局及命名空间作用域中禁用 using directive"></a><span id="forbidusingdirectives">▌R4.12 全局及命名空间作用域中禁用 using directive</span></h3><p>ID_forbidUsingDirectives&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: global suggestion</p><hr/><p>通过 using directive 将其他命名空间中的名称一并引入当前命名空间，是对命名空间机制的破坏，会造成难以预料的冲突与混乱。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In global namespace</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;           <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> myspace;       <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> myspace &#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> hisspace   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数作用域内可适当放宽要求，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void foo() &#123;</span><br><span class="line">    using namespace myspace;   // Let it go</span><br><span class="line"></span><br><span class="line">    type x;                    // Using myspace::type</span><br><span class="line">    some_fun(x);               // Using mysapce::some_fun</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议用 using declaration 代替 using directive：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void foo() &#123;</span><br><span class="line">    using myspace::type;       // Compliant</span><br><span class="line">    using myspace::some_fun;   // Compliant</span><br><span class="line"></span><br><span class="line">    type x;</span><br><span class="line">    some_fun(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-50"><a href="#相关-50" class="headerlink" title="相关"></a>相关</h4><p>ID_usingNamespaceInHeader<br><br/></p><h4 id="参考-72"><a href="#参考-72" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines SF.6<br>MISRA C++ 2008 7-3-4<br><br/><br><br/></p><h3 id="▌R4-13-避免无效的-using-directive"><a href="#▌R4-13-避免无效的-using-directive" class="headerlink" title="▌R4.13 避免无效的 using directive"></a><span id="usingself">▌R4.13 避免无效的 using directive</span></h3><p>ID_usingSelf&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: global warning</p><hr/><p>用 using directive 引用当前命名空间属于无效代码，可能意味着某种错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> NS</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> NS;  <span class="comment">// Non-compliant, meaningless</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><br/><h3 id="▌R4-14-不应定义全局-inline-命名空间"><a href="#▌R4-14-不应定义全局-inline-命名空间" class="headerlink" title="▌R4.14 不应定义全局 inline 命名空间"></a><span id="topinlinenamespace">▌R4.14 不应定义全局 inline 命名空间</span></h3><p>ID_topInlineNamespace&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: global suggestion</p><hr/><p>定义全局 inline 命名空间相当于没有命名空间，应在普通命名空间之内使用 inline 命令空间。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> V0 &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">namespace</span> V1 &#123;  <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该用普通命名空间加以限定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">namespace NS</span><br><span class="line">&#123;</span><br><span class="line">    namespace V0 &#123;</span><br><span class="line">        int foo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inline namespace V1 &#123;  // Compliant</span><br><span class="line">        int foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><br/><h3 id="▌R4-15-不可修改-std-命名空间"><a href="#▌R4-15-不可修改-std-命名空间" class="headerlink" title="▌R4.15 不可修改 std 命名空间"></a><span id="stdnamespacemodified">▌R4.15 不可修改 std 命名空间</span></h3><p>ID_stdNamespaceModified&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: global warning</p><hr/><p>可以为用户定义的类型特化某些标准模板类，除此之外对 std 命名空间添加、修改甚至删除任何代码所导致的后果都是标准未定义的。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyType</span> &#123; .... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> std</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> MyType&amp; x)</span></span>;   <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;&gt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">hash</span>&lt;MyType&gt; &#123;</span><br><span class="line">        <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> MyType&amp; x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">foo</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中对 hash 标准模板类的特化是可被允许的，但在 std 命名空间中添加的 foo 函数是不被允许的。  </p><p>应去掉 std 命名空间作用域声明，改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">size_t foo(const MyType&amp; x);   // OK</span><br><span class="line"></span><br><span class="line">template &lt;&gt;</span><br><span class="line">struct std::hash&lt;MyType&gt; &#123;</span><br><span class="line">    size_t operator()(const MyType&amp; x) const &#123;</span><br><span class="line">        return foo(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-48"><a href="#依据-48" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2011 17.6.4.2.1(1 2)-undefined<br>ISO&#x2F;IEC 14882:2017 20.5.4.2.1(1 2)-undefined<br><br/></p><h4 id="参考-73"><a href="#参考-73" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT DCL58-CPP<br><br/><br><br/></p><h2 id="5-Type"><a href="#5-Type" class="headerlink" title="5. Type"></a><span id="type">5. Type</span></h2><h3 id="5-1-Class"><a href="#5-1-Class" class="headerlink" title="5.1 Class"></a><span id="type.class">5.1 Class</span></h3><h3 id="▌R5-1-1-类的非常量数据成员均应为-private"><a href="#▌R5-1-1-类的非常量数据成员均应为-private" class="headerlink" title="▌R5.1.1 类的非常量数据成员均应为 private"></a><span id="nonprivatedata">▌R5.1.1 类的非常量数据成员均应为 private</span></h3><p>ID_nonPrivateData&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: type suggestion</p><hr/><p>类的数据成员均应设为 private，对外统一由成员函数提供访问方法，且应避免返回 private 成员的非常量引用或指针。  </p><p>将类的所有接口都实现为成员函数，由成员函数按指定逻辑读写数据，以便保证有效地改变对象状态。良好的接口设计会对代码的职责进行合理划分，显著提升可维护性。理想状态下，当有错误需要修正或有功能需要调整时，只改动相关接口的实现即可，调用接口的代码不需要改动，从而将改动降到最低。这种设计的基础便是将数据设为 private，只能由本类的成员函数访问，否则数据可被各个模块随意读写，当有一处需要改动时，很难控制其影响范围。  </p><p>常量数据成员不可被改变，所以可不受本规则约束。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> *p, n;   <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> n): <span class="built_in">p</span>(<span class="keyword">new</span> <span class="type">int</span>[n]), <span class="built_in">n</span>(n) &#123;&#125;</span><br><span class="line">   ~<span class="built_in">A</span>() &#123; <span class="keyword">delete</span>[] p; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中类的数据成员 p 指向动态分配的内存区域，n 记录区域大小，p 和 n 之间存在紧密的逻辑关系，这种内在关系应由成员函数统一维护，不暴露给类的使用者，这便是面向对象的封装理念，也是 C++ 语言的核心理念之一。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> *p, n;   <span class="comment">// Compliant</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> n): <span class="built_in">p</span>(<span class="keyword">new</span> <span class="type">int</span>[n]), <span class="built_in">n</span>(n) &#123;&#125;</span><br><span class="line">   ~<span class="built_in">A</span>() &#123; <span class="keyword">delete</span>[] p; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span>* <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> p; &#125;     <span class="comment">// Interfaces for members</span></span><br><span class="line">    <span class="function"><span class="type">int</span>* <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> p + n; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样数据成员不能被外界直接访问，成员之间的关系也不会被随意打破，显著提升可维护性。<br><br/><br><br/></p><h4 id="相关-51"><a href="#相关-51" class="headerlink" title="相关"></a>相关</h4><p>ID_protectedData<br>ID_mixPublicPrivateData<br><br/></p><h4 id="参考-74"><a href="#参考-74" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 11-0-1<br><br/><br><br/></p><h3 id="▌R5-1-2-类的非常量数据成员不应定义为-protected"><a href="#▌R5-1-2-类的非常量数据成员不应定义为-protected" class="headerlink" title="▌R5.1.2 类的非常量数据成员不应定义为 protected"></a><span id="protecteddata">▌R5.1.2 类的非常量数据成员不应定义为 protected</span></h3><p>ID_protectedData&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: type suggestion</p><hr/><p>protected 数据成员在派生类中仍可被随意读写，破坏了封装理念。  </p><p>本规则是 ID_nonPrivateData 的特化，关于封装的进一步讨论可参见 ID_nonPrivateData。  </p><p>常量数据成员不可被改变，所以可不受本规则约束。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    ....</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> data;   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>应改为由接口访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    ....</span><br><span class="line">protected:</span><br><span class="line">    int access_data();   // Interfaces for data</span><br><span class="line">private:</span><br><span class="line">    int data;   // Compliant</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-52"><a href="#相关-52" class="headerlink" title="相关"></a>相关</h4><p>ID_mixPublicPrivateData<br>ID_nonPrivateData<br><br/></p><h4 id="参考-75"><a href="#参考-75" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.9<br>C++ Core Guidelines C.133<br><br/><br><br/></p><h3 id="▌R5-1-3-类不应既有-public-数据成员又有-private-数据成员"><a href="#▌R5-1-3-类不应既有-public-数据成员又有-private-数据成员" class="headerlink" title="▌R5.1.3 类不应既有 public 数据成员又有 private 数据成员"></a><span id="mixpublicprivatedata">▌R5.1.3 类不应既有 public 数据成员又有 private 数据成员</span></h3><p>ID_mixPublicPrivateData&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: type suggestion</p><hr/><p>类的设计应遵循：  </p><ul><li>成员之间没有依赖关系，且都可以随意被读写时，则都应声明为 public  </li><li>成员之间有依赖关系，或成员的状态会影响到整个对象的状态时，则都应声明为 private</li></ul><p>否则应对类进行改造或拆分。  </p><p>面向对象的封装理念更倾向于将所有数据成员都设为 private，由成员函数按指定逻辑控制每个成员的读写方法，以供外部访问，对代码的职责进行有效地划分，从而提高可维护性并降低风险，关于封装的进一步讨论可参见 ID_nonPrivateData。  </p><p>常量数据成员不可被改变，所以可不受本规则约束。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;  <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    ....</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;  <span class="comment">// Compliant</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">method_for_n</span><span class="params">()</span></span>;</span><br><span class="line">    ....</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> n, d;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-53"><a href="#相关-53" class="headerlink" title="相关"></a>相关</h4><p>ID_nonPrivateData<br>ID_protectedData<br><br/></p><h4 id="参考-76"><a href="#参考-76" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.9<br>C++ Core Guidelines C.134<br><br/><br><br/></p><h3 id="▌R5-1-4-有虚函数的基类应具有虚析构函数"><a href="#▌R5-1-4-有虚函数的基类应具有虚析构函数" class="headerlink" title="▌R5.1.4 有虚函数的基类应具有虚析构函数"></a><span id="missingvirtualdestructor">▌R5.1.4 有虚函数的基类应具有虚析构函数</span></h3><p>ID_missingVirtualDestructor&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: type warning</p><hr/><p>为了避免意料之外的资源泄漏，有虚函数的基类都应该具有虚析构函数。  </p><p>通过基类指针析构派生类对象时，如果基类没有虚析构函数会导致标准未定义的行为，无法正确执行派生类的析构函数。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() = <span class="keyword">default</span>;</span><br><span class="line">   ~<span class="built_in">A</span>() = <span class="keyword">default</span>;          <span class="comment">// Non-compliant, missing ‘virtual’</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A &#123;</span><br><span class="line">    <span class="type">int</span> *m, n;              <span class="comment">// New resource</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>(<span class="type">int</span> s): <span class="built_in">m</span>(<span class="keyword">new</span> <span class="type">int</span>[s]), <span class="built_in">n</span>(s) &#123;&#125;</span><br><span class="line">   ~<span class="built_in">B</span>() &#123; <span class="keyword">delete</span>[] m; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> n; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* p = <span class="keyword">new</span> <span class="built_in">B</span>(<span class="number">10</span>);</span><br><span class="line">....</span><br><span class="line"><span class="keyword">delete</span> p;                   <span class="comment">// Undefined behavior, may leak</span></span><br></pre></td></tr></table></figure><p>由于基类 A 的析构函数不是虚函数，delete p 只调用了基类析构函数，派生类对象的资源没有得到释放。  </p><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class C &#123;</span><br><span class="line">    ....</span><br><span class="line">protected:</span><br><span class="line">   ~C();     // Compliant</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果有意阻止外界通过基类指针析构对象，如析构函数是 protected，可不受本规则限制。<br><br/><br><br/></p><h4 id="依据-49"><a href="#依据-49" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 5.3.5(3)-undefined<br>ISO&#x2F;IEC 14882:2003 12.4(7)<br>ISO&#x2F;IEC 14882:2011 5.3.5(3)-undefined<br>ISO&#x2F;IEC 14882:2011 12.4(9)<br><br/></p><h4 id="参考-77"><a href="#参考-77" class="headerlink" title="参考"></a>参考</h4><p>CWE-1045<br>CWE-1079<br>CWE-1087<br>C++ Core Guidelines C.35<br>C++ Core Guidelines C.127<br><br/><br><br/></p><h3 id="▌R5-1-5-用虚基类避免冗余的基类实例"><a href="#▌R5-1-5-用虚基类避免冗余的基类实例" class="headerlink" title="▌R5.1.5 用虚基类避免冗余的基类实例"></a><span id="diamondinheritance">▌R5.1.5 用虚基类避免冗余的基类实例</span></h3><p>ID_diamondInheritance&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: type suggestion</p><hr/><p>当一个类有多个基类，这些基类又继承自同一个类时，会产生多个不同的基类实例，造成逻辑上的冗余和不必要的存储开销。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">public</span> A &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(D&amp; d)</span> </span>&#123;</span><br><span class="line">    d.i = <span class="number">1</span>;       <span class="comment">// Compile error</span></span><br><span class="line">    d.B::i = <span class="number">1</span>;    <span class="comment">// Odd</span></span><br><span class="line">    d.C::i = <span class="number">1</span>;    <span class="comment">// Odd</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 D 类对象 d 中，基类 A 的成员 i 有两个不同的实例，d 不能直接访问 i，只能通过 d.B::i 或 d.C::i 这种怪异的方式访问。  </p><p>将共同的基类设为虚基类可以解决这种问题： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class B: virtual public A &#123;&#125;;</span><br><span class="line">class C: virtual public A &#123;&#125;;</span><br><span class="line">class D: public B, public C &#123;&#125;;</span><br><span class="line"></span><br><span class="line">void foo(D&amp; d) &#123;</span><br><span class="line">    d.i = 1;       // OK</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，直接将虚基类指针转为派生类指针会导致标准未定义的行为，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void bar(A* a) &#123;</span><br><span class="line">    B* p = (B*)a;  // Undefined behavior</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种转换一般不会通过编译，但标准并未要求编译器必须阻止这种转换，改用 dynamic_cast 可解决这些问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void bar(A* a) &#123;</span><br><span class="line">    B* p = dynamic_cast&lt;B*&gt;(a);  // OK</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-50"><a href="#依据-50" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 5.2.9(5 8)-undefined<br>ISO&#x2F;IEC 14882:2011 5.2.9(11 12)-undefined<br>ISO&#x2F;IEC 14882:2011 10.1(4 5 6 7)<br><br/></p><h4 id="参考-78"><a href="#参考-78" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.137<br><br/><br><br/></p><h3 id="▌R5-1-6-存在析构函数或拷贝赋值运算符时，不应缺少拷贝构造函数"><a href="#▌R5-1-6-存在析构函数或拷贝赋值运算符时，不应缺少拷贝构造函数" class="headerlink" title="▌R5.1.6 存在析构函数或拷贝赋值运算符时，不应缺少拷贝构造函数"></a><span id="missingcopyconstructor">▌R5.1.6 存在析构函数或拷贝赋值运算符时，不应缺少拷贝构造函数</span></h3><p>ID_missingCopyConstructor&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: type warning</p><hr/><p>三个紧密相关的函数：  </p><ol><li>拷贝构造函数  </li><li>拷贝赋值运算符  </li><li>析构函数</li></ol><p>当这三个函数中的任何一个函数被定义时，说明对象在资源管理等方面有特定的需求，其他两个函数也需要被定义，否则难以适应各种应用场景，易产生意料之外的错误，这种规则称为“<a href="https://en.wikipedia.org/wiki/Rule_of_three_(C%2B%2B_programming)">Rule of three</a>”。  </p><p>如果缺少某个函数，编译器会生成相关默认函数，但其特定需求不会被实现。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>   <span class="comment">// Non-compliant</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>* p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;      <span class="comment">// Missing copy constructor and assignment operator</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    <span class="function">A <span class="title">b</span><span class="params">(a)</span></span>;   <span class="comment">// Shallow copy</span></span><br><span class="line">    ....</span><br><span class="line">&#125;             <span class="comment">// Double free</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(A&amp; a, A&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = b;    <span class="comment">// Memory leak</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中的类有析构函数，但没有拷贝构造函数和拷贝赋值运算符，只能进行变量值的复制，使多个对象的资源指针指向同一块内存区域，导致重复释放和内存泄漏，所以应定义拷贝构造函数和拷贝赋值运算符重新分配内存并复制数据。  </p><p>同理，在遵循 C++11 及之后标准的代码中：  </p><ol><li>拷贝构造函数  </li><li>拷贝赋值运算符  </li><li>析构函数  </li><li>移动构造函数  </li><li>移动赋值运算符</li></ol><p>当定义了这五个函数中的任何一个函数时，其他四个函数也需要定义，详见 ID_violateRuleOfFive。<br><br/><br><br/></p><h4 id="相关-54"><a href="#相关-54" class="headerlink" title="相关"></a>相关</h4><p>ID_missingDestructor<br>ID_missingCopyAssignOperator<br>ID_violateRuleOfFive<br><br/></p><h4 id="参考-79"><a href="#参考-79" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.21<br><br/><br><br/></p><h3 id="▌R5-1-7-存在拷贝构造函数或析构函数时，不应缺少拷贝赋值运算符"><a href="#▌R5-1-7-存在拷贝构造函数或析构函数时，不应缺少拷贝赋值运算符" class="headerlink" title="▌R5.1.7 存在拷贝构造函数或析构函数时，不应缺少拷贝赋值运算符"></a><span id="missingcopyassignoperator">▌R5.1.7 存在拷贝构造函数或析构函数时，不应缺少拷贝赋值运算符</span></h3><p>ID_missingCopyAssignOperator&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: type warning</p><hr/><p>三个紧密相关的函数：  </p><ol><li>拷贝构造函数  </li><li>拷贝赋值运算符  </li><li>析构函数</li></ol><p>当这三个函数中的任何一个函数被定义时，其他两个函数也需要被定义，详见“<a href="https://en.wikipedia.org/wiki/Rule_of_three_(C%2B%2B_programming)">Rule of three</a>”。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;  <span class="comment">// Non-compliant, missing copy assignment operator</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>();</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">const</span> A&amp;);</span><br><span class="line">   ~<span class="built_in">A</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>应明确定义赋值运算符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;  // Compliant</span><br><span class="line">public:</span><br><span class="line">    A();</span><br><span class="line">    A(const A&amp;);</span><br><span class="line">   ~A();</span><br><span class="line"></span><br><span class="line">    A&amp; operator = (const A&amp;);  // Copy assignment operator</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-55"><a href="#相关-55" class="headerlink" title="相关"></a>相关</h4><p>ID_missingDestructor<br>ID_missingCopyConstructor<br>ID_violateRuleOfFive<br><br/></p><h4 id="参考-80"><a href="#参考-80" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.21<br><br/><br><br/></p><h3 id="▌R5-1-8-存在拷贝构造函数或拷贝赋值运算符时，不应缺少析构函数"><a href="#▌R5-1-8-存在拷贝构造函数或拷贝赋值运算符时，不应缺少析构函数" class="headerlink" title="▌R5.1.8 存在拷贝构造函数或拷贝赋值运算符时，不应缺少析构函数"></a><span id="missingdestructor">▌R5.1.8 存在拷贝构造函数或拷贝赋值运算符时，不应缺少析构函数</span></h3><p>ID_missingDestructor&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: type warning</p><hr/><p>三个紧密相关的函数：  </p><ol><li>拷贝构造函数  </li><li>拷贝赋值运算符  </li><li>析构函数</li></ol><p>当这三个函数中的任何一个函数被定义时，其他两个函数也需要被定义，详见“<a href="https://en.wikipedia.org/wiki/Rule_of_three_(C%2B%2B_programming)">Rule of three</a>”。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;  <span class="comment">// Non-compliant, missing destructor</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>();</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">const</span> A&amp;);</span><br><span class="line">    A&amp; <span class="keyword">operator</span> = (<span class="type">const</span> A&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>应明确定义析构函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;  // Compliant</span><br><span class="line">public:</span><br><span class="line">    A();</span><br><span class="line">    A(const A&amp;);</span><br><span class="line">    A&amp; operator = (const A&amp;);</span><br><span class="line"></span><br><span class="line">   ~A();   // Destructor</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-56"><a href="#相关-56" class="headerlink" title="相关"></a>相关</h4><p>ID_missingCopyConstructor<br>ID_missingCopyAssignOperator<br>ID_violateRuleOfFive<br><br/></p><h4 id="参考-81"><a href="#参考-81" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.21<br>C++ Core Guidelines C.30<br>C++ Core Guidelines C.33<br><br/><br><br/></p><h3 id="▌R5-1-9-存在任一拷贝、移动、析构相关的函数时，应定义所有相关函数"><a href="#▌R5-1-9-存在任一拷贝、移动、析构相关的函数时，应定义所有相关函数" class="headerlink" title="▌R5.1.9 存在任一拷贝、移动、析构相关的函数时，应定义所有相关函数"></a><span id="violateruleoffive">▌R5.1.9 存在任一拷贝、移动、析构相关的函数时，应定义所有相关函数</span></h3><p>ID_violateRuleOfFive&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: type warning</p><hr/><p>五个紧密相关的函数：  </p><ol><li>拷贝构造函数  </li><li>拷贝赋值运算符  </li><li>析构函数  </li><li>移动构造函数  </li><li>移动赋值运算符</li></ol><p>当这五个函数中的任何一个函数被定义时，说明对象在资源管理等方面有特定的需求，其他四个函数也需要被定义，否则难以适应各种应用场景，易产生意料之外的错误，这种规则称为“<a href="https://en.wikipedia.org/wiki/Rule_of_three_(C%2B%2B_programming)#Rule_of_Five">Rule of five</a>”。如果缺少某个函数，编译器会生成相关默认函数，但其特定需求不会被实现。  </p><p>如果确实不需要某个函数，也应将其明确地设定为 private 或 &#x3D;delete，如果确实只需要默认处理，应将其声明为 &#x3D;default，这样可明确对象的行为，规避意料之外的错误。  </p><p>本规则适用于遵循 C++11 及之后标准的代码，对于遵循 C++03 及之前标准的代码，本规则特化为 ID_missingCopyConstructor、ID_missingCopyAssignOperator、ID_missingDestructor。  </p><p>另外，如果类只负责成员对象的包装或组合而没有特殊的复制、移动、析构需求时，这些函数就都不要定义，参见 ID_violateRuleOfZero。<br><br/><br><br/></p><h4 id="相关-57"><a href="#相关-57" class="headerlink" title="相关"></a>相关</h4><p>ID_missingCopyConstructor<br>ID_missingCopyAssignOperator<br>ID_missingDestructor<br>ID_violateRuleOfZero<br><br/></p><h4 id="参考-82"><a href="#参考-82" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.21<br><br/><br><br/></p><h3 id="▌R5-1-10-避免重复实现由默认拷贝、移动、析构函数完成的功能"><a href="#▌R5-1-10-避免重复实现由默认拷贝、移动、析构函数完成的功能" class="headerlink" title="▌R5.1.10 避免重复实现由默认拷贝、移动、析构函数完成的功能"></a><span id="violateruleofzero">▌R5.1.10 避免重复实现由默认拷贝、移动、析构函数完成的功能</span></h3><p>ID_violateRuleOfZero&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: type warning</p><hr/><p>当类只负责成员对象的包装或组合而没有特殊的复制、移动、析构需求时，不应定义下列函数：  </p><ol><li>拷贝构造函数  </li><li>拷贝赋值运算符  </li><li>析构函数  </li><li>移动构造函数  </li><li>移动赋值运算符</li></ol><p>应由编译器生成相关默认函数，否则会产生多余的代码，增加维护成本，这种规则称为“<a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-zero">Rule of zero</a>”。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    string a, b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">const</span> A&amp; rhs): <span class="built_in">a</span>(rhs.a), <span class="built_in">b</span>(rhs.b) &#123;  <span class="comment">// Redundant</span></span><br><span class="line">    &#125;</span><br><span class="line">    A&amp; <span class="keyword">operator</span> = (<span class="type">const</span> A&amp; rhs) &#123;  <span class="comment">// Redundant</span></span><br><span class="line">        a = rhs.a;</span><br><span class="line">        b = rhs.b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   ~<span class="built_in">A</span>() &#123;  <span class="comment">// Redundant</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中的类只涉及字符串对象的组合，复制、移动和析构可交由成员对象完成，其拷贝构造函数、赋值运算符以及析构函数是多余的，应该去掉，编译器会进行更好地处理。<br><br/><br><br/></p><h4 id="相关-58"><a href="#相关-58" class="headerlink" title="相关"></a>相关</h4><p>ID_violateRuleOfFive<br><br/></p><h4 id="参考-83"><a href="#参考-83" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.21<br><br/><br><br/></p><h3 id="▌R5-1-11-可接受一个参数的构造函数需用-explicit-关键字限定"><a href="#▌R5-1-11-可接受一个参数的构造函数需用-explicit-关键字限定" class="headerlink" title="▌R5.1.11 可接受一个参数的构造函数需用 explicit 关键字限定"></a><span id="missingexplicitconstructor">▌R5.1.11 可接受一个参数的构造函数需用 explicit 关键字限定</span></h3><p>ID_missingExplicitConstructor&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: type suggestion</p><hr/><p>为了避免意料之外的类型转换，可接受一个参数的构造函数应该用 explicit 关键字限定。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">String</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">int</span> capacity);   <span class="comment">// Non-compliant, missing ‘explicit’</span></span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> String&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">foo</span>(<span class="number">100</span>);   <span class="comment">// Can be compiled, but very odd</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 String 类的构造函数接受一个 int 型参数，foo(100) 相当于将 100 隐式转为 String 类的对象，这种隐式转换是怪异的，也往往意味着意料之外的错误。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">String</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">String</span><span class="params">(<span class="type">int</span> capacity)</span></span>;   <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样 foo(100) 这种写法便不会通过编译。  </p><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class String &#123;</span><br><span class="line">public:</span><br><span class="line">    String(const String&amp;);   // Explicit or not depends on your design intent</span><br><span class="line">    String(String&amp;&amp;);        // ditto</span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>拷贝、移动构造函数可不受本规则约束，如果将拷贝、移动构造函数声明为 explicit 则无法再按值传递参数或按值返回对象。在类的接口设计中，应尽量减少隐式转换以避免不易察觉的问题。<br><br/><br><br/></p><h4 id="相关-59"><a href="#相关-59" class="headerlink" title="相关"></a>相关</h4><p>ID_missingExplicitConvertor<br><br/></p><h4 id="参考-84"><a href="#参考-84" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.46<br>MISRA C++ 2008 12-1-3<br><br/><br><br/></p><h3 id="▌R5-1-12-重载的类型转换运算符需用-explicit-关键字限定"><a href="#▌R5-1-12-重载的类型转换运算符需用-explicit-关键字限定" class="headerlink" title="▌R5.1.12 重载的类型转换运算符需用 explicit 关键字限定"></a><span id="missingexplicitconvertor">▌R5.1.12 重载的类型转换运算符需用 explicit 关键字限定</span></h3><p>ID_missingExplicitConvertor&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: type suggestion</p><hr/><p>为了避免意料之外的类型转换，重载的类型转换运算符需用 explicit 关键字限定。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">operator</span> <span class="type">char</span>*();   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">A <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">foo</span>();   <span class="comment">// Invalid address returned</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 foo 返回临时对象，类型转换运算符被隐式调用，然而当 bar 返回后，临时对象被销毁，返回的指针是无效的。  </p><p>将类型转换运算符用 explicit 关键字限定，有问题的代码便不会通过编译：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct A &#123;</span><br><span class="line">    ....</span><br><span class="line">    explicit operator char*();   // Compliant</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在类的接口设计中，应尽量减少隐式转换以避免不易察觉的问题。<br><br/><br><br/></p><h4 id="相关-60"><a href="#相关-60" class="headerlink" title="相关"></a>相关</h4><p>ID_missingExplicitConstructor<br><br/></p><h4 id="参考-85"><a href="#参考-85" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.164<br><br/><br><br/></p><h3 id="▌R5-1-13-不应过度使用-explicit-关键字"><a href="#▌R5-1-13-不应过度使用-explicit-关键字" class="headerlink" title="▌R5.1.13 不应过度使用 explicit 关键字"></a><span id="excessiveexplicit">▌R5.1.13 不应过度使用 explicit 关键字</span></h3><p>ID_excessiveExplicit&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: type warning</p><hr/><p>对类的拷贝、移动以及不接受 1 个参数的构造函数一般不用 explicit 限定，否则有损代码的易用性和可扩展性。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">A</span><span class="params">(<span class="type">const</span> A&amp;)</span></span>;  <span class="comment">// In general, ‘explicit’ is not required</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">A</span><span class="params">(A&amp;&amp;)</span></span>;       <span class="comment">// Ditto</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">A</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;  <span class="comment">// Ditto</span></span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当类的拷贝、移动构造函数被 explicit 限定时，无法再按值传递参数或按值返回对象，当不接受 1 个参数的构造函数被 explicit 限定时，无法再用初始化列表定义临时对象，如下代码将无法通过编译：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void foo(A);</span><br><span class="line">void bar(const A&amp;);</span><br><span class="line"></span><br><span class="line">A a(1, 2);</span><br><span class="line"></span><br><span class="line">foo(a);       // Compile error</span><br><span class="line">bar(&#123;3, 4&#125;);  // Compile error</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-86"><a href="#参考-86" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.46<br><br/><br><br/></p><h3 id="▌R5-1-14-带模板的赋值运算符不应与拷贝或移动赋值运算符混淆"><a href="#▌R5-1-14-带模板的赋值运算符不应与拷贝或移动赋值运算符混淆" class="headerlink" title="▌R5.1.14 带模板的赋值运算符不应与拷贝或移动赋值运算符混淆"></a><span id="roughtemplateassignoperator">▌R5.1.14 带模板的赋值运算符不应与拷贝或移动赋值运算符混淆</span></h3><p>ID_roughTemplateAssignOperator&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: type warning</p><hr/><p>带模板的赋值运算符不应与拷贝或移动赋值运算符混淆，存在带模板的赋值运算符时应明确声明拷贝和移动赋值运算符。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>   <span class="comment">// Non-compliant, missing copy and move assignment operators</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>* dat;   <span class="comment">// Need deep copy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>();</span><br><span class="line">   ~<span class="built_in">A</span>();</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">    A&amp; <span class="keyword">operator</span> = (<span class="type">const</span> T&amp; a) &#123;   <span class="comment">// Not a copy assignment operator</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">do_copy</span>(a.dat);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">    A&amp; <span class="keyword">operator</span> = (T&amp;&amp; a) &#123;   <span class="comment">// Not a move assignment operator</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">do_move</span>(a.dat);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A&amp; x, A&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = y;   <span class="comment">// Not a deep copy</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设例中的类需要深拷贝，标准规定即使带模板的赋值运算符在功能上可以满足拷贝或移动赋值运算符的需求，也不能作为拷贝或移动赋值运算符，故其拷贝和移动赋值运算符仍然是默认的，无法完成深拷贝以及正确的数据移动。  </p><p>应明确声明拷贝和移动赋值运算符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class A   // Compliant</span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">    A&amp; operator = (const A&amp;);</span><br><span class="line">    A&amp; operator = (A&amp;&amp;);  </span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-61"><a href="#相关-61" class="headerlink" title="相关"></a>相关</h4><p>ID_roughTemplateConstructor<br><br/></p><h4 id="依据-51"><a href="#依据-51" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 12.8(9)<br>ISO&#x2F;IEC 14882:2011 12.8(17)<br>ISO&#x2F;IEC 14882:2011 12.8(19)<br><br/></p><h4 id="参考-87"><a href="#参考-87" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 14-5-3<br><br/><br><br/></p><h3 id="▌R5-1-15-带模板的构造函数不应与拷贝或移动构造函数混淆"><a href="#▌R5-1-15-带模板的构造函数不应与拷贝或移动构造函数混淆" class="headerlink" title="▌R5.1.15 带模板的构造函数不应与拷贝或移动构造函数混淆"></a><span id="roughtemplateconstructor">▌R5.1.15 带模板的构造函数不应与拷贝或移动构造函数混淆</span></h3><p>ID_roughTemplateConstructor&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: type warning</p><hr/><p>带模板的构造函数不应与拷贝或移动构造函数混淆，存在带模板的构造函数时应明确声明拷贝和移动构造函数。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>   <span class="comment">// Non-compliant, missing copy and move constructors</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>* dat;   <span class="comment">// Need deep copy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>();</span><br><span class="line">   ~<span class="built_in">A</span>();</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="built_in">A</span>(<span class="type">const</span> T&amp; a) &#123;   <span class="comment">// Not a copy constructor</span></span><br><span class="line">        <span class="built_in">do_copy</span>(a.dat);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="built_in">A</span>(T&amp;&amp; a) &#123;   <span class="comment">// Not a move constructor</span></span><br><span class="line">        <span class="built_in">do_move</span>(a.dat);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">A <span class="title">y</span><span class="params">(x)</span></span>;   <span class="comment">// Not a deep copy</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设例中的类需要深拷贝，标准规定即使带模板的构造函数在功能上可以满足拷贝或移动构造函数的需求，也不能作为拷贝或移动构造函数，故其拷贝和移动构造函数仍然是默认的，无法完成深拷贝以及正确的数据移动。  </p><p>应明确声明拷贝和移动构造函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class A   // Compliant</span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">    A(const A&amp;);</span><br><span class="line">    A(A&amp;&amp;);</span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-62"><a href="#相关-62" class="headerlink" title="相关"></a>相关</h4><p>ID_roughTemplateAssignOperator<br><br/></p><h4 id="依据-52"><a href="#依据-52" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 12.8(2)<br>ISO&#x2F;IEC 14882:2011 12.8(2)<br>ISO&#x2F;IEC 14882:2011 12.8(3)<br><br/></p><h4 id="参考-88"><a href="#参考-88" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 14-5-2<br><br/><br><br/></p><h3 id="▌R5-1-16-抽象类禁用拷贝和移动赋值运算符"><a href="#▌R5-1-16-抽象类禁用拷贝和移动赋值运算符" class="headerlink" title="▌R5.1.16 抽象类禁用拷贝和移动赋值运算符"></a><span id="unsuitableassignoperator">▌R5.1.16 抽象类禁用拷贝和移动赋值运算符</span></h3><p>ID_unsuitableAssignOperator&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: type warning</p><hr/><p>抽象类只能作为基类，没有独立的对象，调用拷贝或移动赋值运算符会造成数据不完整。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">A</span>() = <span class="number">0</span>;</span><br><span class="line">    A&amp; <span class="keyword">operator</span> = (<span class="type">const</span> A&amp;);   <span class="comment">// Non-compliant</span></span><br><span class="line">    A&amp; <span class="keyword">operator</span> = (A&amp;&amp;);        <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A&amp; x, A&amp; y)</span> </span>&#123;</span><br><span class="line">    x = y;               <span class="comment">// Incomplete assignment</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 foo 函数的参数只能是 A 的派生类对象，派生类对象调用基类的拷贝赋值运算符会得到不完整的复制结果。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">A</span>() = <span class="number">0</span>;</span><br><span class="line">    A&amp; <span class="keyword">operator</span> = (<span class="type">const</span> A&amp;) = <span class="keyword">delete</span>;   <span class="comment">// Compliant</span></span><br><span class="line">    A&amp; <span class="keyword">operator</span> = (A&amp;&amp;) = <span class="keyword">delete</span>;        <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>将抽象类的拷贝和移动赋值运算符设为 &#x3D;delete 或 private，可在编译期阻止不完整的复制和移动。<br><br/><br><br/></p><h4 id="参考-89"><a href="#参考-89" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.67<br>MISRA C++ 2008 12-8-2<br><br/><br><br/></p><h3 id="▌R5-1-17-数据成员的数量应在规定范围之内"><a href="#▌R5-1-17-数据成员的数量应在规定范围之内" class="headerlink" title="▌R5.1.17 数据成员的数量应在规定范围之内"></a><span id="toomanyfields">▌R5.1.17 数据成员的数量应在规定范围之内</span></h3><p>ID_tooManyFields&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: type warning</p><hr/><p>类或联合体的数据成员过多意味着一个逻辑或功能单位承担了过多的职责，违反了模块化设计理念，是难以维护的。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ... 3000 members ...</span></span><br><span class="line">    <span class="comment">// Who has the courage to read?</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="title class_">U</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ... 3000 members ...</span></span><br><span class="line">    <span class="comment">// Here is hell!</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="配置-7"><a href="#配置-7" class="headerlink" title="配置"></a>配置</h4><p>maxClassFieldsCount：类数据成员的数量上限，超过则报出<br>maxUnionFieldsCount：联合体数据成员的数量上限，超过则报出<br><br/><br><br/></p><h3 id="▌R5-1-18-数据成员之间的填充数据不应被忽视"><a href="#▌R5-1-18-数据成员之间的填充数据不应被忽视" class="headerlink" title="▌R5.1.18 数据成员之间的填充数据不应被忽视"></a><span id="ignorepaddingdata">▌R5.1.18 数据成员之间的填充数据不应被忽视</span></h3><p>ID_ignorePaddingData&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: type warning</p><hr/><p>成员之间存在填充数据，且没有声明对齐方式时，填充数据的长度是由实现定义的，这种数据不应在不同的环境之间传输，而且应注意成员的声明顺序，避免由填充数据造成的空间浪费。  </p><p>关于填充数据的具体组织方式，详见“<a href="https://en.wikipedia.org/wiki/Data_structure_alignment">内存对齐</a>”。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    <span class="type">int8_t</span>  a;</span><br><span class="line">    <span class="type">int32_t</span> b;</span><br><span class="line">&#125; obj;</span><br><span class="line"></span><br><span class="line"><span class="built_in">recv</span>(sockfd, &amp;obj, <span class="keyword">sizeof</span> obj, flags);   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中成员 a 和 b 之间存在填充数据，但没有声明对齐方式，直接在网络上传输这种类型的对象是不符合要求的，如果发送端的对齐方式与接收端不一致就会造成混乱。  </p><p>应在发送端和接收端统一声明对齐方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct alignas(4) T &#123;   // Or use _Alignas in C</span><br><span class="line">    int8_t  a;</span><br><span class="line">    int32_t b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意，敏感数据可能会残留在填充数据中，所以当存储或传输对象前有必要清理填充数据的值，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T obj;</span><br><span class="line">memset(&amp;obj, 0, sizeof(obj));   // Required</span><br><span class="line">....</span><br><span class="line">fwrite(&amp;obj, sizeof(obj), 1, fp);</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-63"><a href="#相关-63" class="headerlink" title="相关"></a>相关</h4><p>ID_accessPaddingData<br><br/></p><h4 id="依据-53"><a href="#依据-53" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:2011 6.2.8(1)-implementation<br>ISO&#x2F;IEC 14882:2011 3.11(1)-implementation<br><br/></p><h4 id="参考-90"><a href="#参考-90" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT DCL39-C<br><br/><br><br/></p><h3 id="▌R5-1-19-常量成员函数不应返回数据成员的非常量指针或引用"><a href="#▌R5-1-19-常量成员函数不应返回数据成员的非常量指针或引用" class="headerlink" title="▌R5.1.19 常量成员函数不应返回数据成员的非常量指针或引用"></a><span id="returnnonconstdata">▌R5.1.19 常量成员函数不应返回数据成员的非常量指针或引用</span></h3><p>ID_returnNonConstData&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: type warning</p><hr/><p>如果常量成员函数返回数据成员的非常量指针或引用，既打破了常量限定，又违反了封装理念，属于不良实现方式。  </p><p>本规则是 ID_qualifierCastedAway 的特化。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span>&amp; <span class="title">foo</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>&amp;)i;   <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-64"><a href="#相关-64" class="headerlink" title="相关"></a>相关</h4><p>ID_nonPrivateData<br>ID_qualifierCastedAway<br><br/></p><h4 id="参考-91"><a href="#参考-91" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 9-3-1<br><br/><br><br/></p><h3 id="▌R5-1-20-类成员应按-public、protected、private-的顺序声明"><a href="#▌R5-1-20-类成员应按-public、protected、private-的顺序声明" class="headerlink" title="▌R5.1.20 类成员应按 public、protected、private 的顺序声明"></a><span id="accessspecifierdisorder">▌R5.1.20 类成员应按 public、protected、private 的顺序声明</span></h3><p>ID_accessSpecifierDisorder&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: type suggestion</p><hr/><p>类成员统一按 public、protected、private 的顺序声明，有利于提高可读性。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>   <span class="comment">// Bad</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">baz</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">bar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>供外部使用的 public 成员应作为重点写在前面，其次是 protected 成员，private 成员应写在最后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class A   // Good</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int foo();</span><br><span class="line"></span><br><span class="line">protected:</span><br><span class="line">    int bar();</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    int baz();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><br/><h3 id="▌R5-1-21-存在构造、析构或虚函数的类不应采用-struct-关键字"><a href="#▌R5-1-21-存在构造、析构或虚函数的类不应采用-struct-关键字" class="headerlink" title="▌R5.1.21 存在构造、析构或虚函数的类不应采用 struct 关键字"></a><span id="unsuitablestructtag">▌R5.1.21 存在构造、析构或虚函数的类不应采用 struct 关键字</span></h3><p>ID_unsuitableStructTag&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: type suggestion</p><hr/><p>简单结构体应采用 struct 关键字，具有封装或多态等特性的类应采用 class 关键字，以便提高可读性。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;     <span class="comment">// Compliant</span></span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span> &#123;     <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="built_in">B</span>();</span><br><span class="line">   ~<span class="built_in">B</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-92"><a href="#参考-92" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.2<br>C++ Core Guidelines C.8<br><br/><br><br/></p><h3 id="5-2-Enum"><a href="#5-2-Enum" class="headerlink" title="5.2 Enum"></a><span id="type.enum">5.2 Enum</span></h3><h3 id="▌R5-2-1-同类枚举项的值不应相同"><a href="#▌R5-2-1-同类枚举项的值不应相同" class="headerlink" title="▌R5.2.1 同类枚举项的值不应相同"></a><span id="duplicateenumerator">▌R5.2.1 同类枚举项的值不应相同</span></h3><p>ID_duplicateEnumerator&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: type warning</p><hr/><p>枚举项用于标记不同的事物，名称不同但值相同的枚举项往往意味着错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    red = <span class="number">1</span>,</span><br><span class="line">    yellow = <span class="number">2</span>,</span><br><span class="line">    blue = <span class="number">2</span>,    <span class="comment">// Non-compliant, see ‘yellow’</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中三个枚举项应分别表示三种颜色，但 blue 与 yellow 的值相同会造成逻辑错误。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum Fruit &#123;</span><br><span class="line">    apple,</span><br><span class="line">    pear,</span><br><span class="line">    grape,</span><br><span class="line">    favorite = grape,  // Non-compliant</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中 Fruit 定义了三种水果，而 favorite 表示最喜欢的水果，与其他枚举项不是同一层面的概念，不应聚为一类。  </p><p>应采用更结构化的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enum Fruit &#123;</span><br><span class="line">    apple, pear, grape</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Fruit favorite () &#123;</span><br><span class="line">    return grape;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-93"><a href="#参考-93" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines Enum.8<br><br/><br><br/></p><h3 id="▌R5-2-2-合理初始化各枚举项"><a href="#▌R5-2-2-合理初始化各枚举项" class="headerlink" title="▌R5.2.2 合理初始化各枚举项"></a><span id="casualinitialization">▌R5.2.2 合理初始化各枚举项</span></h3><p>ID_casualInitialization&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: type suggestion</p><hr/><p>合理初始化各枚举项，只应从下列方式中选择一种：   </p><ul><li>全不初始化  </li><li>只初始化第一个  </li><li>全部初始化为不同的值</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    red,</span><br><span class="line">    blue,</span><br><span class="line">    green,</span><br><span class="line">    yellow = <span class="number">2</span>   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    red,</span><br><span class="line">    blue,</span><br><span class="line">    green,</span><br><span class="line">    yellow   <span class="comment">// Compliant</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-65"><a href="#相关-65" class="headerlink" title="相关"></a>相关</h4><p>ID_duplicateEnumerator<br><br/></p><h4 id="参考-94"><a href="#参考-94" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 9.3<br>MISRA C++ 2008 8-5-3<br><br/><br><br/></p><h3 id="▌R5-2-3-不应使用匿名枚举声明"><a href="#▌R5-2-3-不应使用匿名枚举声明" class="headerlink" title="▌R5.2.3 不应使用匿名枚举声明"></a><span id="forbidunnamedenum">▌R5.2.3 不应使用匿名枚举声明</span></h3><p>ID_forbidUnnamedEnum&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: type suggestion</p><hr/><p>匿名枚举声明相当于在当前作用域定义常量，但类型不够明确。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> &#123; rabbit = <span class="number">0xAA</span>, carrot = <span class="number">1234</span> &#125;;  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>如果无法确定枚举类型的名称，也意味着各枚举项不应聚为一类。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> rabbit = <span class="number">0xAA</span>;  <span class="comment">// Compliant</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> carrot = <span class="number">1234</span>;  <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-95"><a href="#参考-95" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines Enum.6<br><br/><br><br/></p><h3 id="▌R5-2-4-用-enum-class-取代-enum"><a href="#▌R5-2-4-用-enum-class-取代-enum" class="headerlink" title="▌R5.2.4 用 enum class 取代 enum"></a><span id="forbidunscopedenum">▌R5.2.4 用 enum class 取代 enum</span></h3><p>ID_forbidUnscopedEnum&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: type suggestion</p><hr/><p>传统 C 枚举没有有效的类型和作用域控制，极易造成类型混淆和名称冲突，在 C++ 代码中建议改用 enum class。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">E</span> &#123;      <span class="comment">// Non-compliant</span></span><br><span class="line">    e0 = <span class="number">0</span>,</span><br><span class="line">    e1 = <span class="number">1</span>,</span><br><span class="line">    e2 = <span class="number">-1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">E <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">foo</span>()) &#123;   <span class="comment">// ‘e1’ or ‘e2’??</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传统 C 枚举值与 int 等类型可以随意转换，如果 e0 和 e2 表示某种错误情况，e1 表示正确情况，那么 bar 函数中对 foo 返回值的判断就是错误的，这也是一种常见问题，C++11 提出了 enum class 的概念加强了类型检查，提倡在新项目中尽量使用 enum class。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum class</span> <span class="title class_">E</span> &#123;   <span class="comment">// Compliant</span></span><br><span class="line">    e0 = <span class="number">0</span>,</span><br><span class="line">    e1 = <span class="number">1</span>,</span><br><span class="line">    e2 = <span class="number">-1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">foo</span>() == E::e1) &#123;   <span class="comment">// OK</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">foo</span>()) &#123;   <span class="comment">// Compile error, cannot cast the enum class casually</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-54"><a href="#依据-54" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2011 7.2(2)<br>ISO&#x2F;IEC 14882:2017 10.2(2)<br><br/></p><h4 id="参考-96"><a href="#参考-96" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines Enum.3<br><br/><br><br/></p><h3 id="5-3-Union"><a href="#5-3-Union" class="headerlink" title="5.3 Union"></a><span id="type.union">5.3 Union</span></h3><h3 id="▌R5-3-1-联合体内禁用非基本类型的对象"><a href="#▌R5-3-1-联合体内禁用非基本类型的对象" class="headerlink" title="▌R5.3.1 联合体内禁用非基本类型的对象"></a><span id="forbidnonbasicfield">▌R5.3.1 联合体内禁用非基本类型的对象</span></h3><p>ID_forbidNonBasicField&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: type warning</p><hr/><p>因为联合体成员之间共享内存地址，所以成员具有构造或析构函数时会导致混乱。  </p><p>C++98&#x2F;03 禁止具有拷贝构造函数或析构函数的对象出现在联合体中，C++11 解除了这条禁令，但在语言层面上不保障正确性，相当于把问题抛给了用户。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">U</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    string s;  <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">U</span>(<span class="type">int</span> x): <span class="built_in">i</span>(x) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">U</span>(<span class="type">const</span> <span class="type">char</span>* x) &#123;</span><br><span class="line">        <span class="keyword">new</span>(&amp;s) <span class="built_in">string</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   ~<span class="built_in">U</span>() &#123;</span><br><span class="line">        s.~<span class="built_in">string</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">U <span class="title">u</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">u.s = <span class="string">&quot;abc&quot;</span>;  <span class="comment">// No error, no warning, just crash</span></span><br></pre></td></tr></table></figure><p>示例代码在某些环境中会崩溃，原因是没能正确区分对象当前持有的类型，执行了错误的构造或析构过程。  </p><p>正确的做法是在类中用一个成员变量记录当前持有的类型，再将匿名联合体与类的构造函数以及析构函数相关联，从而根据当前持有的类型正确地初始化或销毁对象。<br><br/><br><br/></p><h4 id="依据-55"><a href="#依据-55" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:1998 9.5(1)<br>ISO&#x2F;IEC 14882:2003 9.5(1)<br>ISO&#x2F;IEC 14882:2011 9.5(2 3 4)<br><br/><br><br/></p><h3 id="▌R5-3-2-禁用在类之外定义的联合体"><a href="#▌R5-3-2-禁用在类之外定义的联合体" class="headerlink" title="▌R5.3.2 禁用在类之外定义的联合体"></a><span id="forbidnakedunion">▌R5.3.2 禁用在类之外定义的联合体</span></h3><p>ID_forbidNakedUnion&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: type suggestion</p><hr/><p>联合体各成员共享存储地址，易引发意料之外的错误。如果一定要使用联合体，需对其进行一定的封装，避免对成员的错误访问。  </p><p>不应出现：  </p><ul><li>在命名空间作用域内定义的联合体  </li><li>在类中定义的具有 public 访问权限的联合体</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">U</span> &#123;      <span class="comment">// Non-compliant, global union</span></span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">union</span> &#123;    <span class="comment">// Non-compliant, public union</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ....       <span class="comment">// Interfaces about the union</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">union</span> &#123;    <span class="comment">// Compliant, the union is under control</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类的 public 数据成员本来就违反了封装原则，如果这种数据成员又处于联合体中，会进一步增加风险。<br><br/><br><br/></p><h4 id="相关-66"><a href="#相关-66" class="headerlink" title="相关"></a>相关</h4><p>ID_forbidUnion<br><br/></p><h4 id="参考-97"><a href="#参考-97" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.181<br>MISRA C 2004 18.4<br>MISRA C 2012 19.2<br>MISRA C++ 2008 9-5-1<br><br/><br><br/></p><h3 id="▌R5-3-3-禁用联合体"><a href="#▌R5-3-3-禁用联合体" class="headerlink" title="▌R5.3.3 禁用联合体"></a><span id="forbidunion">▌R5.3.3 禁用联合体</span></h3><p>ID_forbidUnion&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: type suggestion</p><hr/><p>联合体的问题主要有：  </p><ul><li>无法只通过对象获取当前有效的成员  </li><li>访问不同的成员相当于不安全的类型转换  </li><li>对非基本类型的成员造成构造和析构的混乱  </li><li>不能作为基类</li></ul><p>这些问题在本质上是对类型理念的破坏，面向对象的程序设计应避免使用联合体。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">U</span> &#123;    <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">U u;</span><br><span class="line">u.i = <span class="number">1000</span>;</span><br><span class="line">cout &lt;&lt; u.c &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;   <span class="comment">// Equivalent to a cast without any restrictions</span></span><br></pre></td></tr></table></figure><p>例中对 u.c 的访问也相当于一种没有任何限制的类型转换。  </p><p>在 C++ 代码中建议用 std::variant 或 std::any 取代联合体：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">std::variant&lt;int, char&gt; u;</span><br><span class="line">u = 1000;</span><br><span class="line">cout &lt;&lt; get&lt;int&gt;(u) &lt;&lt; &#x27;\n&#x27;;    // OK</span><br><span class="line">cout &lt;&lt; get&lt;char&gt;(u) &lt;&lt; &#x27;\n&#x27;;   // Throw ‘std::bad_variant_access’</span><br></pre></td></tr></table></figure><p>std::variant 可以有效记录对象当前持有的类型，如果以不正确的类型访问对象会及时抛出异常。  </p><p>本规则比 ID_forbidNakedUnion 更严格，针对所有联合体。<br><br/><br><br/></p><h4 id="相关-67"><a href="#相关-67" class="headerlink" title="相关"></a>相关</h4><p>ID_forbidNakedUnion<br><br/></p><h4 id="参考-98"><a href="#参考-98" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 18.4<br>MISRA C 2012 19.2<br>MISRA C++ 2008 9-5-1<br><br/><br><br/></p><h2 id="6-Declaration"><a href="#6-Declaration" class="headerlink" title="6. Declaration"></a><span id="declaration">6. Declaration</span></h2><h3 id="6-1-Naming"><a href="#6-1-Naming" class="headerlink" title="6.1 Naming"></a><span id="declaration.naming">6.1 Naming</span></h3><h3 id="▌R6-1-1-遵循合理的命名方式"><a href="#▌R6-1-1-遵循合理的命名方式" class="headerlink" title="▌R6.1.1 遵循合理的命名方式"></a><span id="badname">▌R6.1.1 遵循合理的命名方式</span></h3><p>ID_badName&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>应遵循易于读写，并可准确表达代码意图的命名方式。  </p><p>不应出现下列情况：  </p><ul><li>超长的名称  </li><li>易造成混淆或冲突的名称  </li><li>无意义或意义过于空泛的名称  </li><li>不易于读写的名称  </li><li>有违公序良俗的名称</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">xxx</span><span class="params">(<span class="type">int</span>)</span></span>;   <span class="comment">// Bad, meaningless name</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span>)</span></span>;   <span class="comment">// Bad, vague name</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> l, I, O, l0, Il;   <span class="comment">// Bad, like numbers</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> YE5, N0;   <span class="comment">// Bad, like a word but not</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> \u540d\u79f0;   <span class="comment">// Bad, no readability</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> nVarietyisthespiceoflife = <span class="number">123</span>;   <span class="comment">// Bad, hard to read or write</span></span><br></pre></td></tr></table></figure><p>例中 xxx、fun 这种无意义或意义过于空泛的名称，以及 l、lI、N0 这种易与数字或其他单词混淆的名称均是不符合要求的；Unicode 转义名称只应出现在字符串中，否则没有可读性；名称中各单词间应有下划线或大小写变化，否则不便于读写。本规则集合示例中出现的 foo、bar 等名称，意在代指一般的代码元素，仅作示例，实际代码中不应出现。  </p><p>不良命名方式甚至会导致标准未定义的行为，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extern int identifier_of_a_very_very_long_name_1;</span><br><span class="line">extern int identifier_of_a_very_very_long_name_2;   // Dangerous</span><br></pre></td></tr></table></figure><p>注意，如果两个名称有相同的前缀，而且相同前缀超过一定长度时是危险的，有可能会导致编译器无法有效区分相关名称。C 标准指明，保证名称前 31 位不同即可避免这种问题，可参见 ISO&#x2F;IEC 9899:2011 5.2.4.1 的相关规定。  </p><p>不建议采用相同“长前缀”+ 不同“短后缀”的命名方式，这种名称非常容易形成笔误或由复制粘贴造成错误，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct BinExpr &#123;</span><br><span class="line">    BinExpr* sub0;   // Bad</span><br><span class="line">    BinExpr* sub1;   // Bad</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>设 BinExpr 是“二元表达式”类，sub0、sub1 为左右子表达式，这种命名方式应改进：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct BinExpr &#123;</span><br><span class="line">    BinExpr* left;   // Better</span><br><span class="line">    BinExpr* right;  // Better</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="配置-8"><a href="#配置-8" class="headerlink" title="配置"></a>配置</h4><p>maxObjNameLength：对象名称长度上限，超过则报出<br>maxFunNameLength：函数名称长度上限，超过则报出<br>maxTypeNameLength：类型名称长度上限，超过则报出<br>maxWordLength：连续无大小写变化的字符数量上限，超过则报出<br><br/></p><h4 id="依据-56"><a href="#依据-56" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 5.2.4.1(1)<br>ISO&#x2F;IEC 9899:1999 6.4.2.1(6)-undefined<br>ISO&#x2F;IEC 9899:2011 5.2.4.1(1)<br>ISO&#x2F;IEC 9899:2011 6.4.2.1(6)-undefined<br><br/></p><h4 id="参考-99"><a href="#参考-99" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines NL.19<br>C++ Core Guidelines ES.8<br>MISRA C 2004 5.1<br>MISRA C 2012 5.1<br>MISRA C 2012 5.2<br>MISRA C 2012 5.4<br>MISRA C 2012 5.5<br>MISRA C++ 2008 2-10-1<br><br/><br><br/></p><h3 id="▌R6-1-2-不应定义具有保留意义的名称"><a href="#▌R6-1-2-不应定义具有保留意义的名称" class="headerlink" title="▌R6.1.2 不应定义具有保留意义的名称"></a><span id="reservedname">▌R6.1.2 不应定义具有保留意义的名称</span></h3><p>ID_reservedName&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>自定义的名称不应与标准库或编译环境中的名称相同，否则会导致标准未定义的行为，也不利于阅读和维护。  </p><p>下列名称具有保留意义，自定义名称不应与之相同：  </p><ul><li>标准库或编译环境中的宏名称  </li><li>标准库中具有外部链接性的对象或函数名称  </li><li>标准库中的类型名称</li></ul><p>自定义字面常量后缀应以下划线开头，否则为保留名称，除此之外：  </p><ul><li>以两个下划线开头的名称  </li><li>以一个下划线和一个大写字母开头的名称  </li><li>以下划线开头的全局名称</li></ul><p>均具有保留意义，自定义名称应避免这种命名方式。  </p><p>对于宏，本规则特化为 ID_macro_defineReserved、ID_macro_undefReserved。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (errno != <span class="number">0</span>) &#123;  <span class="comment">// Which errno?</span></span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> errno;  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中成员变量 errno 与标准库中的 errno 名称相同，不便于区分是自定义的还是系统定义的。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">size_t _Size();   // Non-compliant</span><br><span class="line"></span><br><span class="line">size_t operator &quot;&quot; KB(unsigned long long n) &#123;   // Non-compliant</span><br><span class="line">    return n * 1024;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中函数名 _Size 以一个下划线和一个大写字母开头，自定义字面常量后缀 KB 未以下划线开头，均不符合要求。  </p><p>为避免冲突和误解，以下命名方式可供参考：  </p><ul><li>除自定义字面常量后缀之外，避免名称以下划线开头  </li><li>无命名空间限制的全局名称以模块名称开头  </li><li>从名称上体现作用域，如全局对象名以 g_ 开头，成员对象名以 m_ 开头或以 _ 结尾  </li><li>从名称上体现类别，如宏名采用全大写字母，类型名以大写字母开头，函数或对象名以小写字母开头</li></ul><p>本规则集合对具体的命名方式暂不作量化要求，但读者应具备相关意识。<br><br/><br><br/></p><h4 id="相关-68"><a href="#相关-68" class="headerlink" title="相关"></a>相关</h4><p>ID_macro_defineReserved<br>ID_macro_undefReserved<br><br/></p><h4 id="依据-57"><a href="#依据-57" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.1.3(1)<br>ISO&#x2F;IEC 9899:2011 7.1.3(1)<br>ISO&#x2F;IEC 14882:2003 17.4.3.1<br>ISO&#x2F;IEC 14882:2011 17.6.4.3<br>ISO&#x2F;IEC 14882:2017 20.5.4.3<br><br/></p><h4 id="参考-100"><a href="#参考-100" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 21.2<br>MISRA C++ 2008 17-0-1<br>MISRA C++ 2008 17-0-2<br>MISRA C++ 2008 17-0-3<br>SEI CERT DCL37-C<br>SEI CERT DCL51-CPP<br><br/><br><br/></p><h3 id="▌R6-1-3-局部名称不应被覆盖"><a href="#▌R6-1-3-局部名称不应被覆盖" class="headerlink" title="▌R6.1.3 局部名称不应被覆盖"></a><span id="hidelocal">▌R6.1.3 局部名称不应被覆盖</span></h3><p>ID_hideLocal&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>不应在嵌套的作用域中声明相同的名称，否则干扰阅读，极易引起误解。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;       <span class="comment">// Declares an object ‘i’</span></span><br><span class="line">    <span class="keyword">if</span> (cond) &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>;   <span class="comment">// Non-compliant, hides previous ‘i’</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一个函数中出现了多个名为 i 的变量，当实际代码较为复杂时，很容易出现意图与实现不符的问题。<br><br/><br><br/></p><h4 id="参考-101"><a href="#参考-101" class="headerlink" title="参考"></a>参考</h4><p>CWE-1109<br>C++ Core Guidelines ES.12<br>MISRA C 2004 5.2<br>MISRA C 2012 5.3<br>MISRA C++ 2008 2-10-2<br><br/><br><br/></p><h3 id="▌R6-1-4-成员名称不应被覆盖"><a href="#▌R6-1-4-成员名称不应被覆盖" class="headerlink" title="▌R6.1.4 成员名称不应被覆盖"></a><span id="hidemember">▌R6.1.4 成员名称不应被覆盖</span></h3><p>ID_hideMember&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>成员函数内的局部名称与成员名称相同会干扰阅读，易引起误解。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;          <span class="comment">// Member object ‘i’</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;      <span class="comment">// Non-compliant, hides the member ‘i’</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bar</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">bar</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;    <span class="comment">// Non-compliant, hides the member ‘i’</span></span><br><span class="line">        <span class="keyword">return</span> i + i;   <span class="comment">// Which ‘i’ is used?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>建议成员对象遵循统一的命名约定，如以“_”结尾或以“m_”开头，可有效规避这类问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    int i_ = 0;         // Member object ‘i_’</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    int foo() &#123;</span><br><span class="line">        int i = 0;      // Compliant</span><br><span class="line">        return bar(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int bar(int i) &#123;    // Compliant</span><br><span class="line">        return i_ + i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-102"><a href="#参考-102" class="headerlink" title="参考"></a>参考</h4><p>CWE-1109<br>MISRA C 2004 5.2<br>MISRA C 2012 5.3<br>MISRA C++ 2008 2-10-2<br><br/><br><br/></p><h3 id="▌R6-1-5-全局名称不应被覆盖"><a href="#▌R6-1-5-全局名称不应被覆盖" class="headerlink" title="▌R6.1.5 全局名称不应被覆盖"></a><span id="hideglobal">▌R6.1.5 全局名称不应被覆盖</span></h3><p>ID_hideGlobal&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>局部、成员名称不应与全局或命名空间内的名称相同，否则干扰阅读，易引起误解。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;      <span class="comment">// Non-compliant, hides the global ‘i’</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;          <span class="comment">// Non-compliant, hides the global ‘i’</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;   <span class="comment">// Which ‘i’?</span></span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>建议全局对象遵循统一的命名约定，如以“g_”开头，且名称长度不宜过短，可有效规避这类问题。  </p><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extern int i;</span><br><span class="line"></span><br><span class="line">struct S &#123;</span><br><span class="line">    int i;   // Compliant</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>无成员函数的结构体或联合体成员可不受本规则限制。<br><br/><br><br/></p><h4 id="参考-103"><a href="#参考-103" class="headerlink" title="参考"></a>参考</h4><p>CWE-1109<br>MISRA C 2004 5.2<br>MISRA C 2012 5.3<br>MISRA C++ 2008 2-10-2<br><br/><br><br/></p><h3 id="▌R6-1-6-类型名称不应重复定义"><a href="#▌R6-1-6-类型名称不应重复定义" class="headerlink" title="▌R6.1.6 类型名称不应重复定义"></a><span id="duplicatedtypename">▌R6.1.6 类型名称不应重复定义</span></h3><p>ID_duplicatedTypeName&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>如果类型相关的名称有重复，极易引起误解，不利于阅读和维护，对于：  </p><ul><li>C++ 类、联合体、枚举类型的名称  </li><li>C 结构体、联合体、枚举类型的标签名称  </li><li>用 typedef 或 using 定义的类型别名</li></ul><p>均不应重复定义。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> A;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">float</span> A;   <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">short</span> B;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">short</span> B;   <span class="comment">// Non-compliant, even if they are identical</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">namespace N &#123;</span><br><span class="line">    typedef double A;</span><br><span class="line">&#125;</span><br><span class="line">namespace M &#123;</span><br><span class="line">    typedef float A;   // Compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果类型定义处于不同的命名空间，可不受本规则约束。<br><br/><br><br/></p><h4 id="参考-104"><a href="#参考-104" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 5.3<br>MISRA C 2004 5.4<br>MISRA C 2012 5.6<br>MISRA C 2012 5.7<br>MISRA C++ 2008 2-10-3<br>MISRA C++ 2008 2-10-4<br><br/><br><br/></p><h3 id="▌R6-1-7-类型名称不应与对象或函数名称相同"><a href="#▌R6-1-7-类型名称不应与对象或函数名称相同" class="headerlink" title="▌R6.1.7 类型名称不应与对象或函数名称相同"></a><span id="duplicatedname">▌R6.1.7 类型名称不应与对象或函数名称相同</span></h3><p>ID_duplicatedName&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>不同的代码元素使用相同的名称不利于阅读和维护。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">    A, B, C   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> x = <span class="built_in">sizeof</span>(A);   <span class="comment">// Which ‘A’?</span></span><br></pre></td></tr></table></figure><p>例中结构体名称 A 与枚举项 A 重名，sizeof(A) 的意义是非常令人困惑的。<br><br/><br><br/></p><h4 id="参考-105"><a href="#参考-105" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 2-10-6<br><br/><br><br/></p><h3 id="▌R6-1-8-不应存在拼写错误"><a href="#▌R6-1-8-不应存在拼写错误" class="headerlink" title="▌R6.1.8 不应存在拼写错误"></a><span id="misspelling">▌R6.1.8 不应存在拼写错误</span></h3><p>ID_misspelling&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>代码中不应存在拼写错误，尤其是供他人调用的代码，如命名空间名称、公共接口名称等，更不应存在拼写错误。  </p><p>拼写错误会使用户对代码的质量产生疑虑，而且相关代码被大量引用后也不便于改正。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">destory</span><span class="params">()</span> </span>= <span class="number">0</span>;  <span class="comment">// Non-compliant, should be ‘destroy’</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中“destory”函数的名称有拼写错误，应改为“destroy”。<br><br/><br><br/><br><br/></p><h3 id="6-2-Qualifier"><a href="#6-2-Qualifier" class="headerlink" title="6.2 Qualifier"></a><span id="declaration.qualifier">6.2 Qualifier</span></h3><h3 id="▌R6-2-1-const、volatile-不应重复"><a href="#▌R6-2-1-const、volatile-不应重复" class="headerlink" title="▌R6.2.1 const、volatile 不应重复"></a><span id="qualifierrepeated">▌R6.2.1 const、volatile 不应重复</span></h3><p>ID_qualifierRepeated&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: declaration error</p><hr/><p>重复的 const 或 volatile 限定符是没意义的，也可能意味着某种错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">const</span> <span class="type">char</span>* p0 = <span class="string">&quot;....&quot;</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> <span class="type">const</span>* p1 = <span class="string">&quot;....&quot;</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="type">char</span>* <span class="type">const</span> <span class="type">const</span> p2 = <span class="string">&quot;....&quot;</span>;   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>对于 p0 和 p1，const 重复修饰 char，很可能应该修饰 * 号，属于常见笔误，应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> * <span class="type">const</span> p0 = <span class="string">&quot;....&quot;</span>;  <span class="comment">// Compliant</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> * <span class="type">const</span> p1 = <span class="string">&quot;....&quot;</span>;  <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><p>对于 p2，const 重复修饰 * 号，符合语言文法，但没有实际意义，很可能应该修饰 char，应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> * <span class="type">const</span> p2 = <span class="string">&quot;....&quot;</span>;  <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-69"><a href="#相关-69" class="headerlink" title="相关"></a>相关</h4><p>ID_badQualifierPosition<br><br/><br><br/></p><h3 id="▌R6-2-2-const、volatile-修饰指针类型的别名是可疑的"><a href="#▌R6-2-2-const、volatile-修饰指针类型的别名是可疑的" class="headerlink" title="▌R6.2.2 const、volatile 修饰指针类型的别名是可疑的"></a><span id="qualifierforptralias">▌R6.2.2 const、volatile 修饰指针类型的别名是可疑的</span></h3><p>ID_qualifierForPtrAlias&emsp;&emsp;&emsp;&emsp;&nbsp;:question: declaration suspicious</p><hr/><p>如果 const、volatile 修饰指针类型的别名，很可能会造成意料之外的问题。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Type</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> Type* Alias;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(<span class="type">const</span> Alias a)</span> </span>&#123;  <span class="comment">// Rather suspicious</span></span><br><span class="line">    a-&gt;<span class="built_in">foo</span>();              <span class="comment">// Calls ‘void Type::foo();’</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 Alias 是 Type* 的别名，“const Alias a”很容易引起误解，好像对象是不可被改变的，但实际上 a 的类型是 Type *const，const 限定的是指针而不是指针指向的对象，对象仍可被修改，其调用的函数也可能与预期不符。  </p><p>应避免为指针类型定义别名，否则应提供常量和非常量两种别名，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef Type* Alias;</span><br><span class="line">typedef const Type* ConstAlias;</span><br><span class="line"></span><br><span class="line">void bar(ConstAlias a) &#123;</span><br><span class="line">    a-&gt;foo();              // Calls ‘void Type::foo() const;’</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，如果 const、volatile 修饰引用的别名则是错误的，详见 ID_qualifierInvalid。<br><br/><br><br/></p><h4 id="相关-70"><a href="#相关-70" class="headerlink" title="相关"></a>相关</h4><p>ID_qualifierInvalid<br><br/></p><h4 id="参考-106"><a href="#参考-106" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT DCL05-C<br><br/><br><br/></p><h3 id="▌R6-2-3-const、volatile-不可修饰引用"><a href="#▌R6-2-3-const、volatile-不可修饰引用" class="headerlink" title="▌R6.2.3 const、volatile 不可修饰引用"></a><span id="qualifierinvalid">▌R6.2.3 const、volatile 不可修饰引用</span></h3><p>ID_qualifierInvalid&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: declaration error</p><hr/><p>C++ 标准规定，const 或 volatile 可修饰指针，但不可修饰引用，否则起不到任何作用。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> &amp;<span class="type">const</span> i = a;     <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="type">int</span> &amp;<span class="keyword">volatile</span> j = a;  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>修饰 &amp; 号的 const 和 volatile 是无效的，i 可被随意修改，j 也可能被优化。  </p><p>应去掉限定符，或使限定符修饰引用的对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const int&amp; i = a;     // Compliant</span><br><span class="line">volatile int&amp; j = a;  // Compliant</span><br></pre></td></tr></table></figure><p>注意，如果限定符修饰引用类型的别名，会引起很大误解，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typedef int&amp; int_r;   // Reference type alias, bad</span><br><span class="line">const int_r r0 = a;   // Non-compliant, r0 is not a const-reference at all</span><br><span class="line">const int_r&amp; r1 = a;  // Non-compliant, r1 is not a const-reference at all</span><br></pre></td></tr></table></figure><p>例中 r0 像是一个常量对象，而 r1 像是常量对象的引用，但 const int_r 展开后相当于 int &amp; const，r0 不是常量，r1 也不是常量的引用。<br><br/><br><br/></p><h4 id="依据-58"><a href="#依据-58" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 8.3.2(1)<br>ISO&#x2F;IEC 14882:2011 8.3.2(1)<br>ISO&#x2F;IEC 14882:2017 11.3.2(1)<br><br/><br><br/></p><h3 id="▌R6-2-4-const、volatile-限定类型时的位置应统一"><a href="#▌R6-2-4-const、volatile-限定类型时的位置应统一" class="headerlink" title="▌R6.2.4 const、volatile 限定类型时的位置应统一"></a><span id="badqualifierposition">▌R6.2.4 const、volatile 限定类型时的位置应统一</span></h3><p>ID_badQualifierPosition&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>语言允许 const、volatile 等关键字出现在类型名称的左侧，也可以出现在其右侧，甚至可以出现在基本类型名称的中间，应对其位置进行统一规范以提高可读性。  </p><p>可从下列方案中选择一种作为规范，即统一要求 const、volatile：  </p><ol><li>出现在类型名称的左侧  </li><li>出现在类型名称的右侧  </li><li>出现在指针类型名称的右侧，非指针类型名称的左侧</li></ol><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Non-compliant, inconsistent positions of cv-qualifiers</span></span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="type">const</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> <span class="keyword">volatile</span> k = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>例中 const、volatile 的位置不统一是不符合要求的。  </p><p>const、volatile 出现在类型名称右侧时，和 * 号一起易被误用，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char const const * p = &quot;....&quot;;   // Wrong, redundant const-qualifiers</span><br><span class="line">char const * const q = &quot;....&quot;;   // Right</span><br></pre></td></tr></table></figure><p>const、volatile 出现在类型名称左侧时，如果类型为指针类型，则易引起误解，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typedef int* ptr;</span><br><span class="line">const ptr cp = &amp;x;</span><br><span class="line">*cp = 1;             // Looks a bit strange</span><br></pre></td></tr></table></figure><p>可参见 ID_qualifierForPtrAlias 的进一步讨论。  </p><p>如果约定 const、volatile 出现左侧表示类型为对象类型，右侧表示类型为指针类型，有助于提高可读性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef int obj;</span><br><span class="line">typedef int* ptr;</span><br><span class="line"></span><br><span class="line">const obj i = 0;    // Indicates that ‘obj’ is an object type</span><br><span class="line">ptr const p = &amp;x;   // Indicates that ‘ptr’ is a pointer type</span><br></pre></td></tr></table></figure><p>审计工具不妨通过配置决定具体检查方案。<br><br/><br><br/></p><h4 id="配置-9"><a href="#配置-9" class="headerlink" title="配置"></a>配置</h4><p>positionScheme：const、volatile 的位置方案，对应说明中的 1、2、3 号方案<br>volatileInFront：volatile 是否应写在 const 的前面，如果值为 false 则应写在后面，不设此项则不考虑相关顺序<br><br/></p><h4 id="相关-71"><a href="#相关-71" class="headerlink" title="相关"></a>相关</h4><p>ID_sandwichedModifier<br>ID_badSpecifierPosition<br><br/></p><h4 id="依据-59"><a href="#依据-59" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.7(1)<br>ISO&#x2F;IEC 9899:1999 6.7.2(1)<br>ISO&#x2F;IEC 9899:2011 6.7(1)<br>ISO&#x2F;IEC 9899:2011 6.7.2(1)<br>ISO&#x2F;IEC 14882:2003 A.6<br>ISO&#x2F;IEC 14882:2011 A.6<br><br/></p><h4 id="参考-107"><a href="#参考-107" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines NL.26<br><br/><br><br/></p><h3 id="▌R6-2-5-const、volatile-等关键字不应出现在基本类型名称的中间"><a href="#▌R6-2-5-const、volatile-等关键字不应出现在基本类型名称的中间" class="headerlink" title="▌R6.2.5 const、volatile 等关键字不应出现在基本类型名称的中间"></a><span id="sandwichedmodifier">▌R6.2.5 const、volatile 等关键字不应出现在基本类型名称的中间</span></h3><p>ID_sandwichedModifier&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>某些基本类型名称可由多个符号组成，const、volatile 等关键字不应出现在类型名称的中间，否则可读性较差。  </p><p>本规则对下列 C 或 C++ 关键字有同样的要求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const、volatile、</span><br><span class="line">inline、virtual、explicit、</span><br><span class="line">register、static、thread_local、extern、mutable、</span><br><span class="line">friend、typedef、constexpr、</span><br><span class="line">_Alignas、_Atomic、_Noreturn、_Thread_local</span><br></pre></td></tr></table></figure><p>即使对这些关键字的位置不作统一要求，也不应使其出现在类型名称的中间，否则很容易引起误解。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="keyword">volatile</span> <span class="type">long</span> cvll = <span class="number">0</span>;    <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="type">long</span> <span class="type">const</span> <span class="type">double</span> <span class="keyword">volatile</span> cvld = <span class="number">0</span>;  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="keyword">volatile</span> <span class="type">long</span> <span class="type">long</span> cvll = <span class="number">0</span>;    <span class="comment">// Compliant</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">volatile</span> <span class="type">long</span> <span class="type">double</span> cvld = <span class="number">0</span>;  <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-72"><a href="#相关-72" class="headerlink" title="相关"></a>相关</h4><p>ID_badQualifierPosition<br>ID_badSpecifierPosition<br><br/></p><h4 id="依据-60"><a href="#依据-60" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.7(1)<br>ISO&#x2F;IEC 9899:1999 6.7.2(1)<br>ISO&#x2F;IEC 9899:2011 6.7(1)<br>ISO&#x2F;IEC 9899:2011 6.7.2(1)<br>ISO&#x2F;IEC 14882:2003 A.6<br>ISO&#x2F;IEC 14882:2011 A.6<br><br/></p><h4 id="参考-108"><a href="#参考-108" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines NL.26<br><br/><br><br/></p><h3 id="▌R6-2-6-指向常量字符串的指针应使用-const-声明"><a href="#▌R6-2-6-指向常量字符串的指针应使用-const-声明" class="headerlink" title="▌R6.2.6 指向常量字符串的指针应使用 const 声明"></a><span id="conststrtononconstptr">▌R6.2.6 指向常量字符串的指针应使用 const 声明</span></h3><p>ID_constStrToNonConstPtr&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>常量字符串与非常量字符串指针的隐式转换是不安全的，一旦相关内存被修改会导致标准未定义的行为，这种转换在 C++ 标准中已被声明为过时，在 C 代码中也不应出现。  </p><p>指向常量字符串的指针应声明为 const chartype *，chartype 为常量字符串中的字符类型，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char、wchar_t、char16_t、char32_t</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* p = <span class="string">&quot;....&quot;</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line">p[x] = <span class="string">&#x27;\0&#x27;</span>;        <span class="comment">// Undefined behavior</span></span><br></pre></td></tr></table></figure><p>例中非常量指针 p 指向常量字符串，通过 p 修改常量数据一般会引发“<a href="https://en.wikipedia.org/wiki/Segmentation_fault">段错误</a>”而导致崩溃，应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span>* p = <span class="string">&quot;....&quot;</span>;   <span class="comment">// Compliant</span></span><br><span class="line">p[x] = <span class="string">&#x27;\0&#x27;</span>;              <span class="comment">// Compile-time protected</span></span><br></pre></td></tr></table></figure><p>改为常量字符串指针后，错误的操作无法通过编译。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void foo(char*);</span><br><span class="line"></span><br><span class="line">void bar() &#123;</span><br><span class="line">    foo(&quot;....&quot;);   // Non-compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应将 foo 的参数类型改为 const char*，或将常量字符串复制后传给 foo 函数。<br><br/><br><br/></p><h4 id="相关-73"><a href="#相关-73" class="headerlink" title="相关"></a>相关</h4><p>ID_nonConstUnmodified<br><br/></p><h4 id="依据-61"><a href="#依据-61" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.4.5(6)-undefined<br>ISO&#x2F;IEC 9899:2011 6.4.5(7)-undefined<br>ISO&#x2F;IEC 14882:1998 D.4(1)-deprecated<br>ISO&#x2F;IEC 14882:2003 2.13.4(2)-undefined<br>ISO&#x2F;IEC 14882:2003 D.4(1)-deprecated<br>ISO&#x2F;IEC 14882:2011 2.14.5(12)-undefined<br>ISO&#x2F;IEC 14882:2017 5.13.5(16)-undefined<br><br/></p><h4 id="参考-109"><a href="#参考-109" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 7.4<br><br/><br><br/></p><h3 id="▌R6-2-7-枚举类型的底层类型不应为-const-或-volatile"><a href="#▌R6-2-7-枚举类型的底层类型不应为-const-或-volatile" class="headerlink" title="▌R6.2.7 枚举类型的底层类型不应为 const 或 volatile"></a><span id="uselessqualifier">▌R6.2.7 枚举类型的底层类型不应为 const 或 volatile</span></h3><p>ID_uselessQualifier&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>将 enum 或 enum class 的底层类型（underlying type）设为 const 或 volatile 是没有意义的，会被编译器忽略，属于语言运用错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">E</span>: <span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span>  <span class="comment">// Non-compliant, ‘const’ is invalid</span></span><br><span class="line">&#123;</span><br><span class="line">    e0, e1, e2</span><br><span class="line">&#125;;</span><br><span class="line">E e = e0;  <span class="comment">// ‘e’ is not const</span></span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">E</span>: <span class="type">unsigned</span> <span class="type">int</span>  <span class="comment">// Compliant</span></span><br><span class="line">&#123;</span><br><span class="line">    e0, e1, e2</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> E e = e0;  <span class="comment">// OK, ‘e’ is const</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-62"><a href="#依据-62" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2011 7.2(2)<br>ISO&#x2F;IEC 14882:2011 10.2(2)<br><br/><br><br/></p><h3 id="▌R6-2-8-对常量的定义不应为引用"><a href="#▌R6-2-8-对常量的定义不应为引用" class="headerlink" title="▌R6.2.8 对常量的定义不应为引用"></a><span id="constliteralreference">▌R6.2.8 对常量的定义不应为引用</span></h3><p>ID_constLiteralReference&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>虽然 C++ 语言十分灵活，可以通过多种方式达到同一种目的，但应该选择最简洁且通俗易懂的方式实现。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; i = <span class="number">1024</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp;&amp; j = <span class="number">1024</span>;  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> i = <span class="number">1024</span>;  <span class="comment">// Compliant</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> j = <span class="number">1024</span>;  <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><br/><br/><br/><h3 id="▌R6-2-9-禁用-restrict-指针"><a href="#▌R6-2-9-禁用-restrict-指针" class="headerlink" title="▌R6.2.9 禁用 restrict 指针"></a><span id="forbidrestrictptr">▌R6.2.9 禁用 restrict 指针</span></h3><p>ID_forbidRestrictPtr&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: declaration warning</p><hr/><p>C 语言中的 restrict 指针要求其他指针不能再指向相同区域，有助于编译器优化，但不符合这种限制时会导致标准未定义的行为，相当于增加了误用风险，也增加了测试成本。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> c[])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> *restrict a = &amp;c[<span class="number">0</span>];   <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="type">int</span> *restrict b = &amp;c[<span class="number">1</span>];   <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">    a = b;                     <span class="comment">// Undefined behavior</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bar</span><span class="params">(<span class="type">int</span> *restrict x, <span class="type">int</span> *restrict y)</span> </span>&#123;   <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="keyword">return</span> *x + *y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">baz</span><span class="params">(<span class="type">int</span>* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bar</span>(p, p);   <span class="comment">// Undefined behavior</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>restrict 指针虽然有助于编译器优化，但应在效率的提高和存在的风险之间进行取舍，非系统库中的代码、改动频繁的代码不建议使用 restrict 指针，而且这种优化大部分情况下也难以真正解决效率的瓶颈问题。<br><br/><br><br/></p><h4 id="依据-63"><a href="#依据-63" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.7.3.1(4 9 11)-undefined<br>ISO&#x2F;IEC 9899:2011 6.7.3.1(4 9 11)-undefined<br><br/></p><h4 id="参考-110"><a href="#参考-110" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 8.14<br>SEI CERT EXP43-C<br><br/><br><br/></p><h3 id="▌R6-2-10-非适当场景禁用-volatile"><a href="#▌R6-2-10-非适当场景禁用-volatile" class="headerlink" title="▌R6.2.10 非适当场景禁用 volatile"></a><span id="forbidvolatile">▌R6.2.10 非适当场景禁用 volatile</span></h3><p>ID_forbidVolatile&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: declaration suggestion</p><hr/><p>应在适当的场景中合理使用 volatile，否则会导致优化或同步相关的多种问题。  </p><p>下列场景可使用 volatile：  </p><ul><li>对象读写对应外设 IO  </li><li>与信号等中断处理过程共享对象  </li><li>局部对象在 setjmp、longjmp 之间被修改  </li><li>出于安全目的清理内存中的数据  </li><li>在 C&#x2F;C++ 之外，通过与编译优化不兼容的方式访问对象</li></ul><p>在这些场景中，如果相关对象没有用 volatile 限定会导致程序和预期不符，volatile 关键字可以保证对象具有稳定的内存地址，任何读取或写入都可以来源于或作用于内存中的实际数据。  </p><p>除此之外不应使用 volatile，不参与过程间跳转的局部 volatile 对象往往意味着 volatile 的滥用，审计工具不妨重点关注这种对象，而且要注意 volatile 和 C&#x2F;C++ 的并发或同步机制没有直接关系，也无法保证相关操作的原子性。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> x;  <span class="comment">// Non-compliant, ‘volatile’ is abused</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LockGuard g;</span><br><span class="line">    <span class="built_in">read_and_write</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 x 是不涉及外设的共享对象，thd 是线程函数，LockGuard 是某种 RAII 锁，在已落实同步机制的情况下，不应再使用 volatile。<br><br/><br><br/></p><h4 id="依据-64"><a href="#依据-64" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.7.3(6)<br>ISO&#x2F;IEC 9899:2011 6.7.3(7)<br>ISO&#x2F;IEC 14882:2003 7.1.5.1(8)<br>ISO&#x2F;IEC 14882:2011 7.1.6.1(7)<br><br/></p><h4 id="参考-111"><a href="#参考-111" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines CP.8<br>C++ Core Guidelines CP.200<br><br/><br><br/></p><h3 id="▌R6-2-11-相关对象未被修改时应使用-const-声明"><a href="#▌R6-2-11-相关对象未被修改时应使用-const-声明" class="headerlink" title="▌R6.2.11 相关对象未被修改时应使用 const 声明"></a><span id="nonconstunmodified">▌R6.2.11 相关对象未被修改时应使用 const 声明</span></h3><p>ID_nonConstUnmodified&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>用 const 显式区分数据是只读的还是可写的，细化数据的访问方式可显著提高可读性，并保护数据不被错误修改，有助于编译器优化。  </p><p>下列情况应使用 const 声明：  </p><ul><li>不需要被修改的非参数对象应声明为常量对象  </li><li>通过指针或引用访问对象但不修改对象时，应声明为常量指针或引用  </li><li>成员函数访问非静态成员对象但不修改相关对象时，应声明为常量成员函数</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> pi = <span class="number">3.14</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">    <span class="type">double</span> r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Circle</span>(<span class="type">double</span>);</span><br><span class="line">    <span class="built_in">Circle</span>(Circle&amp;) = <span class="keyword">default</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;              <span class="comment">// Non-compliant</span></span><br><span class="line">        <span class="keyword">return</span> pi * r * r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中 pi 未被修改，应作为常量；拷贝构造函数的参数未被修改，应声明为常量引用；成员函数 area 未修改成员对象，应声明为常量成员函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const double pi = 3.14;   // Compliant</span><br><span class="line"></span><br><span class="line">class Circle &#123;</span><br><span class="line">    ....</span><br><span class="line">    Circle(const Circle&amp;) = default;   // Compliant</span><br><span class="line"></span><br><span class="line">    double area() const &#123;              // Compliant</span><br><span class="line">        return pi * r * r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-74"><a href="#相关-74" class="headerlink" title="相关"></a>相关</h4><p>ID_constStrToNonConstPtr<br><br/></p><h4 id="参考-112"><a href="#参考-112" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines Con.1<br>C++ Core Guidelines Con.2<br>C++ Core Guidelines Con.3<br>C++ Core Guidelines Con.4<br>MISRA C 2012 18.3<br>MISRA C++ 2008 7-1-1<br>MISRA C++ 2008 7-1-2<br><br/><br><br/></p><h3 id="6-3-Specifier"><a href="#6-3-Specifier" class="headerlink" title="6.3 Specifier"></a><span id="declaration.specifier">6.3 Specifier</span></h3><h3 id="▌R6-3-1-合理使用-auto-关键字"><a href="#▌R6-3-1-合理使用-auto-关键字" class="headerlink" title="▌R6.3.1 合理使用 auto 关键字"></a><span id="abusedauto">▌R6.3.1 合理使用 auto 关键字</span></h3><p>ID_abusedAuto&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>auto 关键字隐藏了类型名称，在使用时需注意不应降低可读性。  </p><p>非局部对象不宜用 auto 声明，如接口的返回类型、参数、全局对象等。如果局部对象的类型对程序的行为有显著影响，也不宜用 auto 声明。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> x = <span class="built_in">foo</span>();</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> obj = <span class="built_in">bar</span>();  <span class="comment">// What the hell is ‘obj’??</span></span><br></pre></td></tr></table></figure><p>如果想确定 obj 对象的类型，必须通读所有与之相关的代码，可读性很差。  </p><p>将代码中所有可以替换成 auto 的标识符全部替换成 auto，其结果是不可想象的，与 Python 等语言不同，C++ 语言存在重载、模板等多种严格依赖于类型的特性，如果类型名称不明确，必然会造成阅读和维护等方面的障碍。  </p><p>下面给出 auto 关键字的合理用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Type* a = static_cast&lt;Type*&gt;(ptr);               // Repeated type name</span><br><span class="line">unique_ptr&lt;Type[]&gt; b = make_unique&lt;Type[]&gt;(10);  // Repeated type name</span><br></pre></td></tr></table></figure><p>重复的类型名称使代码变得繁琐，这种情况使用 auto 是更好的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto* a = static_cast&lt;Type*&gt;(ptr);  // OK</span><br><span class="line">auto b = make_unique&lt;Type[]&gt;(10);   // OK</span><br></pre></td></tr></table></figure><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;Type&gt; v&#123; .... &#125;;</span><br><span class="line">vector&lt;Type&gt;::iterator i = v.begin();  // Verbose</span><br></pre></td></tr></table></figure><p>begin 函数返回迭代器是一种常识，且迭代器类型名称往往较长，这种情况应使用 auto：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto i = v.begin();  // OK</span><br></pre></td></tr></table></figure><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct SomeClass &#123;</span><br><span class="line">    struct Sub &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;;</span><br><span class="line">    Sub foo();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">SomeClass::Sub SomeClass::foo() &#123;  // Repeated ‘SomeClass’</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重复的类作用域声明十分繁琐，可用 auto 关键字配合后置返回类型改善：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto SomeClass::foo() -&gt; Sub &#123;  // OK</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总之，使用 auto 关键字的目的应是提高可读性，而不是单纯地简化代码。<br><br/><br><br/></p><h4 id="相关-75"><a href="#相关-75" class="headerlink" title="相关"></a>相关</h4><p>ID_roughAuto<br><br/></p><h4 id="参考-113"><a href="#参考-113" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.11<br><br/><br><br/></p><h3 id="▌R6-3-2-不应使用已过时的关键字"><a href="#▌R6-3-2-不应使用已过时的关键字" class="headerlink" title="▌R6.3.2 不应使用已过时的关键字"></a><span id="deprecatedspecifier">▌R6.3.2 不应使用已过时的关键字</span></h3><p>ID_deprecatedSpecifier&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>根据 C++11 标准，register 等关键字已过时，auto 关键字也不可再作为存储类说明符（storage class specifier）。  </p><p>本规则对 C++ 代码适用，C 代码可不受限制。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">register</span> <span class="type">int</span> a;            <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="keyword">auto</span> <span class="type">int</span> b;                <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="keyword">register</span> <span class="type">int</span> x)</span></span>;   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-65"><a href="#依据-65" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2011 7.1.6.4(3)<br>ISO&#x2F;IEC 14882:2011 D.2(1)-deprecated<br><br/><br><br/></p><h3 id="▌R6-3-3-不应使用多余的-inline-关键字"><a href="#▌R6-3-3-不应使用多余的-inline-关键字" class="headerlink" title="▌R6.3.3 不应使用多余的 inline 关键字"></a><span id="inlineredundant">▌R6.3.3 不应使用多余的 inline 关键字</span></h3><p>ID_inlineRedundant&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>constexpr 关键字修饰的函数已经相当于被声明为 inline，不应再重复声明。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;  <span class="comment">// Non-compliant, ‘inline’ is redundant</span></span><br><span class="line">    <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;  <span class="comment">// Compliant</span></span><br><span class="line">    <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，在类声明中实现的函数也相当于被声明为 inline，不应重复声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    inline int foo() &#123;  // Non-compliant, ‘inline’ is redundant</span><br><span class="line">        return 123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int bar() &#123;         // Compliant</span><br><span class="line">        return 456;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-66"><a href="#依据-66" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 7.1.2(3)<br>ISO&#x2F;IEC 14882:2011 7.1.2(3)<br>ISO&#x2F;IEC 14882:2011 7.1.5(2)<br><br/><br><br/></p><h3 id="▌R6-3-4-extern-关键字不应作用于类成员的声明或定义"><a href="#▌R6-3-4-extern-关键字不应作用于类成员的声明或定义" class="headerlink" title="▌R6.3.4 extern 关键字不应作用于类成员的声明或定义"></a><span id="invalidexternspecifier">▌R6.3.4 extern 关键字不应作用于类成员的声明或定义</span></h3><p>ID_invalidExternSpecifier&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>extern 关键字作用于类成员的声明或定义是没有意义的，属于语言运用错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">A::foo</span><span class="params">()</span> </span>&#123;  <span class="comment">// Non-compliant, invalid ‘extern’</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-67"><a href="#依据-67" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 9.2(6)<br>ISO&#x2F;IEC 14882:2011 9.2(6)<br>ISO&#x2F;IEC 14882:2017 12.2(9)<br><br/><br><br/></p><h3 id="▌R6-3-5-重写的虚函数应声明为-override-或-final"><a href="#▌R6-3-5-重写的虚函数应声明为-override-或-final" class="headerlink" title="▌R6.3.5 重写的虚函数应声明为 override 或 final"></a><span id="missingexplicitoverride">▌R6.3.5 重写的虚函数应声明为 override 或 final</span></h3><p>ID_missingExplicitOverride&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>将重写的虚函数都声明为 override 或 final 有利于提高可读性，并可确保虚函数被有效重写。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">bar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;          <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">bar</span><span class="params">()</span></span>;  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中 B 重写 A 的 foo 和 bar 这两个虚函数，如果不看 A 的声明，则看不出 B::foo 是虚函数，也看不出 B::bar 是重写的虚函数。  </p><p>改为如下方式会清晰很多：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class B: public A &#123;</span><br><span class="line">    int foo() override;  // Compliant</span><br><span class="line">    int bar() override;  // Compliant</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而且当重写的函数名、参数、返回类型与基类声明不符时，不能通过编译，可及时修正问题。<br><br/><br><br/></p><h4 id="依据-68"><a href="#依据-68" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2011 10.3(4 5)<br>ISO&#x2F;IEC 14882:2017 13.3(4 5)<br><br/></p><h4 id="参考-114"><a href="#参考-114" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.128<br><br/><br><br/></p><h3 id="▌R6-3-6-override-和-final-关键字不应同时出现在声明中"><a href="#▌R6-3-6-override-和-final-关键字不应同时出现在声明中" class="headerlink" title="▌R6.3.6 override 和 final 关键字不应同时出现在声明中"></a><span id="redundantoverride">▌R6.3.6 override 和 final 关键字不应同时出现在声明中</span></h3><p>ID_redundantOverride&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>final 表示不可重写的重写，override 表示可再次重写的重写，这两个关键字不应同时出现在声明中。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> B &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">override</span> <span class="keyword">final</span></span>;  <span class="comment">// Non-compliant, ‘override’ is redundant</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-115"><a href="#参考-115" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.128<br><br/><br><br/></p><h3 id="▌R6-3-7-override-或-final-关键字不应与-virtual-关键字同时出现在声明中"><a href="#▌R6-3-7-override-或-final-关键字不应与-virtual-关键字同时出现在声明中" class="headerlink" title="▌R6.3.7 override 或 final 关键字不应与 virtual 关键字同时出现在声明中"></a><span id="redundantvirtual">▌R6.3.7 override 或 final 关键字不应与 virtual 关键字同时出现在声明中</span></h3><p>ID_redundantVirtual&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>只应在定义新的虚函数时使用 virtual 关键字，重写虚函数应使用 override 或 final 关键字，不应再出现 virtual 关键字。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;   <span class="comment">// Compliant, a new virtual function</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">bar</span><span class="params">()</span></span>;   <span class="comment">// Compliant, a new virtual function</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">final</span></span>;     <span class="comment">// Non-compliant, ‘virtual’ is redundant</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">bar</span><span class="params">()</span> <span class="keyword">override</span></span>;  <span class="comment">// Non-compliant, ‘virtual’ is redundant</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>去掉多余的 virtual 关键字使代码更简洁：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class B: public A &#123;</span><br><span class="line">public:</span><br><span class="line">    int foo() final;     // Compliant</span><br><span class="line">    int bar() override;  // Compliant</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-116"><a href="#参考-116" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.128<br><br/><br><br/></p><h3 id="▌R6-3-8-不应将-union-设为-final"><a href="#▌R6-3-8-不应将-union-设为-final" class="headerlink" title="▌R6.3.8 不应将 union 设为 final"></a><span id="invalidfinal">▌R6.3.8 不应将 union 设为 final</span></h3><p>ID_invalidFinal&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>C++ 标准规定 union 不可作为基类，将 union 声明为 final 是没有意义的，属于语言运用错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">U</span> <span class="keyword">final</span>  <span class="comment">// Non-compliant, meaningless</span></span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-69"><a href="#依据-69" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2011 9.5(2)<br>ISO&#x2F;IEC 14882:2017 12.3(3)<br><br/><br><br/></p><h3 id="▌R6-3-9-未访问-this-指针的成员函数应使用-static-声明"><a href="#▌R6-3-9-未访问-this-指针的成员函数应使用-static-声明" class="headerlink" title="▌R6.3.9 未访问 this 指针的成员函数应使用 static 声明"></a><span id="this_notused">▌R6.3.9 未访问 this 指针的成员函数应使用 static 声明</span></h3><p>ID_this_notUsed&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>如果未访问 this 指针的成员函数没有被设计为静态成员函数，很可能意味着错误或功能不完整。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;   <span class="comment">// Compliant</span></span><br><span class="line">        <span class="keyword">return</span> s--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;          <span class="comment">// Non-compliant, missing ‘static’</span></span><br><span class="line">        <span class="keyword">return</span> s++;</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中 foo 函数只访问了静态数据成员，但在调用时仍会将 this 指针作为参数，这在逻辑上是矛盾的，所以应使用 static 关键字明确声明。<br><br/><br><br/></p><h4 id="参考-117"><a href="#参考-117" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 9-3-3<br><br/><br><br/></p><h3 id="▌R6-3-10-声明和定义内部链接的对象和函数时均应使用-static-关键字"><a href="#▌R6-3-10-声明和定义内部链接的对象和函数时均应使用-static-关键字" class="headerlink" title="▌R6.3.10 声明和定义内部链接的对象和函数时均应使用 static 关键字"></a><span id="missingstatic">▌R6.3.10 声明和定义内部链接的对象和函数时均应使用 static 关键字</span></h3><p>ID_missingStatic&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>声明和定义内部链接的对象和函数时均应使用 static 关键字，不可使用 extern 关键字，否则极易引起误解。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a;   <span class="comment">// Non-compliant</span></span><br><span class="line">....</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a;   <span class="comment">// ‘a’ is a static object</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> b;   <span class="comment">// ‘b’ is a static object</span></span><br><span class="line">....</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> b;   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中 a、b 是内部链接的静态对象，在定义的前后不可再用 extern 声明，否则极易与全域对象混淆。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int foo(int);          // Bad, missing ‘static’</span><br><span class="line"></span><br><span class="line">static int foo(int) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int bar(int);</span><br><span class="line"></span><br><span class="line">int bar(int) &#123;         // Bad, missing ‘static’</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在声明和定义内部链接的函数时，均应使用 static 关键字，否则也易引起误解。<br><br/><br><br/></p><h4 id="参考-118"><a href="#参考-118" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 8.11<br>MISRA C 2012 8.8<br>MISRA C++ 2008 3-3-2<br><br/><br><br/></p><h3 id="▌R6-3-11-inline、virtual、static、typedef-等关键字的位置应统一"><a href="#▌R6-3-11-inline、virtual、static、typedef-等关键字的位置应统一" class="headerlink" title="▌R6.3.11 inline、virtual、static、typedef 等关键字的位置应统一"></a><span id="badspecifierposition">▌R6.3.11 inline、virtual、static、typedef 等关键字的位置应统一</span></h3><p>ID_badSpecifierPosition&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>语言允许 inline、virtual、static、typedef 等关键字出现在类型名称的左侧，也可以出现在其右侧，甚至可以出现在基本类型名称的中间，应对其位置进行统一规范以提高可读性。  </p><p>本规则对下列 C 或 C++ 关键字有同样的要求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inline、virtual、explicit、</span><br><span class="line">register、static、thread_local、extern、mutable、</span><br><span class="line">friend、typedef、constexpr、</span><br><span class="line">_Alignas、_Atomic、_Noreturn、_Thread_local</span><br></pre></td></tr></table></figure><p>这些关键字应统一出现在声明的起始，类型名称的左侧。  </p><p>对于 const 和 volatile 也需面对类似的问题，参见 ID_badQualifierPosition。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="keyword">typedef</span> LL;        <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="type">static</span> <span class="title">foo</span><span class="params">()</span></span>;           <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="function"><span class="type">char</span> <span class="keyword">friend</span> <span class="title">bar</span><span class="params">()</span></span>;           <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="keyword">virtual</span> <span class="title">baz</span><span class="params">()</span></span>;  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中各种声明均有一定的特殊性，如果声明其特殊性的关键字在类型名称之后，不便于阅读甚至会引起误解。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;        <span class="comment">// Compliant</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">foo</span><span class="params">()</span></span>;           <span class="comment">// Compliant</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">char</span> <span class="title">bar</span><span class="params">()</span></span>;           <span class="comment">// Compliant</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="title">baz</span><span class="params">()</span></span>;  <span class="comment">// Compliant</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-76"><a href="#相关-76" class="headerlink" title="相关"></a>相关</h4><p>ID_sandwichedModifier<br>ID_badQualifierPosition<br><br/></p><h4 id="依据-70"><a href="#依据-70" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.7(1)<br>ISO&#x2F;IEC 9899:1999 6.7.2(1)<br>ISO&#x2F;IEC 9899:2011 6.7(1)<br>ISO&#x2F;IEC 9899:2011 6.7.2(1)<br>ISO&#x2F;IEC 14882:2003 A.6<br>ISO&#x2F;IEC 14882:2011 A.6<br><br/><br><br/></p><h3 id="6-4-Declarator"><a href="#6-4-Declarator" class="headerlink" title="6.4 Declarator"></a><span id="declaration.declarator">6.4 Declarator</span></h3><h3 id="▌R6-4-1-用-auto-声明指针或引用时应显式标明-、-amp-等符号"><a href="#▌R6-4-1-用-auto-声明指针或引用时应显式标明-、-amp-等符号" class="headerlink" title="▌R6.4.1 用 auto 声明指针或引用时应显式标明 *、&amp; 等符号"></a><span id="roughauto">▌R6.4.1 用 auto 声明指针或引用时应显式标明 *、&amp; 等符号</span></h3><p>ID_roughAuto&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>用 auto 声明指针时显式标明 * 号有利于提高可读性，否则会使人误以为是某种非指针的对象。在声明引用时必须显式标明 &amp; 或 &amp;&amp; 号，否则成为对象声明，导致逻辑错误或造成不必要的复制开销。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>* <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">bar</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> p = <span class="built_in">foo</span>();   <span class="comment">// Bad</span></span><br><span class="line"><span class="keyword">auto</span>* q = <span class="built_in">foo</span>();  <span class="comment">// Good</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> r = <span class="built_in">bar</span>();   <span class="comment">// Be careful, ‘r’ is not a reference</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e: container) &#123;  <span class="comment">// Is it necessary to copy elements?</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 p 为指针，但看起来像是个对象，bar 返回引用，但 r 并不是引用，e 是容器元素的复本，这些问题可能与预期不符，需谨慎对待。<br><br/><br><br/></p><h4 id="依据-71"><a href="#依据-71" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2011 7.1.6.4<br>ISO&#x2F;IEC 14882:2017 10.1.7.4<br><br/><br><br/></p><h3 id="▌R6-4-2-禁用可变参数列表"><a href="#▌R6-4-2-禁用可变参数列表" class="headerlink" title="▌R6.4.2 禁用可变参数列表"></a><span id="forbidvariadicfunction">▌R6.4.2 禁用可变参数列表</span></h3><p>ID_forbidVariadicFunction&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: declaration warning</p><hr/><p>可变参数列表对参数的类型和数量缺乏有效的限定和控制，是公认的不安全因素。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">format</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* fmt, ...)</span></span>;  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>假设 format 函数与 sprintf 函数功能相似，由参数 fmt 设定格式，将其他参数转为字符串后依次替换 fmt 中的占位符并返回结果。设 ‘@’ 和 ‘$’ 为占位符，分别对应字符串和整数，如调用 format(“@: $”, “value”, 123) 则返回字符串 “value: 123”。  </p><p>如果用可变参数列表实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">string format(const char* fmt, ...) &#123;</span><br><span class="line">    va_list ap;</span><br><span class="line">    stringstream res;</span><br><span class="line">    va_start(ap, fmt);</span><br><span class="line">    for (auto* c = fmt; *c; c++) &#123;   </span><br><span class="line">        switch (*c) &#123;</span><br><span class="line">            case &#x27;@&#x27;: res &lt;&lt; va_arg(ap, char*); break;</span><br><span class="line">            case &#x27;$&#x27;: res &lt;&lt; va_arg(ap, int); break;</span><br><span class="line">            default:  res &lt;&lt; *c; break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(ap);</span><br><span class="line">    return res.str();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 va_start、va_arg、va_end 是可变参数列表的标准支持，这种方法只能在运行时以 fmt 为依据获取后续参数，当实际参数与 fmt 不符时会造成严重问题，单纯地要求开发者小心谨慎是不可靠的，改用更安全的方法才是明智的选择。  </p><p>在 C++ 代码中可采用“<a href="https://en.cppreference.com/w/cpp/language/parameter_pack">模板参数包</a>”来实现这种功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T, class ...Args&gt;</span><br><span class="line">void get_argstrs(vector&lt;string&gt;&amp; vs, const T&amp; arg, const Args&amp; ...rest) &#123;</span><br><span class="line">    ostringstream oss;</span><br><span class="line">    oss &lt;&lt; arg;</span><br><span class="line">    vs.emplace_back(oss.str());</span><br><span class="line">    if constexpr(sizeof...(rest) &gt; 0) &#123;</span><br><span class="line">        get_argstrs(vs, rest...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class ...Args&gt;</span><br><span class="line">string format(const char* fmt, const Args&amp; ...args) &#123;  // Compliant</span><br><span class="line">    string res;</span><br><span class="line">    if constexpr(sizeof...(args) &gt; 0) &#123;</span><br><span class="line">        vector&lt;string&gt; vs;</span><br><span class="line">        const size_t n = strlen(fmt);</span><br><span class="line">        get_argstrs(vs, args...);</span><br><span class="line">        for (size_t i = 0, j = 0; i &lt; n; i++) &#123;</span><br><span class="line">            if ((fmt[i] == &#x27;@&#x27; || fmt[j] == &#x27;$&#x27;) &amp;&amp; j &lt; vs.size()) &#123;</span><br><span class="line">                res.append(vs[j++]);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                res.push_back(fmt[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码用 get_argstrs 函数递归地将参数都转为 string 对象存入容器，再将 fmt 中的 ‘@’ 和 ‘$’ 依次替换成容器中的字符串，实际上这种实现是可以不区分 ‘@’ 和 ‘$’ 的，这个过程中参数的个数和类型是可以由代码主动判断的，如果参数不能转为字符串则不会通过编译，如果参数个数与占位符不符也容易作出处理。  </p><p>“<a href="https://en.cppreference.com/w/cpp/language/parameter_pack">模板参数包</a>”、“<a href="https://en.cppreference.com/w/cpp/language/constexpr">constexpr</a>”等特性是 C++ 语言在编译理论上的重大突破，合理运用这些特性可以有效提升代码的安全性和可维护性。<br><br/><br><br/></p><h4 id="相关-77"><a href="#相关-77" class="headerlink" title="相关"></a>相关</h4><p>ID_badParmN<br>ID_badVaArgType<br><br/></p><h4 id="依据-72"><a href="#依据-72" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 5.2.2(7)-undefined<br>ISO&#x2F;IEC 14882:2011 5.2.2(7)-implementation<br><br/></p><h4 id="参考-119"><a href="#参考-119" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.34<br>C++ Core Guidelines F.55<br>MISRA C 2004 16.1<br>MISRA C++ 2008 8-4-1<br><br/><br><br/></p><h3 id="▌R6-4-3-禁用柔性数组"><a href="#▌R6-4-3-禁用柔性数组" class="headerlink" title="▌R6.4.3 禁用柔性数组"></a><span id="forbidflexiblearray">▌R6.4.3 禁用柔性数组</span></h3><p>ID_forbidFlexibleArray&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: declaration suggestion</p><hr/><p>柔性数组（flexible array）一般是指结构体最后不完整定义的数组成员，表示不占用空间的指针，这种数组在 C99 中有所定义，但不在 C++ 标准之中，在 C++ 代码中不应使用。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">int</span> dat[];  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">A* <span class="title">cpy</span><span class="params">(<span class="type">const</span> A* p)</span> </span>&#123;</span><br><span class="line">    A* a = (A*)<span class="built_in">malloc</span>(</span><br><span class="line">        <span class="built_in">sizeof</span>(A) + p-&gt;len * <span class="built_in">sizeof</span>(<span class="type">int</span>)</span><br><span class="line">    );</span><br><span class="line">    *a = *p;    <span class="comment">// Error, only p-&gt;len is copied</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 *a &#x3D; *p 这种拷贝赋值运算会漏掉数组的内容，而且数组不会计入 sizeof 的结果，易引起意料之外的错误，所以在 C 代码中也不建议使用柔性数组。<br><br/><br><br/></p><h4 id="依据-73"><a href="#依据-73" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.7.2.1(16)<br>ISO&#x2F;IEC 9899:2011 6.7.2.1(18)<br><br/></p><h4 id="参考-120"><a href="#参考-120" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 18.7<br><br/><br><br/></p><h3 id="▌R6-4-4-接口的参数类型和返回类型不应为-void"><a href="#▌R6-4-4-接口的参数类型和返回类型不应为-void" class="headerlink" title="▌R6.4.4 接口的参数类型和返回类型不应为 void*"></a><span id="forbidfunctionvoidptr">▌R6.4.4 接口的参数类型和返回类型不应为 void*</span></h3><p>ID_forbidFunctionVoidPtr&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: declaration warning</p><hr/><p>与接口相关的数据类型应保持精确，不应将参数类型或返回类型设为 void*。  </p><p>在 C++ 代码中，如果参数或返回值需要面对多种不同类型的数据，应合理使用重载或模板机制。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span>* <span class="title">foo</span><span class="params">()</span></span>;      <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(<span class="type">void</span>*)</span></span>;  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中 foo 和 bar 函数的返回值以及参数是不符合要求的。  </p><p>C 语言中存在大量的库函数不符合本规则要求，在 C++ 代码中应避免使用，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int buf[123];</span><br><span class="line">memset(buf, 0, 123);  // Logic error, should be ‘123 * sizeof(int)’</span><br></pre></td></tr></table></figure><p>例中 memset 函数的第一个形式参数就是 void* 型，只能通过更底层的二进制方式访问对象序列，是一种对类型设计的破坏，应改用 STL 标准库提供的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int buf[123];</span><br><span class="line">std::fill_n(buf, 123, 0);  // Safe and brief</span><br></pre></td></tr></table></figure><p>改用类型明确的方法可以使很多问题在编译期得到控制。  </p><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct T &#123;</span><br><span class="line">    void* operator new(size_t);   // Compliant</span><br><span class="line">    void operator delete(void*);  // Compliant</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>C++ 语言规定 new 运算符的返回类型为 void*，delete 运算符的参数类型为 void*，这些情况可不受本规则约束。<br><br/><br><br/></p><h4 id="相关-78"><a href="#相关-78" class="headerlink" title="相关"></a>相关</h4><p>ID_voidCast<br>ID_forbidMemberVoidPtr<br><br/></p><h4 id="参考-121"><a href="#参考-121" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines I.4<br><br/><br><br/></p><h3 id="▌R6-4-5-类成员的类型不应为-void"><a href="#▌R6-4-5-类成员的类型不应为-void" class="headerlink" title="▌R6.4.5 类成员的类型不应为 void*"></a><span id="forbidmembervoidptr">▌R6.4.5 类成员的类型不应为 void*</span></h3><p>ID_forbidMemberVoidPtr&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: declaration warning</p><hr/><p>与接口相关的数据类型应保持精确，不应将成员类型设为 void*，尤其是非 private 成员的类型，更不应设为 void*。  </p><p>在 C++ 代码中，如果成员需要面对多种不同类型的数据，应合理使用模板机制。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">void</span>* dat;   <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">T* <span class="title">method_about_dat</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* dat;   <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-79"><a href="#相关-79" class="headerlink" title="相关"></a>相关</h4><p>ID_voidCast<br>ID_forbidFunctionVoidPtr<br><br/></p><h4 id="参考-122"><a href="#参考-122" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines I.4<br><br/><br><br/></p><h3 id="▌R6-4-6-数组大小应被显式声明"><a href="#▌R6-4-6-数组大小应被显式声明" class="headerlink" title="▌R6.4.6 数组大小应被显式声明"></a><span id="missingarraysize">▌R6.4.6 数组大小应被显式声明</span></h3><p>ID_missingArraySize&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>显式声明数组大小有利于提高可读性。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a[];     <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> b[<span class="number">10</span>];   <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><p>由初始化列表定义数组大小是一种惯用方式，但列表较为复杂时不便于读出数组大小，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a[] = &#123;</span><br><span class="line">    1, 2, 3, ....   // Many items, let it go?</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>审计工具不妨通过配置决定这种方式是否合规。  </p><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void foo(int a[], int n);   // Let it go</span><br></pre></td></tr></table></figure><p>数组参数可不受本规则限制。<br><br/><br><br/></p><h4 id="配置-10"><a href="#配置-10" class="headerlink" title="配置"></a>配置</h4><p>allowNoArraySizeWithInitList：是否放过带有初始化列表的数组<br><br/></p><h4 id="参考-123"><a href="#参考-123" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 8.12<br>MISRA C 2012 8.11<br>MISRA C++ 2008 3-1-3<br><br/><br><br/></p><h3 id="▌R6-4-7-局部数组的长度不应过大"><a href="#▌R6-4-7-局部数组的长度不应过大" class="headerlink" title="▌R6.4.7 局部数组的长度不应过大"></a><span id="unsuitablearraysize">▌R6.4.7 局部数组的长度不应过大</span></h3><p>ID_unsuitableArraySize&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>局部数组的长度过大增加函数堆栈的压力，易导致溢出错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>];   <span class="comment">// Non-compliant, too large</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部数组在栈上分配空间，无法控制失败情况，大型数组应在堆上分配，或优化算法降低空间成本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void foo() &#123;</span><br><span class="line">    int* arr = (int*)malloc(1024 * 1024 * 1024 * sizeof(int));   // Compliant</span><br><span class="line">    if (arr) &#123;</span><br><span class="line">        ....     // Normal procedure</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        ....     // Handle allocation failures</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>量化评估程序需要的堆栈空间是产品设计的重要环节，相关的评审与测试也需要落实。<br><br/><br><br/></p><h4 id="配置-11"><a href="#配置-11" class="headerlink" title="配置"></a>配置</h4><p>maxLocalArraySize：局部数组的长度上限，超过则报出<br><br/></p><h4 id="参考-124"><a href="#参考-124" class="headerlink" title="参考"></a>参考</h4><p>CWE-770<br>SEI CERT MEM05-C<br><br/><br><br/></p><h3 id="▌R6-4-8-不应将类型定义和对象声明写在一个语句中"><a href="#▌R6-4-8-不应将类型定义和对象声明写在一个语句中" class="headerlink" title="▌R6.4.8 不应将类型定义和对象声明写在一个语句中"></a><span id="mixedtypeobjdefinition">▌R6.4.8 不应将类型定义和对象声明写在一个语句中</span></h3><p>ID_mixedTypeObjDefinition&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>将类型定义和对象声明写在一个语句中可读性较差，应分开书写。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125; obj, *ptr, <span class="built_in">fun</span>();   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">T obj;   <span class="comment">// Compliant</span></span><br><span class="line">T* ptr;   <span class="comment">// Compliant</span></span><br><span class="line"><span class="function">T <span class="title">fun</span><span class="params">()</span></span>;   <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-125"><a href="#参考-125" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.7<br><br/><br><br/></p><h3 id="▌R6-4-9-不应将不同类别的声明写在一个语句中"><a href="#▌R6-4-9-不应将不同类别的声明写在一个语句中" class="headerlink" title="▌R6.4.9 不应将不同类别的声明写在一个语句中"></a><span id="mixeddeclarations">▌R6.4.9 不应将不同类别的声明写在一个语句中</span></h3><p>ID_mixedDeclarations&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>将对象、指针、引用、数组、函数等不同类别的声明写入一个语句可读性较差，易引起误解。  </p><p>本规则是 ID_tooManyDeclarators 的特化。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span>* p, n;                <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="type">int</span>* a, b, c[<span class="number">8</span>], <span class="built_in">d</span>(<span class="type">int</span>), e = <span class="number">0</span>;   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>混在一起的声明易引起误解，例中 p 和 n 是不同的类型，只有 e 被初始化，d 为函数。  </p><p>应分开声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef int* p;   // Compliant</span><br><span class="line">typedef int n;    // Compliant</span><br><span class="line"></span><br><span class="line">int* a;       // Compliant</span><br><span class="line">int b;        // Compliant</span><br><span class="line">int c[8];     // Compliant</span><br><span class="line">int d(int);   // Compliant</span><br><span class="line">int e = 0;    // Compliant</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-80"><a href="#相关-80" class="headerlink" title="相关"></a>相关</h4><p>ID_tooManyDeclarators<br><br/></p><h4 id="参考-126"><a href="#参考-126" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.10<br><br/><br><br/></p><h3 id="6-5-Object"><a href="#6-5-Object" class="headerlink" title="6.5 Object"></a><span id="declaration.object">6.5 Object</span></h3><h3 id="▌R6-5-1-不应产生无效的临时对象"><a href="#▌R6-5-1-不应产生无效的临时对象" class="headerlink" title="▌R6.5.1 不应产生无效的临时对象"></a><span id="inaccessibletmpobject">▌R6.5.1 不应产生无效的临时对象</span></h3><p>ID_inaccessibleTmpObject&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: declaration error</p><hr/><p>无名且不受控制的临时对象在构造之后会立即析构，在逻辑上没有意义，往往意味着错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        <span class="built_in">A</span>(<span class="number">0</span>);   <span class="comment">// Non-compliant, just created an inaccessible temporary object</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> x): <span class="built_in">a</span>(x) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>示例代码意在调用重载的构造函数，但 A(0); 只生成了一个无效的临时对象，成员并没有被正确初始化，应改用 this-&gt;A::A(0); 等形式，在遵循 C++11 标准的代码中也可将 A(0) 移入初始化列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    int a;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    A(): A(0) &#123;&#125;        // Compliant</span><br><span class="line">    A(int x): a(x) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class LockGuard &#123; .... &#125;;</span><br><span class="line"></span><br><span class="line">void fun() &#123;</span><br><span class="line">    LockGuard();   // Non-compliant, meaningless</span><br><span class="line">    ....</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>设 LockGuard 是某种 RAII 锁，LockGuard(); 只生成了一个临时对象，该对象会立即析构，起不到作用，这也是一种常见的错误。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LockGuard guard;   <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-127"><a href="#参考-127" class="headerlink" title="参考"></a>参考</h4><p>CWE-665<br>C++ Core Guidelines ES.84<br><br/><br><br/></p><h3 id="▌R6-5-2-不应存在没有被用到的局部声明"><a href="#▌R6-5-2-不应存在没有被用到的局部声明" class="headerlink" title="▌R6.5.2 不应存在没有被用到的局部声明"></a><span id="invalidlocaldeclaration">▌R6.5.2 不应存在没有被用到的局部声明</span></h3><p>ID_invalidLocalDeclaration&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>没有被用到的局部声明是没有意义的，往往意味着代码冗余或功能不完整，也可能导致严重的逻辑错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n) &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">100</span> / n;   <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 if 作用域中声明的 x 对象没有被使用，与其相关的计算过程是无效的。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n) &#123;</span><br><span class="line">        x = <span class="number">100</span> / n;   <span class="comment">// Compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具有特定构造或析构函数的 C++ 对象可以做到“声明即使用”，但要注意如下情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class LockGuard &#123;</span><br><span class="line">    LockGuard();</span><br><span class="line">   ~LockGuard();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void bar() &#123;</span><br><span class="line">    LockGuard guard();   // Non-compliant, this is a function</span><br><span class="line">    do_something();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 guard 意在实现某种 RAII 锁，但 LockGuard guard(); 声明的是函数而不是对象，构造和析构函数不会按预期执行，这也是一种常见笔误。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LockGuard guard;   <span class="comment">// Compliant</span></span><br><span class="line">    <span class="built_in">do_something</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-128"><a href="#参考-128" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 0-1-3<br><br/><br><br/></p><h3 id="▌R6-5-3-对象初始化不可依赖自身的值"><a href="#▌R6-5-3-对象初始化不可依赖自身的值" class="headerlink" title="▌R6.5.3 对象初始化不可依赖自身的值"></a><span id="selfdependentinitialization">▌R6.5.3 对象初始化不可依赖自身的值</span></h3><p>ID_selfDependentInitialization&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: declaration error</p><hr/><p>对象初始化依赖自身的值属于逻辑错误，也是常见的笔误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> i = i + <span class="number">1</span>;  <span class="comment">// Non-compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中局部变量 i 的初始化依赖自身的值，这种问题往往是错误地定义了与外层作用域中名称相同的对象。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> j = i + <span class="number">1</span>;  <span class="comment">// OK</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><br/><h3 id="▌R6-5-4-参与数值运算的-char-对象应显式声明-signed-或-unsigned"><a href="#▌R6-5-4-参与数值运算的-char-对象应显式声明-signed-或-unsigned" class="headerlink" title="▌R6.5.4 参与数值运算的 char 对象应显式声明 signed 或 unsigned"></a><span id="plainnumericchar">▌R6.5.4 参与数值运算的 char 对象应显式声明 signed 或 unsigned</span></h3><p>ID_plainNumericChar&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>char 类型是否有符号由实现定义，为了提高可移植性并规避意料之外的错误，参与数值运算的 char 对象应显式声明符号属性。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;     <span class="comment">// Compliant</span></span><br><span class="line">    <span class="keyword">return</span> c == <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bar</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;     <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="keyword">return</span> c &gt;= <span class="number">0</span>;    <span class="comment">// May be always true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 foo 函数的 char 型参数只与字符有关，可不必声明符号属性；而 bar 函数的参数被当作整数参与了数值运算，应显式声明为 signed，否则在 char 为无符号整型的环境中会得到错误的结果。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bar</span><span class="params">(<span class="type">signed</span> <span class="type">char</span> c)</span> </span>&#123;   <span class="comment">// Compliant</span></span><br><span class="line">    <span class="keyword">return</span> c &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-74"><a href="#依据-74" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.2.5(3 15)-implementation<br>ISO&#x2F;IEC 9899:2011 6.2.5(3 15)-implementation<br>ISO&#x2F;IEC 14882:2003 3.9.1(1)-implementation<br>ISO&#x2F;IEC 14882:2011 3.9.1(1)-implementation<br><br/></p><h4 id="参考-129"><a href="#参考-129" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 5-0-11<br>SEI CERT INT07-C<br><br/><br><br/></p><h3 id="▌R6-5-5-字节的类型应为-std-byte-或-unsigned-char"><a href="#▌R6-5-5-字节的类型应为-std-byte-或-unsigned-char" class="headerlink" title="▌R6.5.5 字节的类型应为 std::byte 或 unsigned char"></a><span id="plainbinarychar">▌R6.5.5 字节的类型应为 std::byte 或 unsigned char</span></h3><p>ID_plainBinaryChar&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>字节等二进制概念不应受对齐方式或符号位的干扰，字节的类型应为 std::byte 或 unsigned char。  </p><p>std::byte  是 C++17 的标准字节类型，对字节相关的运算和操作提供了更安全的限定。在 C 代码或不便于遵循新标准的 C++ 代码中，应将字节类型声明为 unsigned char。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> byte;       <span class="comment">// Non-compliant</span></span><br><span class="line">byte buf[<span class="number">100</span>];</span><br><span class="line">FILE* fp = <span class="built_in">fopen</span>(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="built_in">fread</span>(buf, <span class="number">1</span>, <span class="number">100</span>, fp);</span><br><span class="line"><span class="keyword">if</span> (buf[<span class="number">0</span>] == <span class="number">0xff</span>) &#123;    <span class="comment">// May be always false</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (buf[<span class="number">1</span>] &lt;&lt; <span class="number">1</span>) &#123;       <span class="comment">// May cause undefined behavior</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>char 类型的符号由实现定义，有符号的 char 变量在数值计算、位运算等方面很容易产生意料之外的结果。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> byte;   <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><p>这样做也可有效区分二进制数据与字符串，提高可读性。<br><br/><br><br/></p><h4 id="相关-81"><a href="#相关-81" class="headerlink" title="相关"></a>相关</h4><p>ID_plainNumericChar<br>ID_bitwiseOperOnSigned<br><br/></p><h4 id="依据-75"><a href="#依据-75" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.2.5(3 15)-implementation<br>ISO&#x2F;IEC 9899:2011 6.2.5(3 15)-implementation<br>ISO&#x2F;IEC 14882:2003 3.9.1(1)-implementation<br>ISO&#x2F;IEC 14882:2011 3.9.1(1)-implementation<br><br/><br><br/></p><h3 id="6-6-Parameter"><a href="#6-6-Parameter" class="headerlink" title="6.6 Parameter"></a><span id="declaration.parameter">6.6 Parameter</span></h3><h3 id="▌R6-6-1-函数原型声明中的参数应具有合理的名称"><a href="#▌R6-6-1-函数原型声明中的参数应具有合理的名称" class="headerlink" title="▌R6.6.1 函数原型声明中的参数应具有合理的名称"></a><span id="missingparamname">▌R6.6.1 函数原型声明中的参数应具有合理的名称</span></h3><p>ID_missingParamName&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>参数的名称是其用途的直接说明，合理的名称可显著提高可读性。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">strstr</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* haystack, <span class="type">const</span> <span class="type">char</span>* needle)</span></span>;   <span class="comment">// Good</span></span><br></pre></td></tr></table></figure><p>这是标准库函数 strstr 的原型声明，利用形象的比喻，表示在 haystack 中查找 needle。  </p><p>如果将声明改为如下形式，就令人费解了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char* strstr(const char*, const char*);       // Bad</span><br><span class="line">char* strstr(const char* a, const char* b);   // Bad</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-130"><a href="#参考-130" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 16.3<br>MISRA C 2012 8.2<br><br/><br><br/></p><h3 id="▌R6-6-2-不应将数组作为函数的形式参数"><a href="#▌R6-6-2-不应将数组作为函数的形式参数" class="headerlink" title="▌R6.6.2 不应将数组作为函数的形式参数"></a><span id="invalidparamarraysize">▌R6.6.2 不应将数组作为函数的形式参数</span></h3><p>ID_invalidParamArraySize&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>数组作为形式参数时，其大小声明起不到实际的限制作用。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> a[<span class="number">100</span>])</span></span>;   <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">50</span>] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">foo</span>(a);     <span class="comment">// It can be compiled</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议在 C++ 代码中采用数组引用或模板的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void foo(int (&amp;a)[100]);     // Compliant</span><br><span class="line"></span><br><span class="line">template &lt;size_t size&gt;</span><br><span class="line">void foo(int (&amp;a)[size]) &#123;   // Compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int foo(int a[], int n);   // Let it go</span><br></pre></td></tr></table></figure><p>用空的方括号声明数组，并用另一个参数表示数组大小的情况可不受本规则限制。<br><br/><br><br/></p><h4 id="依据-76"><a href="#依据-76" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.7.5.3(7)<br>ISO&#x2F;IEC 9899:2011 6.7.6.3(7)<br><br/></p><h4 id="参考-131"><a href="#参考-131" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines I.13<br>C++ Core Guidelines R.14<br>MISRA C++ 2008 5-2-12<br><br/><br><br/></p><h3 id="▌R6-6-3-parmN-的声明应符合要求"><a href="#▌R6-6-3-parmN-的声明应符合要求" class="headerlink" title="▌R6.6.3 parmN 的声明应符合要求"></a><span id="badparmn">▌R6.6.3 parmN 的声明应符合要求</span></h3><p>ID_badParmN&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: declaration error</p><hr/><p>可变参数列表中省略号的前一个参数称为 parmN，如果：  </p><ul><li>在 C 代码中，parmN 为数组、函数，或具有寄存器存储期，以及与默认参数提升后不兼容的类型  </li><li>在 C++ 代码中，parmN 为引用、数组、函数，或具有与默认参数提升后不兼容的类型</li></ul><p>会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">float</span> f, ...)</span></span>;          <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(<span class="type">int</span>&amp; i, ...)</span></span>;           <span class="comment">// Non-compliant in C++</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">baz</span><span class="params">(<span class="keyword">register</span> <span class="type">int</span> n, ...)</span></span>;   <span class="comment">// Non-compliant in C</span></span><br></pre></td></tr></table></figure><p>例中参数 f 为 float 型，与“<a href="https://en.cppreference.com/w/cpp/language/variadic_arguments#Default_conversions">默认参数提升（default argument promotion）</a>”后的类型 double 不兼容，参数 i 为引用，参数 n 被 register 修饰具有寄存器存储期，这种代码均会导致标准未定义的行为。<br><br/><br><br/></p><h4 id="相关-82"><a href="#相关-82" class="headerlink" title="相关"></a>相关</h4><p>ID_badVaArgType<br>ID_forbidVariadicFunction<br><br/></p><h4 id="依据-77"><a href="#依据-77" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.15.1.4(4)-undefined<br>ISO&#x2F;IEC 9899:2011 7.16.1.4(4)-undefined<br>ISO&#x2F;IEC 14882:2003 18.7(3)-undefined<br>ISO&#x2F;IEC 14882:2011 18.10(3)-undefined<br><br/></p><h4 id="参考-132"><a href="#参考-132" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT EXP58-CPP<br><br/><br><br/></p><h3 id="▌R6-6-4-虚函数参数的默认值应与基类中声明的一致"><a href="#▌R6-6-4-虚函数参数的默认值应与基类中声明的一致" class="headerlink" title="▌R6.6.4 虚函数参数的默认值应与基类中声明的一致"></a><span id="inconsistentdefaultargument">▌R6.6.4 虚函数参数的默认值应与基类中声明的一致</span></h3><p>ID_inconsistentDefaultArgument&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: declaration error</p><hr/><p>虚函数参数的默认值不受多态规则控制，通过基类指针或引用调用派生类重写的虚函数时，默认值仍采用基类中的定义。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> i = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> i = <span class="number">1</span>)</span> <span class="keyword">override</span> </span>&#123;  <span class="comment">// Non-compliant</span></span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* p = <span class="keyword">new</span> B;</span><br><span class="line">cout &lt;&lt; p-&gt;<span class="built_in">foo</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;  <span class="comment">// What is output?</span></span><br></pre></td></tr></table></figure><p>输出 1，这种虚函数的非多态行为是非常令人困惑的。<br><br/><br><br/></p><h4 id="相关-83"><a href="#相关-83" class="headerlink" title="相关"></a>相关</h4><p>ID_deprecatedDefaultArgument<br><br/></p><h4 id="依据-78"><a href="#依据-78" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 8.3.6(10)<br>ISO&#x2F;IEC 14882:2011 8.3.6(10)<br>ISO&#x2F;IEC 14882:2017 11.3.6(10)<br><br/></p><h4 id="参考-133"><a href="#参考-133" class="headerlink" title="参考"></a>参考</h4><p>CWE-628<br>C++ Core Guidelines C.140<br>MISRA C++ 2008 8-3-1<br><br/><br><br/></p><h3 id="▌R6-6-5-不建议虚函数的参数有默认值"><a href="#▌R6-6-5-不建议虚函数的参数有默认值" class="headerlink" title="▌R6.6.5 不建议虚函数的参数有默认值"></a><span id="deprecateddefaultargument">▌R6.6.5 不建议虚函数的参数有默认值</span></h3><p>ID_deprecatedDefaultArgument&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>虚函数参数的默认值不受多态规则控制，通过基类指针或引用调用派生类重写的虚函数时，默认值仍采用基类中的定义，易造成混淆，故不建议虚函数的参数有默认值。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> i = <span class="number">0</span>)</span></span>;   <span class="comment">// Bad</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>应尽量去掉默认参数值，或改用重载函数的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual int foo();        // OK</span><br><span class="line">    virtual int foo(int i);   // OK</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-84"><a href="#相关-84" class="headerlink" title="相关"></a>相关</h4><p>ID_inconsistentDefaultArgument<br><br/></p><h4 id="依据-79"><a href="#依据-79" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 8.3.6(10)<br>ISO&#x2F;IEC 14882:2011 8.3.6(10)<br>ISO&#x2F;IEC 14882:2017 11.3.6(10)<br><br/></p><h4 id="参考-134"><a href="#参考-134" class="headerlink" title="参考"></a>参考</h4><p>CWE-628<br>C++ Core Guidelines C.140<br>MISRA C++ 2008 8-3-1<br><br/><br><br/></p><h3 id="▌R6-6-6-C-代码中参数列表如果为空应声明为“-void-”"><a href="#▌R6-6-6-C-代码中参数列表如果为空应声明为“-void-”" class="headerlink" title="▌R6.6.6 C 代码中参数列表如果为空应声明为“(void)”"></a><span id="missingvoid">▌R6.6.6 C 代码中参数列表如果为空应声明为“(void)”</span></h3><p>ID_missingVoid&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>在 C 语言中，如果函数的参数列表声明为空括号，表示函数的参数还没有声明，而不是表示没有参数，这很容易使人误解，所以在 C 代码中没有参数的参数列表应声明为“(void)”。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In a.h</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;  <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// In a.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;a.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In main.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;a.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">foo</span>(<span class="number">1</span>));  <span class="comment">// Output: 2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">foo</span>());   <span class="comment">// Can be compiled, but what is output?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 foo(1) 和 foo() 两种调用都可以通过编译，然而声明与实现不一致的问题总是令人困惑的，如果明确将参数声明为 void 或 int a 则可以解决这种问题。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">void</span>)</span></span>;   <span class="comment">// Compliant, ‘foo(1)’ cannot be compiled</span></span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int foo(int a);  // Compliant, ‘foo()’ cannot be compiled</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-85"><a href="#相关-85" class="headerlink" title="相关"></a>相关</h4><p>ID_superfluousVoid<br><br/></p><h4 id="依据-80"><a href="#依据-80" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.7.5.3(14)<br>ISO&#x2F;IEC 9899:1999 6.11.6(1)<br>ISO&#x2F;IEC 9899:2011 6.7.6.3(14)<br>ISO&#x2F;IEC 9899:2011 6.11.6(1)<br><br/></p><h4 id="参考-135"><a href="#参考-135" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 16.5<br><br/><br><br/></p><h3 id="▌R6-6-7-C-代码中参数列表如果为空不应声明为“-void-”"><a href="#▌R6-6-7-C-代码中参数列表如果为空不应声明为“-void-”" class="headerlink" title="▌R6.6.7 C++ 代码中参数列表如果为空不应声明为“(void)”"></a><span id="superfluousvoid">▌R6.6.7 C++ 代码中参数列表如果为空不应声明为“(void)”</span></h3><p>ID_superfluousVoid&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>与 C 语言不同，在 C++ 语言中空括号和“(void)”均表示没有参数，所以应采用更简洁的方式。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">void</span>)</span></span>;  <span class="comment">// Verbose</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">bar</span><span class="params">()</span></span>;      <span class="comment">// OK</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-86"><a href="#相关-86" class="headerlink" title="相关"></a>相关</h4><p>ID_missingVoid<br><br/></p><h4 id="依据-81"><a href="#依据-81" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 C.1.6 Clause 8<br>ISO&#x2F;IEC 14882:2011 C.1.7 Clause 8<br>ISO&#x2F;IEC 14882:2017 C.1.7 Clause 11<br><br/></p><h4 id="参考-136"><a href="#参考-136" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines NL.25<br><br/><br><br/></p><h3 id="▌R6-6-8-声明数组参数的大小时禁用-static-关键字"><a href="#▌R6-6-8-声明数组参数的大小时禁用-static-关键字" class="headerlink" title="▌R6.6.8 声明数组参数的大小时禁用 static 关键字"></a><span id="forbidstaticarrsize">▌R6.6.8 声明数组参数的大小时禁用 static 关键字</span></h3><p>ID_forbidStaticArrSize&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: declaration warning</p><hr/><p>C 语言规定数组作为形式参数时，可用 static 关键字修饰大小，要求传入数组的大小不能小于由 static  关键字修饰的值，有助于编译器优化，但不符合这种限制时会导致标准未定义的行为，相当于增加了误用风险，也增加了测试成本。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> a[<span class="type">static</span> <span class="number">5</span>], <span class="type">int</span> n)</span> </span>&#123;   <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        s += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">foo</span>(a, <span class="number">3</span>);       <span class="comment">// Undefined behavior</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种机制虽然有助于编译器优化，但应在效率的提高和存在的风险之间进行取舍，非系统库中的代码、改动频繁的代码不建议使用这种机制，而且这种优化大部分情况下也难以真正解决效率的瓶颈问题。<br><br/><br><br/></p><h4 id="依据-82"><a href="#依据-82" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.7.6.3(7)<br>ISO&#x2F;IEC 9899:2011 6.7.6.3(7)<br><br/></p><h4 id="参考-137"><a href="#参考-137" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 17.6<br><br/><br><br/></p><h3 id="6-7-Function"><a href="#6-7-Function" class="headerlink" title="6.7 Function"></a><span id="declaration.function">6.7 Function</span></h3><h3 id="▌R6-7-1-派生类不应重新定义与基类相同的非虚函数"><a href="#▌R6-7-1-派生类不应重新定义与基类相同的非虚函数" class="headerlink" title="▌R6.7.1 派生类不应重新定义与基类相同的非虚函数"></a><span id="nonvirtualoverride">▌R6.7.1 派生类不应重新定义与基类相同的非虚函数</span></h3><p>ID_nonVirtualOverride&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>派生类不应重新定义与基类相同的非虚函数，否则与多态机制相矛盾，易造成意料之外的问题。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span>: A &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bar</span><span class="params">(A* a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-&gt;<span class="built_in">foo</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    B b;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bar</span>(&amp;b);  <span class="comment">// Problematic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果将 B 类型的指针传入 bar 函数，将执行 A::foo，然而参数实际指向的是 B 类型的对象，但 B::foo 不会被执行，这就形成了逻辑上的矛盾，极易造成意料之外的问题。<br><br/><br><br/></p><h4 id="参考-138"><a href="#参考-138" class="headerlink" title="参考"></a>参考</h4><p>Effective C++ item 36<br><br/><br><br/></p><h3 id="▌R6-7-2-拷贝和移动赋值运算符应返回所属类的非-const-引用"><a href="#▌R6-7-2-拷贝和移动赋值运算符应返回所属类的非-const-引用" class="headerlink" title="▌R6.7.2 拷贝和移动赋值运算符应返回所属类的非 const 引用"></a><span id="nonstdassignmentrettype">▌R6.7.2 拷贝和移动赋值运算符应返回所属类的非 const 引用</span></h3><p>ID_nonStdAssignmentRetType&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>拷贝和移动赋值运算符应返回所属类的非 const 引用，便于调用者使用并满足泛型编程的要求。  </p><p>对赋值运算符的合理重载，可以使对象的赋值表达式作为子表达式灵活地出现在各种语句中，这也是“泛型程序设计”的必要条件，使算法的代码实现既可以适应普通变量，也可以适应类对象。如果类对象与标准模板库相关，其赋值运算符应满足本规则的要求，否则无法满足连续赋值等语法要求，在标准模板库的使用上会受到限制。  </p><p>本规则对 +&#x3D;、-&#x3D; 等复合赋值运算符也有相同的要求。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    A&amp; <span class="keyword">operator</span> = (<span class="type">const</span> A&amp;);    <span class="comment">// Compliant</span></span><br><span class="line">    A&amp; <span class="keyword">operator</span> = (A&amp;&amp;);         <span class="comment">// Compliant</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span> = (<span class="type">const</span> B&amp;);  <span class="comment">// Non-compliant, should return ‘B&amp;’</span></span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span> = (B&amp;&amp;);       <span class="comment">// Non-compliant, should return ‘B&amp;’</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-83"><a href="#依据-83" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 12.8(10)<br>ISO&#x2F;IEC 14882:2011 12.8(22)<br><br/></p><h4 id="参考-139"><a href="#参考-139" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines F.47<br>C++ Core Guidelines C.60<br>C++ Core Guidelines C.63<br><br/><br><br/></p><h3 id="▌R6-7-3-拷贝赋值运算符的参数应为同类对象的-const-左值引用"><a href="#▌R6-7-3-拷贝赋值运算符的参数应为同类对象的-const-左值引用" class="headerlink" title="▌R6.7.3 拷贝赋值运算符的参数应为同类对象的 const 左值引用"></a><span id="nonstdcopyassignmentparam">▌R6.7.3 拷贝赋值运算符的参数应为同类对象的 const 左值引用</span></h3><p>ID_nonStdCopyAssignmentParam&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>拷贝赋值运算符应专注于复制参数的数据，且参数不应按值传递，否则会产生不必要的复制开销以及“<a href="https://en.wikipedia.org/wiki/Object_slicing">对象切片</a>”等问题。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    A&amp; <span class="keyword">operator</span> = (A);  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    B&amp; <span class="keyword">operator</span> = (<span class="type">const</span> B&amp;);  <span class="comment">// Compliant</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-84"><a href="#依据-84" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 12.8(9)<br>ISO&#x2F;IEC 14882:2011 12.8(17)<br><br/></p><h4 id="参考-140"><a href="#参考-140" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.60<br><br/><br><br/></p><h3 id="▌R6-7-4-移动赋值运算符的参数应为同类对象的非-const-右值引用"><a href="#▌R6-7-4-移动赋值运算符的参数应为同类对象的非-const-右值引用" class="headerlink" title="▌R6.7.4 移动赋值运算符的参数应为同类对象的非 const 右值引用"></a><span id="nonstdmoveassignmentparam">▌R6.7.4 移动赋值运算符的参数应为同类对象的非 const 右值引用</span></h3><p>ID_nonStdMoveAssignmentParam&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>移动赋值意在将参数的数据转移到当前对象中，故参数不应为 const 右值引用，否则将失去移动赋值的意义。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">char</span>* p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A&amp; <span class="keyword">operator</span> = (<span class="type">const</span> A&amp;&amp; a) &#123;   <span class="comment">// Non-compliant</span></span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="built_in">copy</span>(a.p);   <span class="comment">// Not necessary</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中赋值运算符先释放持有的资源，再复制 a 的资源，不是真正的移动赋值，仍是一种低效实现。应将 a.p 与 this-&gt;p 交换，省去复制过程，并使原有资源由 a 的析构函数释放，才是真正意义上的移动赋值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A&amp; A::operator = (A&amp;&amp; a) &#123;   // Compliant</span><br><span class="line">    char* tmp = p;</span><br><span class="line">    p = a.p;</span><br><span class="line">    a.p = tmp;</span><br><span class="line">    return *this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-85"><a href="#依据-85" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2011 12.8(19)<br>ISO&#x2F;IEC 14882:2017 15.8.2(3)<br><br/></p><h4 id="参考-141"><a href="#参考-141" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.63<br><br/><br><br/></p><h3 id="▌R6-7-5-不应重载取地址运算符"><a href="#▌R6-7-5-不应重载取地址运算符" class="headerlink" title="▌R6.7.5 不应重载取地址运算符"></a><span id="overloadaddressoperator">▌R6.7.5 不应重载取地址运算符</span></h3><p>ID_overloadAddressOperator&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>取地址运算符（一元 &amp; 运算符），重载之后可以返回任意地址，极易误用。  </p><p>获取不完整类型的对象地址时，如果其完整类型重载了取地址运算符，会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">X</span>;   <span class="comment">// Incomplete type</span></span><br><span class="line"></span><br><span class="line"><span class="function">X* <span class="title">foo</span><span class="params">(X&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;x;   <span class="comment">// Undefined behavior</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">X</span> &#123;</span><br><span class="line">    X* <span class="keyword">operator</span> &amp;() &#123;   <span class="comment">// Non-compliant</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">X* <span class="title">bar</span><span class="params">(X&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;x;   <span class="comment">// Call ‘X::operator&amp;’</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 foo 会导致未定义的行为，可能会返回 x 对象的实际地址，而 bar 会调用重载了的取地址运算符，这是一种混乱的局面。<br><br/><br><br/></p><h4 id="依据-86"><a href="#依据-86" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 5.3.1(4)-undefined<br>ISO&#x2F;IEC 14882:2011 5.3.1(5)-undefined<br><br/></p><h4 id="参考-142"><a href="#参考-142" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.166<br>MISRA C++ 2008 5-3-3<br><br/><br><br/></p><h3 id="▌R6-7-6-不应重载逗号运算符"><a href="#▌R6-7-6-不应重载逗号运算符" class="headerlink" title="▌R6.7.6 不应重载逗号运算符"></a><span id="overloadcomma">▌R6.7.6 不应重载逗号运算符</span></h3><p>ID_overloadComma&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>逗号表达式意在从左至右依次执行各子表达式，但重载逗号运算符会打破这一规则，易造成意料之外的结果。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; .... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">A&amp; <span class="title">foo</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line">A&amp; <span class="keyword">operator</span> , (<span class="type">int</span>, A&amp;);  <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bar</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    ++i, <span class="built_in">foo</span>(i);   <span class="comment">// Disordered</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中逗号运算符被重载后变成了一个函数，++i 和 foo(i) 变成了函数参数，函数参数的求值顺序在标准中是未声明的，foo(i) 很有可能会先被求值，++i 则失去了意义。  </p><p>另外，也不应重载逻辑运算符，参见 ID_overloadLogicOperator。<br><br/><br><br/></p><h4 id="相关-87"><a href="#相关-87" class="headerlink" title="相关"></a>相关</h4><p>ID_overloadLogicOperator<br><br/></p><h4 id="依据-87"><a href="#依据-87" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 5.2.2(8)-unspecified<br>ISO&#x2F;IEC 14882:2011 5.2.2(8)<br><br/></p><h4 id="参考-143"><a href="#参考-143" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 5-2-11<br><br/><br><br/></p><h3 id="▌R6-7-7-不应重载“逻辑与”和“逻辑或”运算符"><a href="#▌R6-7-7-不应重载“逻辑与”和“逻辑或”运算符" class="headerlink" title="▌R6.7.7 不应重载“逻辑与”和“逻辑或”运算符"></a><span id="overloadlogicoperator">▌R6.7.7 不应重载“逻辑与”和“逻辑或”运算符</span></h3><p>ID_overloadLogicOperator&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>对“逻辑与”、“逻辑或”等运算符的重载会影响效率，甚至造成不符合预期的结果。  </p><p>C&#x2F;C++ 标准明确规定了内置逗号、逻辑与、逻辑或等运算符的子表达式求值顺序。对于逻辑表达式，从左到右计算子表达式的值，当可以确定整个表达式的值时立即结束计算，如果还有其他子表达式未求值也不再计算了，这种规则称为“短路规则”，意在提高效率，然而运算符的重载却打破了这一规则。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> x = <span class="number">0</span>): <span class="built_in">i</span>(x) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">valid</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">A&amp; <span class="title">assign</span><span class="params">(<span class="type">const</span> A&amp; a)</span> </span>&#123;</span><br><span class="line">        i = a.i;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &amp;&amp; (<span class="type">const</span> A&amp; a, <span class="type">const</span> A&amp; b) &#123;  <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">valid</span>() &amp;&amp; b.<span class="built_in">valid</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意表达式（设 a 和 b 为 A 的对象）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b &amp;&amp; a.assign(b)</span><br></pre></td></tr></table></figure><p>按常理，此表达式的意思应该是如果 b 在某种意义上“有效”，就将 b 赋给 a，所以 b 的值应先被求出，但由于 &amp;&amp; 被重载成了一个函数，其左右子表达式成了函数的参数，“短路规则”不再有效，而且参数的求值顺序在标准中是未声明的，所以常规逻辑子表达式的求值顺序无法得到保证。目前 MSVC、g++ 等主流编译器默认都是从右到左计算参数的值，例中 a.assign(b) 会先被执行，造成完全不符合预期的结果。  </p><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    operator bool() const &#123;</span><br><span class="line">        return valid();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>去掉对 &amp;&amp; 的重载，在 A 中定义 bool 类型转换运算符，既可保证“短路规则”，又可保证求值顺序。<br><br/><br><br/></p><h4 id="相关-88"><a href="#相关-88" class="headerlink" title="相关"></a>相关</h4><p>ID_overloadComma<br><br/></p><h4 id="依据-88"><a href="#依据-88" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 5.2.2(8)-unspecified<br>ISO&#x2F;IEC 14882:2011 5.2.2(8)<br><br/></p><h4 id="参考-144"><a href="#参考-144" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 5-2-11<br><br/><br><br/></p><h3 id="▌R6-7-8-拷贝和移动赋值运算符不应为虚函数"><a href="#▌R6-7-8-拷贝和移动赋值运算符不应为虚函数" class="headerlink" title="▌R6.7.8 拷贝和移动赋值运算符不应为虚函数"></a><span id="virtualassignment">▌R6.7.8 拷贝和移动赋值运算符不应为虚函数</span></h3><p>ID_virtualAssignment&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>拷贝和移动赋值运算符的参数应分别为所属类的左值和右值引用，这类运算符即使是虚函数也不便于被重写。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> A&amp; <span class="keyword">operator</span> = (<span class="type">const</span> A&amp;);  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> B&amp; <span class="keyword">operator</span> = (<span class="type">const</span> B&amp;);  <span class="comment">// Not override</span></span><br><span class="line">    <span class="keyword">virtual</span> A&amp; <span class="keyword">operator</span> = (<span class="type">const</span> A&amp;);  <span class="comment">// Override, but too complex</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-89"><a href="#相关-89" class="headerlink" title="相关"></a>相关</h4><p>ID_nonStdAssignmentRetType<br><br/></p><h4 id="依据-89"><a href="#依据-89" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 12.8(9)<br>ISO&#x2F;IEC 14882:2011 12.8(17)<br>ISO&#x2F;IEC 14882:2011 12.8(19)<br><br/></p><h4 id="参考-145"><a href="#参考-145" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.60<br>C++ Core Guidelines C.63<br><br/><br><br/></p><h3 id="▌R6-7-9-比较运算符不应为虚函数"><a href="#▌R6-7-9-比较运算符不应为虚函数" class="headerlink" title="▌R6.7.9 比较运算符不应为虚函数"></a><span id="virtualcomparison">▌R6.7.9 比较运算符不应为虚函数</span></h3><p>ID_virtualComparison&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>重载的比较运算符很难正确触发 C++ 的多态机制，将其设为虚函数很可能引发意料之外的错误。  </p><p>运算符 &#x3D;&#x3D;、!&#x3D;、&lt;、&gt;、&lt;&#x3D;、&gt;&#x3D; 均受本规则限制。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    ....</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> A&amp;) <span class="type">const</span>;  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A &#123;</span><br><span class="line">    ....</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> B&amp;) <span class="type">const</span>;  <span class="comment">// Non-compliant, not overloaded</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-146"><a href="#参考-146" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.87<br><br/><br><br/></p><h3 id="▌R6-7-10-final-类中不应声明虚函数"><a href="#▌R6-7-10-final-类中不应声明虚函数" class="headerlink" title="▌R6.7.10 final 类中不应声明虚函数"></a><span id="virtualinfinal">▌R6.7.10 final 类中不应声明虚函数</span></h3><p>ID_virtualInFinal&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>final 类不再产生派生类，其中的虚函数也不会再被重写，故不应声明虚函数。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">final</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;  <span class="comment">// Non-compliant, a new virtual function in a final class</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">bar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">final</span>: <span class="keyword">public</span> B &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">bar</span><span class="params">()</span></span>;  <span class="comment">// Non-compliant, use keyword ‘override’ or ‘final’</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-90"><a href="#依据-90" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2011 9(3)<br>ISO&#x2F;IEC 14882:2017 12(3)<br><br/><br><br/></p><h3 id="6-8-Bitfield"><a href="#6-8-Bitfield" class="headerlink" title="6.8 Bitfield"></a><span id="declaration.bitfield">6.8 Bitfield</span></h3><h3 id="▌R6-8-1-对位域声明合理的类型"><a href="#▌R6-8-1-对位域声明合理的类型" class="headerlink" title="▌R6.8.1 对位域声明合理的类型"></a><span id="improperbitfieldtype">▌R6.8.1 对位域声明合理的类型</span></h3><p>ID_improperBitfieldType&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>为了提高可移植性和可维护性，应对位域声明合理的类型，如：  </p><ul><li>显式声明 signed 或 unsigned 的整数类型  </li><li>C++ 语言的 bool 或 C 语言的 _Bool 类型  </li><li>各种实现中取值范围均一致的整数类型</li></ul><p>C90 标准只允许 signed int 或 unsigned int 作为位域类型，在之后的 C 标准以及 C++14 之前的 C++ 标准中，用于位域的 char、short、int、long 或 long long 等整数类型是否有符号由实现定义。  </p><p>为了避免意料之外的符号扩展、溢出等问题，建议统一使用无符号整型作为位域类型。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">char</span> c: <span class="number">2</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>char 是否有符号由实现定义，位域 c 的取值范围可能是 [-2, 1] 也可能是 [0, 3]，故应明确声明位域的符号属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">struct A &#123;</span><br><span class="line">    unsigned char c: 2;   // Compliant, or use uint8_t</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct B &#123;</span><br><span class="line">    unsigned long a: 4;    // Bad</span><br><span class="line">    unsigned long b: 32;   // Bad</span><br><span class="line">    unsigned long c: 24;   // Bad</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中结构体只涉及 60 个比特位，但由于 long 的取值范围是由实现定义的，结构体的内存布局在不同的平台上会有较大差异，可能会产生意料之外的填充数据，造成对接口或协议的解析错误。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span>   <span class="comment">// Or &lt;cstdint&gt; in C++</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> a: <span class="number">4</span>;    <span class="comment">// OK</span></span><br><span class="line">    <span class="type">uint64_t</span> b: <span class="number">32</span>;   <span class="comment">// OK</span></span><br><span class="line">    <span class="type">uint64_t</span> c: <span class="number">24</span>;   <span class="comment">// OK</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="配置-12"><a href="#配置-12" class="headerlink" title="配置"></a>配置</h4><p>bitfieldMustBeUnsigned：位域类型是否必须为无符号整型<br>bitfieldMustBeStdInt：位域类型是否必须为 stdint.h 或 cstdint 中定义的类型<br><br/></p><h4 id="依据-91"><a href="#依据-91" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 J.3.9(1)-implementation<br>ISO&#x2F;IEC 9899:2011 J.3.9(1)-implementation<br>ISO&#x2F;IEC 14882:2003 9.6(3)-implementation<br>ISO&#x2F;IEC 14882:2011 9.6(3)-implementation<br><br/></p><h4 id="参考-147"><a href="#参考-147" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 6.4<br>MISRA C 2012 6.1<br>MISRA C++ 2008 9-6-2<br><br/><br><br/></p><h3 id="▌R6-8-2-位域长度不应超过类型长度"><a href="#▌R6-8-2-位域长度不应超过类型长度" class="headerlink" title="▌R6.8.2 位域长度不应超过类型长度"></a><span id="exceededbitfield">▌R6.8.2 位域长度不应超过类型长度</span></h3><p>ID_exceededBitfield&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>位域长度超过类型长度易误导维护者，而且也可能是笔误。  </p><p>C 标准不允许位域长度超过类型长度，但 C++ 标准允许，超过的部分作为“padding bits”不参与数据的存储。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> x: <span class="number">64</span>;    <span class="comment">// Non-compliant</span></span><br><span class="line">&#125; a;</span><br><span class="line"></span><br><span class="line">a.x = UINT64_MAX;      <span class="comment">// Truncated </span></span><br></pre></td></tr></table></figure><p>例中 x 的位域长度超过了类型长度，但有效位域长度仍为 32，有效位域和声明位域不一致易误导维护者，造成截断或溢出等错误。  </p><p>如果是为了特殊的对齐，可改用成员占位的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct A &#123;</span><br><span class="line">    int32_t x;         // Compliant</span><br><span class="line">    int32_t padding;   // Compliant</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>成员 padding 特殊的名称表明它是用于占位的特殊成员，这种方式比位域更有利于维护。<br><br/><br><br/></p><h4 id="依据-92"><a href="#依据-92" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.7.2.1(3)<br>ISO&#x2F;IEC 9899:2011 6.7.2.1(4)<br>ISO&#x2F;IEC 14882:2003 9.6(1)<br>ISO&#x2F;IEC 14882:2011 9.6(1)<br><br/><br><br/></p><h3 id="▌R6-8-3-有符号整型对象的位域长度不应为-1"><a href="#▌R6-8-3-有符号整型对象的位域长度不应为-1" class="headerlink" title="▌R6.8.3 有符号整型对象的位域长度不应为 1"></a><span id="singlesignedbitfield">▌R6.8.3 有符号整型对象的位域长度不应为 1</span></h3><p>ID_singleSignedBitfield&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>有符号整型对象的位域长度如果为 1 表示只有一个比特位，而该比特位是符号位，极易造成意料之外的错误。  </p><p>本规则不针对匿名成员。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">X</span> &#123;</span><br><span class="line">    <span class="type">signed</span> a: <span class="number">1</span>;     <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line">    <span class="type">signed</span>  : <span class="number">0</span>;     <span class="comment">// Compliant</span></span><br><span class="line">    <span class="type">signed</span>  : <span class="number">1</span>;     <span class="comment">// Compliant</span></span><br><span class="line">    <span class="type">signed</span> b: <span class="number">2</span>;     <span class="comment">// Compliant</span></span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> c: <span class="number">1</span>;   <span class="comment">// Compliant</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    X x;</span><br><span class="line">    x.a = <span class="number">1</span>, x.b = <span class="number">1</span>, x.c = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %u\n&quot;</span>, x.a, x.b, x.c);   <span class="comment">// What is output?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 -1 1 1，按常规思维，x.b 和 x.c 为 1 与预期相符，x.a 预期是 1，但实际是 -1。<br><br/><br><br/></p><h4 id="参考-148"><a href="#参考-148" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 9-6-4<br><br/><br><br/></p><h3 id="▌R6-8-4-不应对枚举对象声明位域"><a href="#▌R6-8-4-不应对枚举对象声明位域" class="headerlink" title="▌R6.8.4 不应对枚举对象声明位域"></a><span id="forbidenumbitfield">▌R6.8.4 不应对枚举对象声明位域</span></h3><p>ID_forbidEnumBitfield&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: declaration warning</p><hr/><p>枚举类型是否有符号由实现定义，而且符号位与位域结合易导致意料之外的错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">E</span> &#123;</span><br><span class="line">    A, B, C, D</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">X</span> &#123;</span><br><span class="line">    E e: <span class="number">2</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    X x;</span><br><span class="line">    x.e = D;</span><br><span class="line">    <span class="keyword">if</span> (x.e == D) &#123;    <span class="comment">// What is output?</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Oops&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能输出 Oops。例中枚举项的取值范围是 [0, 3]，位域长度为 2 即可满足这个范围，但如果位域有符号位，会导致意料之外的问题，如用 D 对 x.e 赋值，但 x.e &#x3D;&#x3D; D 的结果却是 false （因为 D 的值为 3 而 x.e 的值为 -1）。  </p><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enum E: unsigned &#123;   // Explicit underlying type</span><br><span class="line">    A, B, C, D</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct X &#123;</span><br><span class="line">    E e: 2;   // Compliant</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在遵循 C++11 及之后标准的代码中，如果显式指定了枚举类型的的底层类型，可不受本规则限制。<br><br/><br><br/></p><h4 id="相关-90"><a href="#相关-90" class="headerlink" title="相关"></a>相关</h4><p>ID_improperBitfieldType<br>ID_singleSignedBitfield<br><br/></p><h4 id="依据-93"><a href="#依据-93" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.7.2.2(4)-implementation<br>ISO&#x2F;IEC 9899:2011 6.7.2.2(4)-implementation<br>ISO&#x2F;IEC 14882:2011 7.2(6)-implementation<br>ISO&#x2F;IEC 14882:2017 10.2(7)-implementation<br><br/></p><h4 id="参考-149"><a href="#参考-149" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 9-6-3<br><br/><br><br/></p><h3 id="▌R6-8-5-禁用位域"><a href="#▌R6-8-5-禁用位域" class="headerlink" title="▌R6.8.5 禁用位域"></a><span id="forbidbitfield">▌R6.8.5 禁用位域</span></h3><p>ID_forbidBitfield&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: declaration suggestion</p><hr/><p>位域改变了类型约定俗成的取值范围和存储方式，易造成理解上的偏差，增加维护成本，在不受特定协议限制的代码中不应使用位域。  </p><p>位域与“引用”等 C++ 概念有冲突，而且标准在位域的内存布局等方面定义的不够充分，存在很多由实现定义的内容，要特别注意的是多线程访问位域还会造成数据竞争，参见 ID_bitfieldDataRaces。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> x: <span class="number">3</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125; a;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>&amp; x = a.x;   <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-91"><a href="#相关-91" class="headerlink" title="相关"></a>相关</h4><p>ID_exceededBitfield<br>ID_singleSignedBitfield<br>ID_bitfieldDataRaces<br>ID_forbidEnumBitfield<br><br/></p><h4 id="依据-94"><a href="#依据-94" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 J.3.9(1)-implementation<br>ISO&#x2F;IEC 9899:2011 J.3.9(1)-implementation<br>ISO&#x2F;IEC 14882:2003 9.6(1)-implementation<br>ISO&#x2F;IEC 14882:2003 9.6(3)<br>ISO&#x2F;IEC 14882:2011 9.6(1)-implementation<br>ISO&#x2F;IEC 14882:2011 9.6(3)<br>ISO&#x2F;IEC 14882:2017 12.2.4(1)-implementation<br>ISO&#x2F;IEC 14882:2017 12.2.4(3)<br><br/><br><br/></p><h3 id="6-9-Complexity"><a href="#6-9-Complexity" class="headerlink" title="6.9 Complexity"></a><span id="declaration.complexity">6.9 Complexity</span></h3><h3 id="▌R6-9-1-不应采用复杂的声明"><a href="#▌R6-9-1-不应采用复杂的声明" class="headerlink" title="▌R6.9.1 不应采用复杂的声明"></a><span id="complexdeclaration">▌R6.9.1 不应采用复杂的声明</span></h3><p>ID_complexDeclaration&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>复杂的声明可读性较差，容易造成理解上的偏差。  </p><p>对于：  </p><ul><li>函数指针的数组  </li><li>返回函数指针、数组指针的函数  </li><li>以函数指针、数组指针为参数的函数</li></ul><p>应先将各子类型取别名，再用简单声明的方式书写。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> (*<span class="built_in">foo</span>(<span class="type">int</span>))(<span class="type">bool</span>);   <span class="comment">// Bad, returns a function pointer</span></span><br><span class="line"><span class="built_in">int</span> (*<span class="built_in">foo</span>(<span class="type">char</span>))[<span class="number">123</span>];   <span class="comment">// Bad, returns an array pointer</span></span><br></pre></td></tr></table></figure><p>例中声明的是两个函数，但看起来像是函数指针，而且参数列表也显得混乱。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*funptr)</span><span class="params">(<span class="type">bool</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*arrptr)</span>[123]</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">funptr <span class="title">foo</span><span class="params">(<span class="type">int</span>)</span></span>;    <span class="comment">// Good</span></span><br><span class="line"><span class="function">arrptr <span class="title">foo</span><span class="params">(<span class="type">char</span>)</span></span>;   <span class="comment">// Good</span></span><br></pre></td></tr></table></figure><br/><br/><br/><h3 id="▌R6-9-2-声明中不应包含过多的指针嵌套"><a href="#▌R6-9-2-声明中不应包含过多的指针嵌套" class="headerlink" title="▌R6.9.2 声明中不应包含过多的指针嵌套"></a><span id="toomanyptrlevel">▌R6.9.2 声明中不应包含过多的指针嵌套</span></h3><p>ID_tooManyPtrLevel&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>指针嵌套层级过多意味着指针的解引用逻辑过于复杂，相关代码将难以理解，指针嵌套不宜超过 2 级。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T *** x;   <span class="comment">// Bad</span></span><br><span class="line">T * <span class="keyword">volatile</span> * * <span class="type">const</span> * y;   <span class="comment">// Terrible</span></span><br></pre></td></tr></table></figure><p>例中 T 为任意类型，如果发现这种指针，意味着需要改进对相关数据的访问方式。  </p><p>出于灵活性的考虑，非连续的指针嵌套可不受本规则约束，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int** (*pa)[100];   // Let it go</span><br><span class="line">int** (*pf)(int);   // Let it go</span><br></pre></td></tr></table></figure><p>例中 pa 是指向数组的指针，数组元素为 2 级指针，pf 是函数指针，函数返回 2 级指针，这种情况是可接受的。<br><br/><br><br/></p><h4 id="配置-13"><a href="#配置-13" class="headerlink" title="配置"></a>配置</h4><p>maxPtrLevel：指针嵌套的最大层数，超过则报出<br><br/></p><h4 id="相关-92"><a href="#相关-92" class="headerlink" title="相关"></a>相关</h4><p>ID_complexDeclaration<br><br/></p><h4 id="参考-150"><a href="#参考-150" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 17.5<br>MISRA C 2012 18.5<br><br/><br><br/></p><h3 id="▌R6-9-3-在一个语句中不应声明多个对象或函数"><a href="#▌R6-9-3-在一个语句中不应声明多个对象或函数" class="headerlink" title="▌R6.9.3 在一个语句中不应声明多个对象或函数"></a><span id="toomanydeclarators">▌R6.9.3 在一个语句中不应声明多个对象或函数</span></h3><p>ID_tooManyDeclarators&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>在一个语句中声明多个对象或函数不利于阅读和维护，建议在一个语句中只声明一个对象或函数。  </p><p>函数、数组以及相关指针、引用的声明相对复杂，不应和其他声明混在一起。为了便于查阅，对于类及结构体成员、全局对象、具有外部链接性或静态存储期的对象，也不应将多项声明混在一个语句中。对于简单的局部对象声明可适当放宽要求，但仍以一个语句一项声明为宜。  </p><p>不应将指针、引用、数组、函数等不同类别的声明混在一个语句中，对此本规则特化为  ID_mixedDeclarations。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a, b, c, d, e, f, g, ....;   <span class="comment">// Non-compliant, too many objects</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fn1</span><span class="params">(<span class="type">void</span>)</span>, <span class="title">fn2</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>*)</span>, <span class="title">fn3</span><span class="params">(<span class="type">int</span>)</span></span>;   <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j, k;   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中一个语句声明多个函数、成员或全局对象是不符合要求的。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void foo() &#123;</span><br><span class="line">    int long_name, name;             // Non-compliant</span><br><span class="line">    int u = complex_expression, v;   // Non-compliant</span><br><span class="line">    ....</span><br><span class="line">    int x, y;   // Simple declarations, let it go?</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于局部对象，审计工具不妨统计声明项及其初始化表达式的字符个数，如果超过指定限制，则判其应在单独的语句中声明。<br><br/><br><br/></p><h4 id="配置-14"><a href="#配置-14" class="headerlink" title="配置"></a>配置</h4><p>maxLocalDeclaratorCount：局部作用域中一个语句能声明的对象个数上限，超过则报出<br>maxMemberDeclaratorCount：类或结构体中一个语句能声明的对象个数上限，超过则报出<br>maxGlobalDeclaratorCount：全局及命名空间作用域中一个语句能声明的对象个数上限，超过则报出<br>simpleDeclaratorLengthThreshold：声明字符数量阈值，超过此值则判其应在单独的语句中声明<br><br/></p><h4 id="相关-93"><a href="#相关-93" class="headerlink" title="相关"></a>相关</h4><p>ID_mixedDeclarations<br><br/></p><h4 id="参考-151"><a href="#参考-151" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.10<br>MISRA C++ 2008 8-0-1<br><br/><br><br/></p><h3 id="6-10-Other"><a href="#6-10-Other" class="headerlink" title="6.10 Other"></a><span id="declaration.other">6.10 Other</span></h3><h3 id="▌R6-10-1-遵循-One-Definition-Rule"><a href="#▌R6-10-1-遵循-One-Definition-Rule" class="headerlink" title="▌R6.10.1 遵循 One Definition Rule"></a><span id="violateodr">▌R6.10.1 遵循 One Definition Rule</span></h3><p>ID_violateODR&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>One Definition Rule 即任何翻译单元不得包含对象、函数、类型或模板的多个定义，否则会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In a.cpp</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">T</span> &#123;    <span class="comment">// One Definition</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">T* <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In b.cpp</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">T</span> &#123;    <span class="comment">// Non-compliant, another definition</span></span><br><span class="line">    <span class="type">long</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(T*)</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In c.cpp</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">T</span>;</span><br><span class="line"><span class="function">T* <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(T*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">baz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">bar</span>(<span class="built_in">foo</span>());   <span class="comment">// Problems</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 T 类型在两个翻译单元中有不同的定义，违反了 One Definition Rule，易造成难以排查的错误，应在头文件中统一定义类型。<br><br/><br><br/></p><h4 id="依据-95"><a href="#依据-95" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 3.2(5)-undefined<br>ISO&#x2F;IEC 14882:2011 3.2(5)-undefined<br><br/></p><h4 id="参考-152"><a href="#参考-152" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 3-2-2<br><br/><br><br/></p><h3 id="▌R6-10-2-声明与实现应一致"><a href="#▌R6-10-2-声明与实现应一致" class="headerlink" title="▌R6.10.2 声明与实现应一致"></a><span id="inconsistentdeclaration">▌R6.10.2 声明与实现应一致</span></h3><p>ID_inconsistentDeclaration&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>声明与实现在书写上应完全一致，否则极易引起误解，而且对同一对象或函数进行类型不兼容的声明，也会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">long</span> n;   <span class="comment">// Non-compliant, undefined behavior</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n++;   <span class="comment">// Undefined behavior</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">short</span> n;</span><br></pre></td></tr></table></figure><p>例中变量 n 有多处声明，但类型不一致，会导致标准未定义的行为。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int foo(int x);</span><br><span class="line"></span><br><span class="line">typedef int type;</span><br><span class="line">type foo(type x) &#123;   // Non-compliant, confusing</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中在实现处为参数类型定义别名是不符合要求的，在允许重载的 C++ 代码中会引起更大的误解。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> type;</span><br><span class="line"><span class="function">type <span class="title">foo</span><span class="params">(type x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">type <span class="title">foo</span><span class="params">(type x)</span> </span>&#123;   <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-94"><a href="#相关-94" class="headerlink" title="相关"></a>相关</h4><p>ID_inconsistentParamName<br><br/></p><h4 id="依据-96"><a href="#依据-96" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.2.7(2)-undefined<br>ISO&#x2F;IEC 9899:2011 6.2.7(2)-undefined<br><br/></p><h4 id="参考-153"><a href="#参考-153" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 8.4<br>MISRA C 2012 8.3<br>MISRA C++ 2008 3-9-1<br>SEI CERT DCL40-C<br><br/><br><br/></p><h3 id="▌R6-10-3-在合理的位置声明"><a href="#▌R6-10-3-在合理的位置声明" class="headerlink" title="▌R6.10.3 在合理的位置声明"></a><span id="unsuitabledeclaration">▌R6.10.3 在合理的位置声明</span></h3><p>ID_unsuitableDeclaration&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>如果声明的位置不合理会降低代码的可维护性，甚至会导致标准未定义的行为。  </p><p>应遵循如下原则：  </p><ul><li>外部链接的对象或函数应在头文件中声明，并避免重复声明  </li><li>内部链接的对象或函数应在源文件中声明，不应在头文件中声明  </li><li>避免在头文件外手工书写外部声明  </li><li>避免在局部作用域内声明函数或全局对象</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="type">int</span> g;       <span class="comment">// Non-compliant, bad practice</span></span><br><span class="line">    <span class="function"><span class="keyword">extern</span> <span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;   <span class="comment">// Non-compliant, bad practice</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">bar</span><span class="params">()</span></span>;   <span class="comment">// Non-compliant, undefined behavior</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外部链接的对象或函数应通过头文件引入，如果分散在函数中声明是不便于统一管理和维护的。另外，在局部作用域中使用除 extern 之外的存储类说明符声明函数会导致标准未定义的行为。<br><br/><br><br/></p><h4 id="相关-95"><a href="#相关-95" class="headerlink" title="相关"></a>相关</h4><p>ID_staticInHeader<br>ID_anonymousNamespaceInHeader<br><br/></p><h4 id="依据-97"><a href="#依据-97" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.7.1(5)-undefined<br>ISO&#x2F;IEC 9899:2011 6.7.1(7)-undefined<br><br/></p><h4 id="参考-154"><a href="#参考-154" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 3-1-2<br>MISRA C++ 2008 3-3-1<br><br/><br><br/></p><h3 id="▌R6-10-4-不应存在没有被用到的标签"><a href="#▌R6-10-4-不应存在没有被用到的标签" class="headerlink" title="▌R6.10.4 不应存在没有被用到的标签"></a><span id="labelnotused">▌R6.10.4 不应存在没有被用到的标签</span></h3><p>ID_labelNotUsed&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>没有被用到的标签意味着 goto 语句的缺失，也可能是残留代码，应当去除。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">lab:                 <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bar</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标签只应与 goto 语句对应，不可有其他用途，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int bar(int x) &#123;</span><br><span class="line">    int i = 0;</span><br><span class="line">strange_comment:     // Non-compliant</span><br><span class="line">    return x + i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中标签被当作注释，这是一种怪异的用法，也可能会干扰编译器的优化。<br><br/><br><br/></p><h4 id="参考-155"><a href="#参考-155" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 2.6<br><br/><br><br/></p><h3 id="▌R6-10-5-不应存在没有被用到的静态声明"><a href="#▌R6-10-5-不应存在没有被用到的静态声明" class="headerlink" title="▌R6.10.5 不应存在没有被用到的静态声明"></a><span id="staticnotused">▌R6.10.5 不应存在没有被用到的静态声明</span></h3><p>ID_staticNotUsed&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>没有被用到的静态声明往往是没有意义的，应删除或修正引用关系。  </p><p>类的静态成员可不受本规则限制。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;   <span class="comment">// Compliant, used</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">bar</span><span class="params">()</span></span>;   <span class="comment">// Non-compliant, unused</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">foo</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-96"><a href="#相关-96" class="headerlink" title="相关"></a>相关</h4><p>ID_unreachableCode<br><br/></p><h4 id="参考-156"><a href="#参考-156" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 0-1-10<br><br/><br><br/></p><h3 id="▌R6-10-6-不应存在没有被用到的-private-成员"><a href="#▌R6-10-6-不应存在没有被用到的-private-成员" class="headerlink" title="▌R6.10.6 不应存在没有被用到的 private 成员"></a><span id="privatenotused">▌R6.10.6 不应存在没有被用到的 private 成员</span></h3><p>ID_privateNotUsed&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>没有被用到的 private 成员是没有意义的，应删除或修正引用关系。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;     <span class="comment">// Compliant</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> bar;                    <span class="comment">// Non-compliant, unused</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>)</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;  <span class="comment">// Non-compliant, unused</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-97"><a href="#相关-97" class="headerlink" title="相关"></a>相关</h4><p>ID_unreachableCode<br><br/></p><h4 id="参考-157"><a href="#参考-157" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 0-1-10<br><br/><br><br/></p><h3 id="▌R6-10-7-不应省略声明对象或函数的类型"><a href="#▌R6-10-7-不应省略声明对象或函数的类型" class="headerlink" title="▌R6.10.7 不应省略声明对象或函数的类型"></a><span id="missingtype">▌R6.10.7 不应省略声明对象或函数的类型</span></h3><p>ID_missingType&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>C90 允许省略对象或函数的类型声明，但实践表明这并不是一种好的编程方式，可读性较差。  </p><p>本规则仅针对 C 语言，C++ 语言不存在这种问题。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> a;     <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="type">const</span> b;      <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="built_in">fun</span>(<span class="type">void</span>);    <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="keyword">typedef</span> tp;   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中 a、b、fun、tp 的类型被省略，默认为 int 型，应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a;     <span class="comment">// Compliant</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b;      <span class="comment">// Compliant</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">void</span>)</span></span>;    <span class="comment">// Compliant</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> tp;   <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-158"><a href="#参考-158" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 8.2<br>MISRA C 2012 8.1<br><br/><br><br/></p><h3 id="▌R6-10-8-用-stdint-h-中的类型代替-short、int、long-等类型"><a href="#▌R6-10-8-用-stdint-h-中的类型代替-short、int、long-等类型" class="headerlink" title="▌R6.10.8 用 stdint.h 中的类型代替 short、int、long 等类型"></a><span id="unportabletype">▌R6.10.8 用 stdint.h 中的类型代替 short、int、long 等类型</span></h3><p>ID_unportableType&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: declaration suggestion</p><hr/><p>short、int、long 等类型的取值范围由执行环境的架构决定，可移植性较差。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">int</span> x;    <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> y;   <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="type">short</span> z;       <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中成员变量在不同的平台会有不同的取值范围，C99 引入 stdint.h 解决了这一问题。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span>   <span class="comment">// Or &lt;cstdint&gt; in C++</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    <span class="type">int32_t</span> x;   <span class="comment">// Compliant</span></span><br><span class="line">    <span class="type">int64_t</span> y;   <span class="comment">// Compliant</span></span><br><span class="line">    <span class="type">int16_t</span> z;   <span class="comment">// Compliant</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另外，char、wchar_t 等基本类型均有此问题，在有高可移植性要求的代码中应避免直接使用基本类型。<br><br/><br><br/></p><h4 id="依据-98"><a href="#依据-98" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:2011 6.2.5(5)<br>ISO&#x2F;IEC 9899:2011 7.20<br>ISO&#x2F;IEC 14882:2011 3.9.1(2)<br><br/></p><h4 id="参考-159"><a href="#参考-159" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 6.3<br>MISRA C 2012 Dir 4.6<br><br/><br><br/></p><h3 id="▌R6-10-9-避免使用-std-auto-ptr"><a href="#▌R6-10-9-避免使用-std-auto-ptr" class="headerlink" title="▌R6.10.9 避免使用 std::auto_ptr"></a><span id="deprecatedautoptr">▌R6.10.9 避免使用 std::auto_ptr</span></h3><p>ID_deprecatedAutoPtr&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: declaration warning</p><hr/><p>std::auto_ptr 在 C++11 标准中已被废弃，应使用 std::unique_ptr。  </p><p>std::auto_ptr 在转移资源所有权等方面易被误用，std::unique_ptr 在相关方面有更严格的限制。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123; .... &#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(auto_ptr&lt;T&gt; p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">auto_ptr&lt;T&gt; <span class="title">a</span><span class="params">(<span class="keyword">new</span> T)</span></span>;</span><br><span class="line">auto_ptr&lt;T&gt; b;</span><br><span class="line">....</span><br><span class="line">b = a;      <span class="comment">// ‘a’ is invalid after the assignment</span></span><br><span class="line"><span class="built_in">bar</span>(b);     <span class="comment">// ‘b’ is invalid after this call</span></span><br><span class="line">....        <span class="comment">// Undefined behavior if dereference ‘a’ or ‘b’</span></span><br></pre></td></tr></table></figure><p>auto_ptr 对象的赋值或按值传参都会引起资源所有权的转移，如 b &#x3D; a 表示 a 的资源被 b 占有，foo(b) 表示 b 的资源被参数占有，之后再对 a 或 b 解引用就会造成错误，这种方式很容易被人误解，C++11 标准已弃用。  </p><p>unique_ptr 禁止资源所有权的隐式转移，语义更为明确：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unique_ptr&lt;T&gt; a = make_unique&lt;T&gt;();</span><br><span class="line">unique_ptr&lt;T&gt; b;</span><br><span class="line">....</span><br><span class="line">b = move(a);   // OK, explicit moving</span><br><span class="line">foo(b);        // Compile error</span><br></pre></td></tr></table></figure><p>unique_ptr 对象必须通过 move 显式转移资源所有权，否则无法通过编译。<br><br/><br><br/></p><h4 id="依据-99"><a href="#依据-99" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2011 D.10-deprecated<br><br/></p><h4 id="参考-160"><a href="#参考-160" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines R.20<br><br/><br><br/></p><h2 id="7-Exception"><a href="#7-Exception" class="headerlink" title="7. Exception"></a><span id="exception">7. Exception</span></h2><h3 id="▌R7-1-保证异常安全"><a href="#▌R7-1-保证异常安全" class="headerlink" title="▌R7.1 保证异常安全"></a><span id="exceptionunsafe">▌R7.1 保证异常安全</span></h3><p>ID_exceptionUnsafe&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: exception warning</p><hr/><p>当产生异常时，保证：  </p><ul><li>相关资源不会泄漏  </li><li>相关对象处于正确状态</li></ul><p>是 C++ 异常机制可以正确工作的重要基础。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">lock</span>();</span><br><span class="line">    <span class="built_in">procedure_may_throw</span>();  <span class="comment">// Unsafe</span></span><br><span class="line">    <span class="built_in">unlock</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设 lock 是某种获取资源的操作，unlock 是释放资源的操作，procedure_may_throw 是可能抛出异常的过程，那么 foo 函数就不是异常安全的，一旦有异常抛出会导致死锁或泄露等问题。  </p><p>应保证资源从分配到回收的过程不被异常中断，采用对象化管理方法，使分配和回收得以自动完成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void foo() &#123;</span><br><span class="line">    LockOwner object;</span><br><span class="line">    procedure_may_throw();  // Safe</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 lock 和 unlock 分别由 object 的构造和析构函数完成，即使 procedure_may_throw 抛出异常，相关资源也可被自动回收，实现了异常安全，资源的对象化管理方法可参见 ID_ownerlessResource。  </p><p>异常安全的另一个重要方面是抛出异常时应保证相关对象的状态是正确的，事务或算法在处理对象时可能要分多个步骤处理对象的多个成员，要注意中途抛出异常会造成数据不一致等问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class X &#123;</span><br><span class="line">    T a, b;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    void foo() &#123;</span><br><span class="line">        proc(a);</span><br><span class="line">        // ... if throw an exception ...</span><br><span class="line">        proc(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>设 a 和 b 是两个密切相关的成员，如账号和金额等，foo 是一个处理事务的函数，如果在中途抛出异常就会使对象处于错误的状态，解决方法可以考虑“复制 - 交换”模式，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class X &#123;</span><br><span class="line">    T a, b;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    void foo() &#123;</span><br><span class="line">        X copy(*this);</span><br><span class="line">        proc(copy.a);</span><br><span class="line">        proc(copy.b);</span><br><span class="line">        this-&gt;swap(copy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void swap(X&amp; v) noexcept &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>事务先处理对象的副本，处理成功后交换副本与对象的数据，交换过程需要保证不抛出异常，这样从对象副本的生成到事务处理完毕的过程中即使抛出异常也不影响对象的状态。  </p><p>swap 过程不可抛出异常也是一个规则，参见 ID_throwInSwap。<br><br/><br><br/></p><h4 id="相关-98"><a href="#相关-98" class="headerlink" title="相关"></a>相关</h4><p>ID_resourceLeak<br>ID_ownerlessResource<br>ID_throwInSwap<br><br/></p><h4 id="参考-161"><a href="#参考-161" class="headerlink" title="参考"></a>参考</h4><p>Effective C++ item 29<br><br/><br><br/></p><h3 id="▌R7-2-不应抛出过于宽泛的异常"><a href="#▌R7-2-不应抛出过于宽泛的异常" class="headerlink" title="▌R7.2 不应抛出过于宽泛的异常"></a><span id="throwgenericexception">▌R7.2 不应抛出过于宽泛的异常</span></h3><p>ID_throwGenericException&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: exception warning</p><hr/><p>抛出过于宽泛的异常，如 std::exception、std::logic_error、std::runtime_error 等，会使异常处理失去针对性，而且处理这种异常时很可能会将本不应处理的异常一并捕获，造成混乱。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">exception</span>();  <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bar</span>(a);  <span class="comment">// Other exceptions may be thrown</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">baz</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">foo</span>(a);</span><br><span class="line">    &#125; <span class="built_in">catch</span> (std::exception&amp; e) &#123;  <span class="comment">// Other exceptions are also caught</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>foo 函数在参数不符合要求时抛出 std::exception 类的异常，过于宽泛，如果 bar 函数也抛出从 std::exception 派生的异常，也会被当作“参数不符合要求”处理，这显然是错误的。  </p><p>正确的做法是为各种异常定义具体的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class WrongArg &#123;</span><br><span class="line">public:</span><br><span class="line">    WrongArg() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int foo(int a) &#123;</span><br><span class="line">    if (a &lt; 0) &#123;</span><br><span class="line">        throw WrongArg();  // Compliant</span><br><span class="line">    &#125;</span><br><span class="line">    return bar(a);  // Other exceptions may be thrown</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void baz(int a) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        foo(a);</span><br><span class="line">    &#125; catch (WrongArg&amp; e) &#123;  // Right</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-99"><a href="#相关-99" class="headerlink" title="相关"></a>相关</h4><p>ID_catch_generic<br><br/></p><h4 id="参考-162"><a href="#参考-162" class="headerlink" title="参考"></a>参考</h4><p>CWE-397<br><br/><br><br/></p><h3 id="▌R7-3-不应捕获过于宽泛的异常"><a href="#▌R7-3-不应捕获过于宽泛的异常" class="headerlink" title="▌R7.3 不应捕获过于宽泛的异常"></a><span id="catch_generic">▌R7.3 不应捕获过于宽泛的异常</span></h3><p>ID_catch_generic&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: exception warning</p><hr/><p>捕获过于宽泛的异常会使异常处理失去针对性，而且很可能会将本不应处理的异常一并捕获，造成混乱。  </p><p>相关讨论详见 ID_throwGenericException。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="built_in">catch</span> (std::logic_error&amp;) &#123;   <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="built_in">catch</span> (std::runtime_error&amp;) &#123;   <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="built_in">catch</span> (std::exception&amp;) &#123;   <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-100"><a href="#相关-100" class="headerlink" title="相关"></a>相关</h4><p>ID_throwGenericException<br><br/></p><h4 id="参考-163"><a href="#参考-163" class="headerlink" title="参考"></a>参考</h4><p>CWE-396<br><br/><br><br/></p><h3 id="▌R7-4-不应抛出非异常类型的对象"><a href="#▌R7-4-不应抛出非异常类型的对象" class="headerlink" title="▌R7.4 不应抛出非异常类型的对象"></a><span id="thrownonexceptiontype">▌R7.4 不应抛出非异常类型的对象</span></h3><p>ID_throwNonExceptionType&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: exception warning</p><hr/><p>不应将整数、字符串等非异常相关的对象当作异常抛出，否则意味着异常相关的设计是不健全的。  </p><p>完善的异常类型应满足：  </p><ul><li>将异常情况合理分类  </li><li>提供对异常情况的准确描述  </li><li>使异常便于处理和调试</li></ul><p>非异常类型难以满足这种需求。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cond) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="number">1</span>;       <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;message&quot;</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整数或字符串无法区分异常的种类，如果不同的模块均将简单变量作为异常，很容易产生冲突。  </p><p>应为各种异常定义具体的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Error &#123; .... &#125;;</span><br><span class="line">class Exception &#123; .... &#125;;</span><br><span class="line"></span><br><span class="line">void foo() &#123;</span><br><span class="line">    if (cond) &#123;</span><br><span class="line">        throw Error(1);           // Compliant</span><br><span class="line">    &#125;</span><br><span class="line">    throw Exception(&quot;message&quot;);   // Compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，throw、try、catch 等关键字应专注于异常处理，不应使用这些关键字控制程序的业务流程，业务代码与异常处理代码应有明显区别，否则会使代码含混不明，效率也会降低，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void bar(const vector&lt;string&gt;&amp; v, const string&amp; s) &#123;</span><br><span class="line">    auto b = v.begin();</span><br><span class="line">    auto e = v.end();</span><br><span class="line">    for (auto i = b; i != e; ++i) &#123;</span><br><span class="line">        if (*i == s) &#123;</span><br><span class="line">            throw i - b;   // Non-compliant</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    throw -1;   // Non-compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 bar 抛出字符串 s 在容器 v 中的位置，用异常机制实现与异常无关的功能，是不符合要求的。<br><br/><br><br/></p><h4 id="相关-101"><a href="#相关-101" class="headerlink" title="相关"></a>相关</h4><p>ID_catch_nonExceptionType<br><br/></p><h4 id="参考-164"><a href="#参考-164" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines E.14<br>C++ Core Guidelines E.3<br><br/><br><br/></p><h3 id="▌R7-5-不应捕获非异常类型的对象"><a href="#▌R7-5-不应捕获非异常类型的对象" class="headerlink" title="▌R7.5 不应捕获非异常类型的对象"></a><span id="catch_nonexceptiontype">▌R7.5 不应捕获非异常类型的对象</span></h3><p>ID_catch_nonExceptionType&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: exception warning</p><hr/><p>整数、字符串等非异常相关的对象不应被当作异常捕获，否则意味着异常相关的设计是不健全的。  </p><p>相关讨论详见  ID_throwNonExceptionType。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="built_in">catch</span> (<span class="type">int</span>) &#123;   <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="built_in">catch</span> (<span class="type">char</span>*) &#123;   <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="built_in">catch</span> (string&amp;) &#123;   <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-102"><a href="#相关-102" class="headerlink" title="相关"></a>相关</h4><p>ID_throwNonExceptionType<br><br/></p><h4 id="参考-165"><a href="#参考-165" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines E.14<br><br/><br><br/></p><h3 id="▌R7-6-析构函数不可抛出异常"><a href="#▌R7-6-析构函数不可抛出异常" class="headerlink" title="▌R7.6 析构函数不可抛出异常"></a><span id="throwindestructor">▌R7.6 析构函数不可抛出异常</span></h3><p>ID_throwInDestructor&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: exception error</p><hr/><p>析构函数抛出异常是违反异常处理机制的。  </p><p>当抛出异常时，从异常被抛出到异常被处理之间的对象，也就是从“throw”到“catch”各层调用栈中的对象会被自动析构，如果在这个过程中某个对象的析构函数又抛出了异常，将引发混乱。标准规定，这种情况会直接引发 std::terminate 函数的执行，所以从析构函数抛出的异常有可能是无法被捕获和处理的。  </p><p>示例（设 E0 和 E1 是不相关的异常类）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    ....</span><br><span class="line">public:</span><br><span class="line">   ~A() try &#123;</span><br><span class="line">        if (cond0) &#123;</span><br><span class="line">            throw E0();    // Non-compliant, propagate out</span><br><span class="line">        &#125;</span><br><span class="line">        else if (cond1) &#123;</span><br><span class="line">            throw E1();    // OK, digested by itself</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (const E1&amp;) &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>建议将析构函数声明为 noexcept。  </p><p>与析构相关的过程也不应抛出异常：  </p><ul><li>资源回收  </li><li>delete、delete[] 运算符  </li><li>具有 free、clear、release 等语义的函数</li></ul><p>另外，具有 swap、hash 等语义以及移动构造或赋值相关的过程也不应抛出异常，详见相关规则。<br><br/><br><br/></p><h4 id="相关-103"><a href="#相关-103" class="headerlink" title="相关"></a>相关</h4><p>ID_throwInDelete<br>ID_throwInHash<br>ID_throwInSwap<br>ID_throwInMove<br><br/></p><h4 id="依据-100"><a href="#依据-100" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 15.2(3)<br>ISO&#x2F;IEC 14882:2011 3.7.4.2(3)-undefined<br>ISO&#x2F;IEC 14882:2011 15.2(3)<br><br/></p><h4 id="参考-166"><a href="#参考-166" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.36<br>C++ Core Guidelines C.37<br>MISRA C++ 2008 15-5-1<br>SEI CERT DCL57-CPP<br><br/><br><br/></p><h3 id="▌R7-7-内存回收函数不可抛出异常"><a href="#▌R7-7-内存回收函数不可抛出异常" class="headerlink" title="▌R7.7 内存回收函数不可抛出异常"></a><span id="throwindelete">▌R7.7 内存回收函数不可抛出异常</span></h3><p>ID_throwInDelete&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: exception error</p><hr/><p>内存回收函数抛出异常会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    ....</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>* p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Exception</span>();    <span class="comment">// Non-compliant, undefined behavior</span></span><br><span class="line">        &#125;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-104"><a href="#相关-104" class="headerlink" title="相关"></a>相关</h4><p>ID_throwInDestructor<br>ID_throwInHash<br>ID_throwInSwap<br>ID_throwInMove<br><br/></p><h4 id="依据-101"><a href="#依据-101" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 15.2(3)<br>ISO&#x2F;IEC 14882:2011 3.7.4.2(3)-undefined<br>ISO&#x2F;IEC 14882:2011 15.2(3)<br><br/></p><h4 id="参考-167"><a href="#参考-167" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines E.16<br><br/><br><br/></p><h3 id="▌R7-8-对象交换过程不可抛出异常"><a href="#▌R7-8-对象交换过程不可抛出异常" class="headerlink" title="▌R7.8 对象交换过程不可抛出异常"></a><span id="throwinswap">▌R7.8 对象交换过程不可抛出异常</span></h3><p>ID_throwInSwap&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: exception warning</p><hr/><p>两个对象在交换（swap）过程中，每个对象的状态都是不完整的，如果在交换中途抛出异常，对象将处于错误的状态。  </p><p>注意，交换是保证异常安全的重要手段，不抛出异常是基本要求，详见 ID_exceptionUnsafe。标准库中存在大量与交换相关的接口和算法，如果抛出异常也会使标准库无法按约定工作，所有交换相关的函数均应标记为 noexcept。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    <span class="type">int</span>* ptr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(T&amp; a)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span>* tmp = ptr;</span><br><span class="line">        ptr = a.ptr;</span><br><span class="line">        <span class="keyword">if</span> (!ptr) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">exception</span>();  <span class="comment">// Non-compliant</span></span><br><span class="line">        &#125;</span><br><span class="line">        a.ptr = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   ~<span class="built_in">T</span>() &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] p;  <span class="comment">// Problems</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-105"><a href="#相关-105" class="headerlink" title="相关"></a>相关</h4><p>ID_exceptionUnsafe<br>ID_throwInMove<br><br/></p><h4 id="参考-168"><a href="#参考-168" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.84<br>C++ Core Guidelines C.85<br><br/><br><br/></p><h3 id="▌R7-9-移动构造函数和移动赋值运算符不可抛出异常"><a href="#▌R7-9-移动构造函数和移动赋值运算符不可抛出异常" class="headerlink" title="▌R7.9 移动构造函数和移动赋值运算符不可抛出异常"></a><span id="throwinmove">▌R7.9 移动构造函数和移动赋值运算符不可抛出异常</span></h3><p>ID_throwInMove&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: exception warning</p><hr/><p>在移动过程中，对象的状态是不完整的，如果在中途抛出异常，对象将处于错误的状态。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">T</span>(T&amp;&amp; a) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">swap</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T&amp; <span class="keyword">operator</span> = (T&amp;&amp; a) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">swap</span>(a);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(T&amp; a)</span> <span class="keyword">noexcept</span> </span>&#123;  <span class="comment">// Do not throw exceptions</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如能保证成员被正确初始化，可采用例中模式有效实现各种移动接口。<br><br/><br><br/></p><h4 id="相关-106"><a href="#相关-106" class="headerlink" title="相关"></a>相关</h4><p>ID_throwInSwap<br><br/></p><h4 id="参考-169"><a href="#参考-169" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.66<br><br/><br><br/></p><h3 id="▌R7-10-异常类的构造函数和异常信息相关的函数不应抛出异常"><a href="#▌R7-10-异常类的构造函数和异常信息相关的函数不应抛出异常" class="headerlink" title="▌R7.10 异常类的构造函数和异常信息相关的函数不应抛出异常"></a><span id="exceptioninexception">▌R7.10 异常类的构造函数和异常信息相关的函数不应抛出异常</span></h3><p>ID_exceptionInException&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: exception warning</p><hr/><p>创建、复制异常对象以及获取异常信息时不应再抛出异常，否则不利于异常的定位与处理。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    string msg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Exception</span>(<span class="type">const</span> <span class="type">char</span>* s) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!s) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">AnotherException</span>();  <span class="comment">// Non-compliant</span></span><br><span class="line">        &#125;</span><br><span class="line">        msg.<span class="built_in">assign</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">what</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">AnotherException</span>();  <span class="comment">// Non-compliant</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> msg.<span class="built_in">c_str</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中在构造函数和 what 函数中抛出异常是不符合要求的，而且要注意 string 的构造及拷贝构造函数需要动态内存分配，当分配失败时也会抛出异常，有高可靠性要求的软件系统需要规避。  </p><p>自定义的异常类可从标准异常类派生，成员也应尽量简单，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Exception: public logic_error &#123;</span><br><span class="line">public:</span><br><span class="line">    explicit Exception(const string&amp; msg):</span><br><span class="line">        logic_error(msg)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中 logic_error 是标准异常类，在实际代码中也可以选择 runtime_error 等其他标准异常类作为基类。<br><br/><br><br/></p><h4 id="依据-102"><a href="#依据-102" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 18.6.1<br>ISO&#x2F;IEC 14882:2011 18.8.1<br><br/></p><h4 id="参考-170"><a href="#参考-170" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 15-1-1<br><br/><br><br/></p><h3 id="▌R7-11-与标准库相关的-hash-过程不应抛出异常"><a href="#▌R7-11-与标准库相关的-hash-过程不应抛出异常" class="headerlink" title="▌R7.11 与标准库相关的 hash 过程不应抛出异常"></a><span id="throwinhash">▌R7.11 与标准库相关的 hash 过程不应抛出异常</span></h3><p>ID_throwInHash&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: exception suggestion</p><hr/><p>对象的 hash 过程中不应抛出异常，否则相关的容器和算法无法正常工作。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">std</span>::hash&lt;MyType&gt; &#123;</span><br><span class="line">    <span class="keyword">using</span> result_type = <span class="type">size_t</span>;</span><br><span class="line">    <span class="keyword">using</span> argument_type = MyType;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> MyType&amp; x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!x.ptr) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">exception</span>();   <span class="comment">// Non-compliant</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hash</span>&lt;<span class="type">size_t</span>&gt;()((<span class="type">size_t</span>)x.ptr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>标准库规定容器的 find、count 等方法应通过返回值表示对象存在与否，然而如果 hash 过程抛出异常，这些方法也会抛出异常，相当于打破了这种约定，易造成意料之外的结果。<br><br/><br><br/></p><h4 id="参考-171"><a href="#参考-171" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.89<br><br/><br><br/></p><h3 id="▌R7-12-通过引用捕获异常"><a href="#▌R7-12-通过引用捕获异常" class="headerlink" title="▌R7.12 通过引用捕获异常"></a><span id="catch_value">▌R7.12 通过引用捕获异常</span></h3><p>ID_catch_value&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: exception warning</p><hr/><p>通过值捕获异常可能会导致“<a href="https://en.wikipedia.org/wiki/Object_slicing">对象切片</a>”，通过指针捕获异常会增加内存管理成本，通过引用捕获异常才是最合理的方式。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="built_in">catch</span> (Exception e) &#123;   <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 Exception 是异常类，用传值的方式捕获异常是不符合要求的。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="built_in">catch</span> (Exception&amp; e) &#123;   <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过指针捕获异常也是不符合要求的，参见 ID_throwPointer。<br><br/><br><br/></p><h4 id="相关-107"><a href="#相关-107" class="headerlink" title="相关"></a>相关</h4><p>ID_catch_slicing<br>ID_throwPointer<br><br/></p><h4 id="参考-172"><a href="#参考-172" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines E.15<br>C++ Core Guidelines ES.63<br>MISRA C++ 2008 15-3-5<br><br/><br><br/></p><h3 id="▌R7-13-捕获异常时不应产生对象切片问题"><a href="#▌R7-13-捕获异常时不应产生对象切片问题" class="headerlink" title="▌R7.13 捕获异常时不应产生对象切片问题"></a><span id="catch_slicing">▌R7.13 捕获异常时不应产生对象切片问题</span></h3><p>ID_catch_slicing&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: exception warning</p><hr/><p>通过值捕获多态类的异常对象，会使对象的多态性失效，造成异常处理方面的错误。  </p><p>本规则是 ID_catch_value 与 ID_objectSlicing 的特化。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    ....</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">const</span> <span class="type">char</span>* <span class="title">what</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="literal">nullptr</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ....   <span class="comment">// If objects derived from Exception may be thrown</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (Exception e) &#123;   <span class="comment">// Non-compliant, use reference instead</span></span><br><span class="line">        <span class="built_in">log</span>(e.<span class="built_in">what</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设例中 Exception 是所有异常类的基类，不论哪种异常被捕获，what 只能返回 nullptr，丧失了多态性，使异常被错误处理。<br><br/><br><br/></p><h4 id="相关-108"><a href="#相关-108" class="headerlink" title="相关"></a>相关</h4><p>ID_catch_value<br>ID_objectSlicing<br><br/></p><h4 id="参考-173"><a href="#参考-173" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.145<br>C++ Core Guidelines ES.63<br><br/><br><br/></p><h3 id="▌R7-14-捕获异常后不应直接再次抛出异常"><a href="#▌R7-14-捕获异常后不应直接再次抛出异常" class="headerlink" title="▌R7.14 捕获异常后不应直接再次抛出异常"></a><span id="catch_justrethrow">▌R7.14 捕获异常后不应直接再次抛出异常</span></h3><p>ID_catch_justRethrow&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: exception warning</p><hr/><p>捕获异常后将其直接再次抛出是没有意义的，还会造成不必要的开销。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">bar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (...) &#123;</span><br><span class="line">        <span class="keyword">throw</span>;      <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中的 catch 是没有意义的，应将其去掉，或对异常进行有效处理。<br><br/><br><br/><br><br/></p><h3 id="▌R7-15-重新抛出异常时应使用空-throw-表达式（throw-）"><a href="#▌R7-15-重新抛出异常时应使用空-throw-表达式（throw-）" class="headerlink" title="▌R7.15 重新抛出异常时应使用空 throw 表达式（throw;）"></a><span id="improperrethrow">▌R7.15 重新抛出异常时应使用空 throw 表达式（throw;）</span></h3><p>ID_improperRethrow&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: exception warning</p><hr/><p>重新抛出异常时应使用空 throw 表达式，避免异常对象的精度损失和不必要的复制开销。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EBase</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EDerive</span>: <span class="keyword">public</span> EBase &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">EDerive</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (EBase&amp; e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;         <span class="comment">// Non-compliant, use ‘throw;’ instead</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">foo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (EDerive&amp; e) &#123;</span><br><span class="line">        ....               <span class="comment">// Cannot catch EDerive</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，例中 foo 函数虽然捕获的是 EDerive 对象，但 throw e; 抛出的是 EBase 对象，这也是一种“<a href="https://en.wikipedia.org/wiki/Object_slicing">对象切片</a>”问题，造成了对象类型的“精度损失”。将 throw e; 改为 throw; 可解决这种问题。<br><br/><br><br/></p><h4 id="依据-103"><a href="#依据-103" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 15.1(6)<br>ISO&#x2F;IEC 14882:2011 15.1(8)<br><br/><br><br/></p><h3 id="▌R7-16-不应在-catch-handler-外使用空-throw-表达式（throw-）"><a href="#▌R7-16-不应在-catch-handler-外使用空-throw-表达式（throw-）" class="headerlink" title="▌R7.16 不应在 catch handler 外使用空 throw 表达式（throw;）"></a><span id="rethrowoutofcatch">▌R7.16 不应在 catch handler 外使用空 throw 表达式（throw;）</span></h3><p>ID_rethrowOutOfCatch&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: exception warning</p><hr/><p>空 throw 表达式用于重新抛出当前捕获的异常，用在 catch handler 外是危险的，增大了流程控制的复杂性。  </p><p>如果当前没有捕获异常的话，空 throw 表达式会引发 std::terminate 函数的执行，这种情况下是否清理调用栈之间的对象则是由实现定义的。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span>;           <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span>;       <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (...) &#123;</span><br><span class="line">        ....         <span class="comment">// Cannot catch &quot;throw;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-104"><a href="#依据-104" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 15.1(6 8)<br>ISO&#x2F;IEC 14882:2003 15.3(9)-implementation<br>ISO&#x2F;IEC 14882:2011 15.1(8 9)<br>ISO&#x2F;IEC 14882:2011 15.3(9)-implementation<br><br/></p><h4 id="参考-174"><a href="#参考-174" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 15-1-3<br><br/><br><br/></p><h3 id="▌R7-17-不应抛出指针"><a href="#▌R7-17-不应抛出指针" class="headerlink" title="▌R7.17 不应抛出指针"></a><span id="throwpointer">▌R7.17 不应抛出指针</span></h3><p>ID_throwPointer&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: exception suggestion</p><hr/><p>抛出指针会增加不必要的内存管理成本，也容易造成意料之外的错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">E</span> &#123; .... &#125; e;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cond) &#123;</span><br><span class="line">        <span class="keyword">throw</span> &amp;e;     <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> E;  <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">foo</span>();</span><br><span class="line">    &#125; <span class="built_in">catch</span> (E* p) &#123;</span><br><span class="line">        ....          <span class="comment">// ‘p’ should be deleted or not??</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中对捕获的异常指针不论释放还是不释放都有问题，改为抛出对象的方式可有效避免这种问题。<br><br/><br><br/></p><h4 id="参考-175"><a href="#参考-175" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 15-0-2<br><br/><br><br/></p><h3 id="▌R7-18-不应抛出-NULL"><a href="#▌R7-18-不应抛出-NULL" class="headerlink" title="▌R7.18 不应抛出 NULL"></a><span id="thrownull">▌R7.18 不应抛出 NULL</span></h3><p>ID_throwNULL&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: exception warning</p><hr/><p>虽然 NULL 用来表示空指针，但在多数环境中 throw NULL 相当于 throw 0，类型的不明确会造成对异常的错误捕捉。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="literal">NULL</span>;  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">foo</span>();</span><br><span class="line">    &#125; <span class="built_in">catch</span> (<span class="type">int</span>) &#123;  <span class="comment">// Which handler?</span></span><br><span class="line">        ....</span><br><span class="line">    &#125; <span class="built_in">catch</span> (<span class="type">int</span>*) &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本例意在抛出一个空指针，然而会被捕获整数的 catch handler 捕获。<br><br/><br><br/></p><h4 id="相关-109"><a href="#相关-109" class="headerlink" title="相关"></a>相关</h4><p>ID_deprecatedNULL<br>ID_throwNonExceptionType<br>ID_throwPointer<br><br/></p><h4 id="依据-105"><a href="#依据-105" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 C.2.2.3(1)-implementation<br>ISO&#x2F;IEC 14882:2011 C.3.2.4(1)-implementation<br>ISO&#x2F;IEC 14882:2017 C.5.2.7(1)-implementation<br><br/></p><h4 id="参考-176"><a href="#参考-176" class="headerlink" title="参考"></a>参考</h4><p>CWE-351<br>MISRA C++ 2008 15-1-2<br><br/><br><br/></p><h3 id="▌R7-19-不应抛出-nullptr"><a href="#▌R7-19-不应抛出-nullptr" class="headerlink" title="▌R7.19 不应抛出 nullptr"></a><span id="thrownullptr">▌R7.19 不应抛出 nullptr</span></h3><p>ID_throwNullptr&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: exception warning</p><hr/><p>nullptr 可被所有接受指针的 catch handler 捕捉，使异常处理失去针对性，故不应抛出 nullptr。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="literal">nullptr</span>;  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">foo</span>();</span><br><span class="line">    &#125; <span class="built_in">catch</span> (<span class="type">int</span>*) &#123;  <span class="comment">// Which handler?</span></span><br><span class="line">        ....</span><br><span class="line">    &#125; <span class="built_in">catch</span> (<span class="type">char</span>*) &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-110"><a href="#相关-110" class="headerlink" title="相关"></a>相关</h4><p>ID_throwPointer<br><br/></p><h4 id="参考-177"><a href="#参考-177" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 15-0-2<br><br/><br><br/></p><h3 id="▌R7-20-禁用含-throw-关键字的异常规格说明"><a href="#▌R7-20-禁用含-throw-关键字的异常规格说明" class="headerlink" title="▌R7.20 禁用含 throw 关键字的异常规格说明"></a><span id="forbidthrowspecification">▌R7.20 禁用含 throw 关键字的异常规格说明</span></h3><p>ID_forbidThrowSpecification&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: exception warning</p><hr/><p>由 throw 关键字声明的动态异常规格说明已过时，应采用由 noexcept 关键字声明的方式。  </p><p>将所有可能抛出的异常详细列出，尤其是牵扯到第三方不可控代码时，会增大代码的管理成本，而且各编译器相关的实现方式并未统一，现已移出标准。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> <span class="title">throw</span><span class="params">(Exception)</span></span>;  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> <span class="title">noexcept</span><span class="params">(<span class="literal">false</span>)</span></span>;   <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int bar() throw();           // Let it go?</span><br></pre></td></tr></table></figure><p>在 C++17 标准之前，空的 throw 异常规格说明与 noexcept 等价，审计工具不妨通过配置决定是否放过这种方式。<br><br/><br><br/></p><h4 id="配置-15"><a href="#配置-15" class="headerlink" title="配置"></a>配置</h4><p>forbidEmptyThrowSpecification：是否放过空 throw 异常规格说明<br><br/></p><h4 id="依据-106"><a href="#依据-106" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2011 D.4-deprecated<br>ISO&#x2F;IEC 14882:2017 D.3-deprecated<br><br/></p><h4 id="参考-178"><a href="#参考-178" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines E.12<br>C++ Core Guidelines E.30<br><br/><br><br/></p><h3 id="▌R7-21-禁用-C-异常"><a href="#▌R7-21-禁用-C-异常" class="headerlink" title="▌R7.21 禁用 C++ 异常"></a><span id="forbidexception">▌R7.21 禁用 C++ 异常</span></h3><p>ID_forbidException&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: exception warning</p><hr/><p>本规则适用如下场景，可酌情选取。  </p><ol><li>对时空性能有严格要求的项目  </li><li>代码所属框架不支持异常处理  </li><li>与 C 或其他语言兼容的接口实现  </li><li>项目没有依照异常安全的理念实施</li></ol><p>利用返回值或错误码的错误处理方式要求检查可能产生错误的每一个步骤，有些出错情况可能被遗漏，C++ 的异常机制可大幅简化这种繁琐的方式，使代码更专注于事务或算法的实现，而且 C++ 异常是不可被忽略的，然而 C++ 的异常机制是需要一定开销的，对代码的设计与实现也有更严格的要求。  </p><p>如果异常情况频繁出现，其成本是不可被忽视的，不适用于具有高性能要求的实时软件系统。如果代码所属项目没有依照异常安全的理念实施，使用异常反而会造成更多问题，可参见 ID_exceptionUnsafe 的进一步讨论。<br><br/><br><br/></p><h4 id="相关-111"><a href="#相关-111" class="headerlink" title="相关"></a>相关</h4><p>ID_exceptionUnsafe<br><br/></p><h4 id="参考-179"><a href="#参考-179" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines E.6<br>Google C++ Style Guide.Other C++ Features.Exceptions<br><br/><br><br/></p><h2 id="8-Function"><a href="#8-Function" class="headerlink" title="8. Function"></a><span id="function">8. Function</span></h2><h3 id="▌R8-1-main-函数的返回类型只应为-int"><a href="#▌R8-1-main-函数的返回类型只应为-int" class="headerlink" title="▌R8.1 main 函数的返回类型只应为 int"></a><span id="mainreturnsnonint">▌R8.1 main 函数的返回类型只应为 int</span></h3><p>ID_mainReturnsNonInt&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>main 函数的返回值可作为整个进程执行情况的总结，按惯例返回 0 或 EXIT_SUCCESS 表示执行成功，非 0 或 EXIT_FAILURE 表示执行失败，main 函数的返回值会作为标准 exit 函数的参数。  </p><p>应采用标准明确支持的方式：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int main(void) &#123; .... &#125;                     // Compliant</span><br><span class="line">int main(int argc, char *argv[]) &#123; .... &#125;   // Compliant</span><br></pre></td></tr></table></figure><p>如果将返回值设为 void 或其他非 int 类型，会导致未定义、未声明或由实现定义的行为。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void main() &#123; .... &#125;   // Non-compliant</span><br><span class="line">bool main() &#123; .... &#125;   // Non-compliant</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-107"><a href="#依据-107" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 5.1.2.2.1(1)-implementation<br>ISO&#x2F;IEC 9899:1999 5.1.2.2.3(1)-unspecified<br>ISO&#x2F;IEC 9899:2011 5.1.2.2.1(1)-implementation<br>ISO&#x2F;IEC 9899:2011 5.1.2.2.3(1)-unspecified<br>ISO&#x2F;IEC 14882:2003 3.6.1(2)-implementation<br>ISO&#x2F;IEC 14882:2011 3.6.1(2)-implementation<br><br/></p><h4 id="参考-180"><a href="#参考-180" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines F.46<br><br/><br><br/></p><h3 id="▌R8-2-main-函数不应被调用、重载或被-inline、static-等限定符修饰"><a href="#▌R8-2-main-函数不应被调用、重载或被-inline、static-等限定符修饰" class="headerlink" title="▌R8.2 main 函数不应被调用、重载或被 inline、static 等限定符修饰"></a><span id="illformedmain">▌R8.2 main 函数不应被调用、重载或被 inline、static 等限定符修饰</span></h3><p>ID_illFormedMain&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>main 函数作为程序的入口是一种特殊的函数，其链接性由实现定义，不应被调用、重载或被任何函数限定符修饰。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>;   <span class="comment">// The main function does not need to be declared</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">main</span>();   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* p)</span> </span>&#123;   <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;   <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-108"><a href="#依据-108" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.7.4(4)<br>ISO&#x2F;IEC 9899:2011 6.7.4(4)<br>ISO&#x2F;IEC 14882:2003 3.6.1(2 3)-implementation<br>ISO&#x2F;IEC 14882:2011 3.6.1(2 3)-implementation<br>ISO&#x2F;IEC 14882:2017 6.6.1(2 3)-implementation<br><br/><br><br/></p><h3 id="▌R8-3-函数不应在头文件中实现"><a href="#▌R8-3-函数不应在头文件中实现" class="headerlink" title="▌R8.3 函数不应在头文件中实现"></a><span id="definedinheader">▌R8.3 函数不应在头文件中实现</span></h3><p>ID_definedInHeader&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>在头文件中实现的函数如果不是内联、静态或模板函数，则可能被引入不同的翻译单元（translate-unit）造成编译冲突。  </p><p>头文件也是项目文档的重要组成部分，头文件的主要内容应是类型或接口的声明，有必要保持头文件简洁清晰。除非函数很简短，否则不建议在头文件中内联实现，大段的函数实现会影响头文件的可读性。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In a header file</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;          <span class="comment">// Non-compliant, add ‘inline’ or move it to a cpp file</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;   <span class="comment">// Compliant</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于较为复杂的模板函数，建议将其实现与主体头文件分离，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// In B.h</span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">struct B &#123;</span><br><span class="line">    T foo(T&amp;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#include &quot;impl/B.inc&quot;</span><br><span class="line"></span><br><span class="line">// In impl/B.inc</span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">T B&lt;T&gt;::foo(T&amp; p) &#123;</span><br><span class="line">    ....             // Complex implementation</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-181"><a href="#参考-181" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines SF.2<br><br/><br><br/></p><h3 id="▌R8-4-函数的参数名称在声明处和实现处应保持一致"><a href="#▌R8-4-函数的参数名称在声明处和实现处应保持一致" class="headerlink" title="▌R8.4 函数的参数名称在声明处和实现处应保持一致"></a><span id="inconsistentparamname">▌R8.4 函数的参数名称在声明处和实现处应保持一致</span></h3><p>ID_inconsistentParamName&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>参数名称在声明处和实现处不一致会误导函数的使用者，而且很可能是实现错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;    <span class="comment">// Declaration</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> b, <span class="type">int</span> a)</span> </span>&#123;   <span class="comment">// Non-compliant, which is which??</span></span><br><span class="line">    <span class="keyword">return</span> a &gt; b? <span class="number">1</span>: <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中参数 a 和 b 在声明处和实现处的顺序是颠倒的，令人非常困惑。<br><br/><br><br/></p><h4 id="相关-112"><a href="#相关-112" class="headerlink" title="相关"></a>相关</h4><p>ID_inconsistentDeclaration<br><br/></p><h4 id="参考-182"><a href="#参考-182" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 8-4-2<br><br/><br><br/></p><h3 id="▌R8-5-多态类的对象作为参数时不应采用值传递的方式"><a href="#▌R8-5-多态类的对象作为参数时不应采用值传递的方式" class="headerlink" title="▌R8.5 多态类的对象作为参数时不应采用值传递的方式"></a><span id="parammaybeslicing">▌R8.5 多态类的对象作为参数时不应采用值传递的方式</span></h3><p>ID_paramMayBeSlicing&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>将派生类对象通过传值的方式转换为基类对象后，不再遵循多态机制，易产生意料之外的错误，应采用指针或引用的方式传递多态类对象。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A)</span></span>;   <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(A&amp;)</span></span>;  <span class="comment">// Compliant</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">baz</span><span class="params">(A*)</span></span>;  <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-113"><a href="#相关-113" class="headerlink" title="相关"></a>相关</h4><p>ID_objectSlicing<br><br/></p><h4 id="参考-183"><a href="#参考-183" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.145<br>C++ Core Guidelines ES.63<br><br/><br><br/></p><h3 id="▌R8-6-不应存在未被使用的具名形式参数"><a href="#▌R8-6-不应存在未被使用的具名形式参数" class="headerlink" title="▌R8.6 不应存在未被使用的具名形式参数"></a><span id="paramnotused">▌R8.6 不应存在未被使用的具名形式参数</span></h3><p>ID_paramNotUsed&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: function suggestion</p><hr/><p>如果函数的某个参数在函数内没有被用到，意味着函数的功能与设计之间存在差距。  </p><p>如果某个参数确实不需要被用到，应尽量从参数列表中将其删除，如果需要遵循某种约定而必须保留参数（如虚函数或回调函数），在 C++ 代码中不妨将参数的名称删掉，在 C 代码中可用 void 转换指明未使用的参数在预期之内，并用注释说明参数未被使用的原因。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;   <span class="comment">// Non-compliant, ‘x’ is not used</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;   <span class="comment">// Compliant in C</span></span><br><span class="line">    (<span class="type">void</span>)x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>)</span> </span>&#123;     <span class="comment">// Compliant in C++</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-184"><a href="#参考-184" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines F.9<br>MISRA C 2012 2.7<br>MISRA C++ 2008 0-1-11<br><br/><br><br/></p><h3 id="▌R8-7-由-const-修饰的参数应为引用或指针"><a href="#▌R8-7-由-const-修饰的参数应为引用或指针" class="headerlink" title="▌R8.7 由 const 修饰的参数应为引用或指针"></a><span id="parampassedbyvalue">▌R8.7 由 const 修饰的参数应为引用或指针</span></h3><p>ID_paramPassedByValue&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>参数按值传递时会产生复制开销，而且如果有 const 修饰，意味着对象不可改变，按值传递是没有意义的。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">const</span> string s)</span> </span>&#123;    <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 s 为按值传递的参数，每当 fun 被调用时，s 都会作为一个新的对象被构造，因为其值又不能被改变，所以这种构造是没有意义的，利用常量引用即可解决这个问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void fun(const string&amp; s) &#123;   // Compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改为常量引用后，s 的值和原来一样不可被改变，而且不需要额外的开销。<br><br/><br><br/></p><h4 id="参考-185"><a href="#参考-185" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines F.16<br><br/><br><br/></p><h3 id="▌R8-8-转发引用只应作为-std-forward-的参数"><a href="#▌R8-8-转发引用只应作为-std-forward-的参数" class="headerlink" title="▌R8.8 转发引用只应作为 std::forward 的参数"></a><span id="illforwardingreference">▌R8.8 转发引用只应作为 std::forward 的参数</span></h3><p>ID_illForwardingReference&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>不应混淆“<a href="https://en.cppreference.com/w/cpp/language/reference#Forwarding_references">转发引用（forwarding references）</a>”与右值引用，除作为 std::forward 的参数之外，不应对转发引用再有任何操作。  </p><p>转发引用是类型为 T&amp;&amp; 的参数，T 为函数模板类型，无论左值还是右值均可被这种参数接受，而且 const、volatile 等属性也会被忽略，由于含有不确定的状态，所以直接操作转发引用是不妥的，只应通过 std::forward<T> 交由合适的接口处理。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(T&amp;&amp; x)</span> </span>&#123;</span><br><span class="line">    x.<span class="built_in">foo</span>();        <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中参数 x 是转发引用，并不是右值引用，在 bar 函数内部并不知道 x 是左值还是右值，而且 x 对应的实际参数也可能被 const 或 volatile 修饰，所以直接调用 x 的 foo 成员会引发逻辑上的混乱。<br><br/><br><br/></p><h4 id="相关-114"><a href="#相关-114" class="headerlink" title="相关"></a>相关</h4><p>ID_unsuitableForward<br><br/></p><h4 id="依据-109"><a href="#依据-109" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2011 20.2.3(1)<br>ISO&#x2F;IEC 14882:2017 23.2.5(1)<br><br/></p><h4 id="参考-186"><a href="#参考-186" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines F.19<br><br/><br><br/></p><h3 id="▌R8-9-局部对象在使用前应被初始化"><a href="#▌R8-9-局部对象在使用前应被初始化" class="headerlink" title="▌R8.9 局部对象在使用前应被初始化"></a><span id="localinitialization">▌R8.9 局部对象在使用前应被初始化</span></h3><p>ID_localInitialization&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: function error</p><hr/><p>未初始化的局部对象具有不确定的值，读取未初始化的对象会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a;         <span class="comment">// A local object(automatic storage duration)</span></span><br><span class="line">    <span class="keyword">if</span> (cond) &#123;</span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;      <span class="comment">// Non-compliant, may be an indeterminate value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中局部对象 a 的初始化依赖某种条件，在条件范围之外读取 a 的值会得到不确定的结果。  </p><p>建议对象在声明处初始化，即使不方便在声明处初始化，也应该在声明的附近进行无条件初始化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a = 0;    // Good</span><br><span class="line"></span><br><span class="line">int b;</span><br><span class="line">b = 123;      // OK</span><br></pre></td></tr></table></figure><p>不建议的模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int a;</span><br><span class="line">if (x) &#123;</span><br><span class="line">    a = 0;</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line">if (y) &#123;</span><br><span class="line">    use(a);   // Dangerous</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 a 的初始化依赖条件 x，并在满足条件 y 时被使用，即使条件 x 和条件 y 有一定相关性可以保证对 a 的使用是正确的，也会造成潜在的维护困难，当条件比较复杂或有变化时极易出错。<br><br/><br><br/></p><h4 id="依据-110"><a href="#依据-110" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.2.4(5 6)<br>ISO&#x2F;IEC 9899:2011 6.2.4(6 7)<br>ISO&#x2F;IEC 9899:2011 6.3.2.1(2)-undefined<br>ISO&#x2F;IEC 14882:2003 4.1(1)-undefined<br>ISO&#x2F;IEC 14882:2003 8.5(9)<br>ISO&#x2F;IEC 14882:2011 4.1(1)-undefined<br>ISO&#x2F;IEC 14882:2011 8.5(11)<br><br/></p><h4 id="参考-187"><a href="#参考-187" class="headerlink" title="参考"></a>参考</h4><p>CWE-457<br>CWE-824<br>CWE-908<br>CWE-909<br>C++ Core Guidelines ES.20<br>MISRA C 2004 9.1<br>MISRA C 2012 9.1<br>MISRA C++ 2008 8-5-1<br><br/><br><br/></p><h3 id="▌R8-10-成员须在声明处或构造时初始化"><a href="#▌R8-10-成员须在声明处或构造时初始化" class="headerlink" title="▌R8.10 成员须在声明处或构造时初始化"></a><span id="memberinitialization">▌R8.10 成员须在声明处或构造时初始化</span></h3><p>ID_memberInitialization&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>成员的声明和使用相距较远，更容易造成未初始化先使用的问题，所以应在声明处或构造函数中初始化所有成员。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> z;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> i): <span class="built_in">x</span>(i) &#123;  <span class="comment">// Non-compliant, Missing the initialization for ‘z’</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中构造函数没有对 z 初始化是不符合要求的，尤其是 public 成员出现这种问题时会造成更大的风险。  </p><p>建议所有成员都在声明处初始化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct A &#123;</span><br><span class="line">    int x = 0;  // Good</span><br><span class="line">    int y = 0;  // Good</span><br><span class="line">    int z = 0;  // Good</span><br><span class="line"></span><br><span class="line">    A(int i): x(i) &#123;  // Compliant</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-188"><a href="#参考-188" class="headerlink" title="参考"></a>参考</h4><p>CWE-824<br>CWE-908<br>C++ Core Guidelines C.41<br><br/><br><br/></p><h3 id="▌R8-11-基类对象构造完毕之前不可调用成员函数"><a href="#▌R8-11-基类对象构造完毕之前不可调用成员函数" class="headerlink" title="▌R8.11 基类对象构造完毕之前不可调用成员函数"></a><span id="illmembercall">▌R8.11 基类对象构造完毕之前不可调用成员函数</span></h3><p>ID_illMemberCall&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>基类对象未构造完毕时调用成员函数会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span>: A &#123;</span><br><span class="line">    <span class="built_in">B</span>(): <span class="built_in">A</span>(<span class="built_in">member</span>()) &#123;  <span class="comment">// Non-compliant, undefined behavior</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">member</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中成员函数的返回值作为基类构造函数的参数，而这时基类对象尚未构造，相当于成员函数的调用者没有被初始化，这是一种逻辑错误。<br><br/><br><br/></p><h4 id="依据-111"><a href="#依据-111" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 12.6.2(8)-undefined<br>ISO&#x2F;IEC 14882:2011 12.6.2(13)-undefined<br><br/><br><br/></p><h3 id="▌R8-12-在面向构造或析构函数体的-catch-handler-中不可访问非静态成员"><a href="#▌R8-12-在面向构造或析构函数体的-catch-handler-中不可访问非静态成员" class="headerlink" title="▌R8.12 在面向构造或析构函数体的 catch handler 中不可访问非静态成员"></a><span id="illmemberaccess">▌R8.12 在面向构造或析构函数体的 catch handler 中不可访问非静态成员</span></h3><p>ID_illMemberAccess&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: function error</p><hr/><p>当流程进入面向构造或析构函数体的 catch handler 时，非静态成员的生命周期已结束，如果继续访问会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() <span class="keyword">try</span> &#123;        <span class="comment">// Function-try-block</span></span><br><span class="line">        ....</span><br><span class="line">    &#125; <span class="built_in">catch</span> (...) &#123;  <span class="comment">// A handler of the function-try-block</span></span><br><span class="line">        <span class="built_in">access</span>(i);   <span class="comment">// Non-compliant, ‘i’ may no longer exist </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   ~<span class="built_in">A</span>() <span class="keyword">try</span> &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125; <span class="built_in">catch</span> (...) &#123;</span><br><span class="line">        <span class="built_in">access</span>(i);   <span class="comment">// Non-compliant, ‘i’ may no longer exist </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中 access(i) 等访问是有问题的。  </p><p>应调整实现或将“function-try-block”改为普通“try-block”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A::A() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125; catch (...) &#123;</span><br><span class="line">        access(i);   // Compliant</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-112"><a href="#依据-112" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 15.3(10)-undefined<br>ISO&#x2F;IEC 14882:2011 15.3(10)-undefined<br><br/></p><h4 id="参考-189"><a href="#参考-189" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 15-3-3<br><br/><br><br/></p><h3 id="▌R8-13-成员初始化应遵循声明的顺序"><a href="#▌R8-13-成员初始化应遵循声明的顺序" class="headerlink" title="▌R8.13 成员初始化应遵循声明的顺序"></a><span id="disorderedinitialization">▌R8.13 成员初始化应遵循声明的顺序</span></h3><p>ID_disorderedInitialization&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: function error</p><hr/><p>类成员的初始化顺序是按声明的顺序进行的，如果用后面的成员初始化前面的成员，就会造成错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    <span class="type">int</span>* p;</span><br><span class="line">    <span class="type">size_t</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">T</span>(<span class="type">size_t</span> s): <span class="built_in">n</span>(s), <span class="built_in">p</span>(<span class="keyword">new</span> <span class="type">int</span>[n])  <span class="comment">// Non-compliant</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>虽然在初始化列表中 n 在 p 的前面，但实际上 n 仍然在 p 之后被初始化，“new int[n]”会造成严重错误。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> n;</span><br><span class="line">    <span class="type">int</span>* p;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">T</span>(<span class="type">size_t</span> s): <span class="built_in">n</span>(s), <span class="built_in">p</span>(<span class="keyword">new</span> <span class="type">int</span>[n])  <span class="comment">// Compliant</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>调整了 n 和 p 的声明顺序，使 n 先于 p 初始化即可解决问题。  </p><p>几个特例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct A &#123;</span><br><span class="line">    int*&amp; a;</span><br><span class="line">    int*  b;</span><br><span class="line">    int*  c;</span><br><span class="line">    int   d[123];</span><br><span class="line">    </span><br><span class="line">    A(int): a(b), b(c), c(d) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>a 为引用，b 的地址在初始化之前就确定了，所以“a(b)”没问题<br>b 为指针，用 c 的值初始化 b 的值是不对的<br>d 为数组，也是一个地址，所以“c(d)”没有问题<br><br/><br><br/></p><h4 id="依据-113"><a href="#依据-113" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 12.6.2(5)<br>ISO&#x2F;IEC 14882:2011 12.6.2(10)<br><br/></p><h4 id="参考-190"><a href="#参考-190" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.47<br><br/><br><br/></p><h3 id="▌R8-14-在构造函数中不应使用动态类型"><a href="#▌R8-14-在构造函数中不应使用动态类型" class="headerlink" title="▌R8.14 在构造函数中不应使用动态类型"></a><span id="virtualcallinconstructor">▌R8.14 在构造函数中不应使用动态类型</span></h3><p>ID_virtualCallInConstructor&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>对象的动态类型在其构造过程中不生效。  </p><p>执行基类构造函数时，派生类对象尚未构造完毕，基类构造函数不能使用派生类动态类型。  </p><p>对于正在构造的对象，不应：  </p><ul><li>调用派生类重写的虚函数  </li><li>通过 typeid 判断对象的动态类型  </li><li>通过 dynamic_cast 转换对象的动态类型</li></ul><p>注意，如果在构造函数中调用未实现的纯虚函数会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> tag;</span><br><span class="line">    <span class="built_in">A</span>();</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">A</span>() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span>: <span class="keyword">public</span> A &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A::<span class="built_in">A</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">typeid</span>(*<span class="keyword">this</span>) == <span class="built_in">typeid</span>(B)) &#123;   <span class="comment">// Non-compliant, always false</span></span><br><span class="line">        tag = <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B b;  <span class="comment">// ‘b.tag’ is 1</span></span><br></pre></td></tr></table></figure><p>在基类 A 的构造函数中判断动态类型是无效的。<br><br/><br><br/></p><h4 id="依据-114"><a href="#依据-114" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 10.4(6)-undefined<br>ISO&#x2F;IEC 14882:2011 10.4(6)-undefined<br><br/></p><h4 id="参考-191"><a href="#参考-191" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.82<br>MISRA C++ 2008 12-1-1<br>Effective C++ item 9<br><br/><br><br/></p><h3 id="▌R8-15-在析构函数中不应使用动态类型"><a href="#▌R8-15-在析构函数中不应使用动态类型" class="headerlink" title="▌R8.15 在析构函数中不应使用动态类型"></a><span id="virtualcallindestructor">▌R8.15 在析构函数中不应使用动态类型</span></h3><p>ID_virtualCallInDestructor&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>对象的动态类型在其析构过程中不生效。  </p><p>执行基类析构函数时，属于派生类的成员已被析构，基类析构函数不能使用派生类动态类型。  </p><p>对于正在析构的对象，不应：  </p><ul><li>调用派生类重写的虚函数  </li><li>通过 typeid 判断对象的动态类型  </li><li>通过 dynamic_cast 转换对象的动态类型</li></ul><p>注意，如果在析构函数中调用未实现的纯虚函数会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   ~<span class="built_in">A</span>() &#123; <span class="built_in">clear</span>(); &#125;   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A &#123;</span><br><span class="line">    <span class="type">int</span>* p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">8</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">delete</span>[] p; &#125;   <span class="comment">// Invalid</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>虽然派生类 B 重写了 clear 函数，但在基类 A 的析构函数中不生效，相关内存没有被正确释放。  </p><p>应将基类的析构函数设为虚函数，在派生类的析构函数中释放资源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual ~A() = default;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class B: public A &#123;</span><br><span class="line">    int* p = new int[8];</span><br><span class="line">public:</span><br><span class="line">   ~B() override &#123; delete[] p; &#125;   // Compliant</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-115"><a href="#依据-115" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 10.4(6)-undefined<br>ISO&#x2F;IEC 14882:2011 10.4(6)-undefined<br><br/></p><h4 id="参考-192"><a href="#参考-192" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.82<br>MISRA C++ 2008 12-1-1<br>Effective C++ item 9<br><br/><br><br/></p><h3 id="▌R8-16-在析构函数中避免调用-exit-函数"><a href="#▌R8-16-在析构函数中避免调用-exit-函数" class="headerlink" title="▌R8.16 在析构函数中避免调用 exit 函数"></a><span id="exitcallindestructor">▌R8.16 在析构函数中避免调用 exit 函数</span></h3><p>ID_exitCallInDestructor&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>程序调用 exit 后，具有静态或线程存储期的对象开始析构，如果这种对象的析构函数再调用 exit 会导致标准未定义的行为，为规避意料之外的错误，应统一要求在析构函数中避免直接或间接地调用 exit。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   ~<span class="built_in">T</span>() &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);  <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-116"><a href="#依据-116" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 3.6.1(4)-undefined<br>ISO&#x2F;IEC 14882:2011 3.6.1(4)-undefined<br><br/><br><br/></p><h3 id="▌R8-17-拷贝构造函数应避免实现复制之外的功能"><a href="#▌R8-17-拷贝构造函数应避免实现复制之外的功能" class="headerlink" title="▌R8.17 拷贝构造函数应避免实现复制之外的功能"></a><span id="sideeffectcopyconstructor">▌R8.17 拷贝构造函数应避免实现复制之外的功能</span></h3><p>ID_sideEffectCopyConstructor&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>拷贝构造函数的执行在某些情况下可被省略，其执行次数可能与预期不符，复制之外的功能也可能无法生效。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>();</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">const</span> A&amp; rhs) &#123;</span><br><span class="line">        i = rhs.i;     <span class="comment">// Compliant</span></span><br><span class="line">        s++;           <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中拷贝构造函数对静态成员有所读写，这种复制之外的功能是不符合要求的。  </p><p>如果按下列方式使用相关类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A foo();</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    A a = foo();   // Copy elision</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 foo 函数返回的临时对象构造对象 a，理论上应执行拷贝构造函数，但标准允许编译器将临时对象直接作为对象 a，省略拷贝构造函数的执行以提高效率，这种优化称为“<a href="https://en.wikipedia.org/wiki/Copy_elision">copy elision</a>”，复制之外的功能会因此无法生效。在 C++17 之前，是否执行这种优化由实现定义，从 C++17 开始，在某些情况下必须执行这种优化，具体可参见“<a href="https://en.cppreference.com/w/cpp/language/copy_elision#Mandatory_elision_of_copy.2Fmove_operations">mandatory copy elision</a>”。<br><br/><br><br/></p><h4 id="相关-115"><a href="#相关-115" class="headerlink" title="相关"></a>相关</h4><p>ID_sideEffectMoveConstructor<br><br/></p><h4 id="依据-117"><a href="#依据-117" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 12.8(15)-implementation<br>ISO&#x2F;IEC 14882:2011 12.8(31)-implementation<br>ISO&#x2F;IEC 14882:2017 15.8.3(1)-implementation<br><br/></p><h4 id="参考-193"><a href="#参考-193" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 12-8-1<br><br/><br><br/></p><h3 id="▌R8-18-移动构造函数应避免实现数据移动之外的功能"><a href="#▌R8-18-移动构造函数应避免实现数据移动之外的功能" class="headerlink" title="▌R8.18 移动构造函数应避免实现数据移动之外的功能"></a><span id="sideeffectmoveconstructor">▌R8.18 移动构造函数应避免实现数据移动之外的功能</span></h3><p>ID_sideEffectMoveConstructor&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>移动构造函数的执行在某些情况下可被省略，其执行次数可能与预期不符，数据移动之外的功能也可能无法生效。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span>* dat;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>();</span><br><span class="line">   ~<span class="built_in">A</span>();</span><br><span class="line">    <span class="built_in">A</span>(A&amp;&amp; a) &#123;</span><br><span class="line">        dat = a.dat;      <span class="comment">// Compliant</span></span><br><span class="line">        a.dat = <span class="literal">nullptr</span>;  <span class="comment">// Compliant</span></span><br><span class="line">        cnt++;            <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中移动构造函数对静态成员有所读写，这种数据移动之外的功能是不符合要求的。  </p><p>如果按下列方式使用相关类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A foo();</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    A a&#123;foo()&#125;;   // Copy/move elision</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 foo 函数返回的临时对象构造对象 a，理论上应执行移动构造函数，但标准允许编译器将临时对象直接作为对象 a，移动和拷贝构造函数均可省略以提高效率，这种优化称为“<a href="https://en.wikipedia.org/wiki/Copy_elision">copy&#x2F;move elision</a>”，移动或复制之外的功能会因此无法生效。在 C++17 之前，是否执行这种优化由实现定义，从 C++17 开始，在某些情况下必须执行这种优化，具体可参见“<a href="https://en.cppreference.com/w/cpp/language/copy_elision#Mandatory_elision_of_copy.2Fmove_operations">mandatory copy elision</a>”。<br><br/><br><br/></p><h4 id="相关-116"><a href="#相关-116" class="headerlink" title="相关"></a>相关</h4><p>ID_sideEffectCopyConstructor<br><br/></p><h4 id="依据-118"><a href="#依据-118" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2011 12.8(31)-implementation<br>ISO&#x2F;IEC 14882:2017 15.8.3(1)-implementation<br><br/><br><br/></p><h3 id="▌R8-19-拷贝赋值运算符应处理参数是自身对象时的情况"><a href="#▌R8-19-拷贝赋值运算符应处理参数是自身对象时的情况" class="headerlink" title="▌R8.19 拷贝赋值运算符应处理参数是自身对象时的情况"></a><span id="this_selfjudgement">▌R8.19 拷贝赋值运算符应处理参数是自身对象时的情况</span></h3><p>ID_this_selfJudgement&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>如果拷贝赋值运算符的参数是自身对象，需防止资源分配和回收方面的冲突。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; .... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A* p, A* q)</span> </span>&#123;</span><br><span class="line">    *p = *q;             <span class="comment">// If ‘p’ and ‘q’ point to the same object ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设例中 A 是需要深拷贝的类，其赋值运算符往往需要先释放自身的资源，再复制参数的资源，如果参数就是自身，则需要避免资源被释放，可在赋值运算符中判断 this 与参数地址是否相同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A&amp; A::operator = (const A&amp; rhs) &#123;</span><br><span class="line">    if (this != &amp;rhs) &#123;             // Required</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    return *this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 A 的拷贝构造函数和交换方法齐备，也可按“复制 - 交换”模式实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A&amp; A::operator = (const A&amp; rhs) &#123;</span><br><span class="line">    A tmp(rhs);</span><br><span class="line">    this-&gt;swap(tmp);                // Good</span><br><span class="line">    return *this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用创建临时对象并与之交换的方法，也有效规避了冲突，这种方法使各函数更专注于自己的职责，不必重复编写分配和回收相关的代码，建议采用这种方法。<br><br/><br><br/></p><h4 id="参考-194"><a href="#参考-194" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.62<br><br/><br><br/></p><h3 id="▌R8-20-不应存在无效的写入操作"><a href="#▌R8-20-不应存在无效的写入操作" class="headerlink" title="▌R8.20 不应存在无效的写入操作"></a><span id="invalidwrite">▌R8.20 不应存在无效的写入操作</span></h3><p>ID_invalidWrite&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>内存中的数据写入之后应被读取，如果出现：  </p><ul><li>写入后未经读取便再次被无条件写入  </li><li>写入后未经读取而相关对象的生命周期已结束</li></ul><p>这种写入是无效的，出现这种问题往往意味着逻辑错误或功能不完整。  </p><p>下列情况可不受本规则约束：  </p><ul><li>对象初始化时的写入  </li><li>有特殊副作用的写入，如对 volatile 型数据的写入等</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    a = <span class="number">123</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line">    a = <span class="number">456</span>;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中参数 a 被赋值为 123 之后，又被无条件地赋值为 456，显然第一次赋值是没有意义的，很有可能是漏掉了什么。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int bar() &#123;</span><br><span class="line">    int i = 0;</span><br><span class="line">    ....</span><br><span class="line">    return i++;     // Non-compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 bar 函数返回局部变量 i 自增前的值，自增运算是没有意义的。  </p><p>对象的初始化可不受本规则限制，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int baz() &#123;</span><br><span class="line">    int n = 0;      // OK</span><br><span class="line">    if (cond) &#123;</span><br><span class="line">        n = 123;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        n = 456;</span><br><span class="line">    &#125;</span><br><span class="line">    return n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中局部变量 n 初始化后经由 if-else 分枝，在其两个分枝中都被赋值，也相当于被无条件写入，但在声明处初始化是值得提倡的，故这种情况不受本规则限制。<br><br/><br><br/><br><br/></p><h3 id="▌R8-21-不应存在没有副作用的语句"><a href="#▌R8-21-不应存在没有副作用的语句" class="headerlink" title="▌R8.21 不应存在没有副作用的语句"></a><span id="missingsideeffect">▌R8.21 不应存在没有副作用的语句</span></h3><p>ID_missingSideEffect&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: function error</p><hr/><p>不能对程序状态产生影响的语句称为无“<a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)">副作用（side effect）</a>”的语句，往往属于笔误或调试痕迹，应当修正或去除。  </p><p>示例（设 a、b、p 为变量或指针）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a == b;  // Non-compliant</span><br></pre></td></tr></table></figure><p>单纯的判等是没有副作用的，很可能是赋值语句的笔误。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*p++;    // Non-compliant</span><br></pre></td></tr></table></figure><p>单纯从某个地址进行读取是没有副作用的，这是一种对运算符优先级理解不当造成的常见错误，应改为 (*p)++;  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;fun;  // Non-compliant</span><br></pre></td></tr></table></figure><p>由变量名或无实参列表的函数名作为一个语句是没有副作用的，此语句应改为正确的函数调用。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+a;      // Non-compliant</span><br></pre></td></tr></table></figure><p>正号是没有副作用的，此句很可能应为 ++a;  </p><p>如果语句为逻辑与表达式，左子表达式可以作为右子表达式的条件，故左子表达式可以无副作用，而右子表达式一定要有副作用，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p &amp;&amp; p-&gt;fun();  // OK</span><br><span class="line">p &amp;&amp; p-&gt;fun;    // Non-compliant</span><br><span class="line">p-&gt;fun() &amp;&amp; p;  // Non-compliant</span><br></pre></td></tr></table></figure><p>如果语句为逻辑或表达式，则要求其左右子表达式均有副作用，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p || p-&gt;fun();  // Non-compliant</span><br><span class="line">p || p-&gt;fun;    // Non-compliant</span><br><span class="line">p-&gt;fun() || p;  // Non-compliant</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-119"><a href="#依据-119" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 5.1.2.3(2)<br>ISO&#x2F;IEC 9899:2011 5.1.2.3(2)<br>ISO&#x2F;IEC 14882:2003 1.9(7)<br>ISO&#x2F;IEC 14882:2011 1.9(12)<br><br/></p><h4 id="参考-195"><a href="#参考-195" class="headerlink" title="参考"></a>参考</h4><p>CWE-482<br>CWE-1164<br>MISRA C 2004 14.2<br>MISRA C 2012 2.2<br>MISRA C++ 2008 0-1-9<br><br/><br><br/></p><h3 id="▌R8-22-不应存在得不到执行机会的代码"><a href="#▌R8-22-不应存在得不到执行机会的代码" class="headerlink" title="▌R8.22 不应存在得不到执行机会的代码"></a><span id="unreachablecode">▌R8.22 不应存在得不到执行机会的代码</span></h3><p>ID_unreachableCode&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: function error</p><hr/><p>得不到执行机会的代码是没有意义的，往往意味着逻辑错误。  </p><p>这种代码的成因主要有：  </p><ol><li>所在函数无法被调用  </li><li>之前的所有分枝都提前结束了函数的执行  </li><li>之前的必经分枝中存在不会结束执行的代码  </li><li>所在分枝的条件恒为假  </li><li>所在分枝被其他分枝遮盖</li></ol><p>第 1 点特化为：ID_staticNotUsed、ID_privateNotUsed<br>第 4 点特化为：ID_constLogicExpression、ID_invalidCondition、ID_switch_caseOutOfRange<br>第 5 点特化为：ID_if_identicalCondition、ID_if_hiddenCondition  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cond) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    statements    <span class="comment">// Non-compliant, unreachable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 statements 之前的所有分枝都会结束函数的执行，所以 statements 不会被执行。  </p><p>例外：<br>在多分枝结构的末尾，统一安置一条结束函数执行的语句是一种好的编程习惯，即当 statements 只包含一条 return 或 throw 语句时可以不算作违规。  </p><p>另外，在正式代码中不应存在如下形式的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (false) &#123; .... &#125;      // Non-compliant</span><br><span class="line">while (false) &#123; .... &#125;   // Non-compliant</span><br><span class="line">for (;false;) &#123; .... &#125;   // Non-compliant</span><br></pre></td></tr></table></figure><p>也不应该在 return 语句之后存在其他语句，这种代码如果不是被人恶意篡改，就是出于某种目的将本已无效的代码遗留了下来，可参见 ID_constLogicExpression、ID_invalidCondition 的进一步讨论。  </p><p>建议时刻保持代码的整洁，并将维护过程中的变动及时地保存在版本管理系统中，这样可以清晰地查看各版本之间的变动，而如果将无效代码与有效代码混在一起，势必造成维护的负担。<br><br/><br><br/></p><h4 id="相关-117"><a href="#相关-117" class="headerlink" title="相关"></a>相关</h4><p>ID_staticNotUsed<br>ID_privateNotUsed<br>ID_constLogicExpression<br>ID_invalidCondition<br>ID_switch_caseOutOfRange<br>ID_if_identicalCondition<br>ID_if_hiddenCondition<br><br/></p><h4 id="参考-196"><a href="#参考-196" class="headerlink" title="参考"></a>参考</h4><p>CWE-561<br>MISRA C 2004 14.1<br>MISRA C 2012 2.1<br>MISRA C++ 2008 0-1-1<br><br/><br><br/></p><h3 id="▌R8-23-有返回值的函数其所有分枝都应显式返回"><a href="#▌R8-23-有返回值的函数其所有分枝都应显式返回" class="headerlink" title="▌R8.23 有返回值的函数其所有分枝都应显式返回"></a><span id="notallbranchreturn">▌R8.23 有返回值的函数其所有分枝都应显式返回</span></h3><p>ID_notAllBranchReturn&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: function error</p><hr/><p>如果有返回值的函数在某个分枝没有使用 return 语句显式返回，会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (condition2) &#123;</span><br><span class="line">    &#125;                        <span class="comment">// Non-compliant, no return value</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当条件符合 condition2 时，fun 函数的调用者将得到一个错误的返回值。  </p><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;Hi~\n&quot;);</span><br><span class="line">&#125;   // Compliant</span><br></pre></td></tr></table></figure><p>标准规定未显式返回的 main 函数会返回 0，故 main 函数不受本规则约束。<br><br/><br><br/></p><h4 id="依据-120"><a href="#依据-120" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 5.1.2.2.3(1)<br>ISO&#x2F;IEC 9899:1999 6.9.1(12)-undefined<br>ISO&#x2F;IEC 9899:2011 5.1.2.2.3(1)<br>ISO&#x2F;IEC 9899:2011 6.9.1(12)-undefined<br>ISO&#x2F;IEC 14882:2003 3.6.1(5)<br>ISO&#x2F;IEC 14882:2003 6.6.3(2)-undefined<br>ISO&#x2F;IEC 14882:2011 3.6.1(5)<br>ISO&#x2F;IEC 14882:2011 6.6.3(2)-undefined<br><br/></p><h4 id="参考-197"><a href="#参考-197" class="headerlink" title="参考"></a>参考</h4><p>CWE-394<br>MISRA C 2004 16.8<br>MISRA C 2012 17.4<br>MISRA C++ 2008 8-4-3<br><br/><br><br/></p><h3 id="▌R8-24-不可返回局部对象的地址或引用"><a href="#▌R8-24-不可返回局部对象的地址或引用" class="headerlink" title="▌R8.24 不可返回局部对象的地址或引用"></a><span id="localaddressflowout">▌R8.24 不可返回局部对象的地址或引用</span></h3><p>ID_localAddressFlowOut&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: function error</p><hr/><p>局部对象的生命周期结束后，其地址或引用也会失效，如果继续访问会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>* <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;    <span class="comment">// Local object</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span> &amp;i;    <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;    <span class="comment">// Local object</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span> i;     <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>&amp;&amp; <span class="title">baz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;    <span class="comment">// Local object</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">move</span>(i);    <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部对象的生命周期在函数返回后结束，返回与局部对象相关的指针或引用是不符合要求的。  </p><p>注意，除了 return 语句，throw、赋值等表达式也受本规则限制，禁止将内层作用域中的地址向外层作用域传递，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">char* global;</span><br><span class="line"></span><br><span class="line">void fun() &#123;</span><br><span class="line">    char local[] = &quot;....&quot;;</span><br><span class="line">    global = local;          // Non-compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 local 是局部数组，函数返回后，全局指针会指向无效的内存区域。  </p><p>另外，将对象地址传入异步过程时也需要注意对象的生命周期，参见 ID_illLifetime。<br><br/><br><br/></p><h4 id="相关-118"><a href="#相关-118" class="headerlink" title="相关"></a>相关</h4><p>ID_tmpAddressFlowOut<br>ID_danglingDeref<br>ID_illLifetime<br><br/></p><h4 id="依据-121"><a href="#依据-121" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.2.4(2)-undefined<br>ISO&#x2F;IEC 9899:2011 6.2.4(2)-undefined<br><br/></p><h4 id="参考-198"><a href="#参考-198" class="headerlink" title="参考"></a>参考</h4><p>CWE-562<br>C++ Core Guidelines F.43<br>MISRA C 2012 18.6<br>MISRA C++ 2008 7-5-1<br>MISRA C++ 2008 7-5-2<br><br/><br><br/></p><h3 id="▌R8-25-不可返回临时对象的地址或引用"><a href="#▌R8-25-不可返回临时对象的地址或引用" class="headerlink" title="▌R8.25 不可返回临时对象的地址或引用"></a><span id="tmpaddressflowout">▌R8.25 不可返回临时对象的地址或引用</span></h3><p>ID_tmpAddressFlowOut&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: function error</p><hr/><p>临时对象可以通过常量引用或右值引用等方式作为函数的参数，但生命周期结束后，其地址或引用就会失效，如果继续访问会导致标准未定义的行为，对引用型参数取地址应谨慎。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> S = std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> S* <span class="title">foo</span><span class="params">(<span class="type">const</span> S&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;s;    <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span>* p = <span class="built_in">foo</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;   <span class="comment">// Undefined behavior</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 foo 函数的参数是由字符串常量 “abc” 生成的 string 型临时对象，所在语句执行完毕后生命周期即结束，p 会成为野指针，继续访问会导致标准未定义的行为。  </p><p>同理，也应避免对于右值引用型的参数取地址，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S* bar(S&amp;&amp; s) &#123;</span><br><span class="line">    return &amp;s;   // Non-compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-119"><a href="#相关-119" class="headerlink" title="相关"></a>相关</h4><p>ID_localAddressFlowOut<br>ID_danglingDeref<br>ID_illLifetime<br><br/></p><h4 id="依据-122"><a href="#依据-122" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.2.4(2)-undefined<br>ISO&#x2F;IEC 9899:2011 6.2.4(2)-undefined<br><br/></p><h4 id="参考-199"><a href="#参考-199" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 7-5-3<br><br/><br><br/></p><h3 id="▌R8-26-合理设置-lambda-表达式的捕获方式"><a href="#▌R8-26-合理设置-lambda-表达式的捕获方式" class="headerlink" title="▌R8.26 合理设置 lambda 表达式的捕获方式"></a><span id="unsuitablecapture">▌R8.26 合理设置 lambda 表达式的捕获方式</span></h3><p>ID_unsuitableCapture&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>如果 lambda 表达式只在函数内部使用，可采用捕获引用的方式；如果 lambda 表达式可以超出函数作用域，应采用捕获值的方式。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">foo</span><span class="params">()</span> -&gt; function&lt;<span class="title">int</span><span class="params">()</span>&gt; </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span> [&amp;]() &#123; <span class="keyword">return</span> ++i; &#125;;  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中的 lambda 表达式引用了局部变量 i，但返回后 i 的地址不再有效，会导致标准未定义的行为。  </p><p>另外，要注意解引用指针造成的间接引用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    int i = 0;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    auto bar() &#123;</span><br><span class="line">        return [=]() &#123; return i; &#125;;  // Bad</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中的 lambda 表达式通过值捕获变量，this 指针也被捕获，成员变量 i 是通过 this 指针的隐式解引用获取到的，如果 lambda 表达式在 this 指针的生命周期之外执行，就会造成错误。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">A::bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [*<span class="keyword">this</span>]() &#123; <span class="keyword">return</span> i; &#125;;  <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要捕获 this 指针，则应显式捕获所有相关变量，避免使用“[&#x3D;]”。<br><br/><br><br/></p><h4 id="相关-120"><a href="#相关-120" class="headerlink" title="相关"></a>相关</h4><p>ID_localAddressFlowOut<br><br/></p><h4 id="依据-123"><a href="#依据-123" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2011 5.1.2<br>ISO&#x2F;IEC 14882:2017 8.1.5.2<br><br/></p><h4 id="参考-200"><a href="#参考-200" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines F.52<br>C++ Core Guidelines F.53<br>C++ Core Guidelines F.54<br><br/><br><br/></p><h3 id="▌R8-27-函数返回值不应为右值引用"><a href="#▌R8-27-函数返回值不应为右值引用" class="headerlink" title="▌R8.27 函数返回值不应为右值引用"></a><span id="returnrvaluereference">▌R8.27 函数返回值不应为右值引用</span></h3><p>ID_returnRValueReference&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: function suggestion</p><hr/><p>函数返回右值引用的实际价值有限，且易产生错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; .... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">A&amp;&amp; <span class="title">foo</span><span class="params">()</span> </span>&#123;         <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">A</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A&amp;&amp; a = <span class="built_in">foo</span>();</span><br><span class="line">    <span class="built_in">access</span>(a);      <span class="comment">// Undefined behavior, ‘a’ refers to an invalid object</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 foo 函数返回类型为右值引用，这种情况下返回临时对象一定是错误的，临时对象在返回前析构，返回的是无效引用。  </p><p>也不应返回局部对象的右值引用，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A&amp;&amp; baz() &#123;         // Non-compliant</span><br><span class="line">    A a;</span><br><span class="line">    ....</span><br><span class="line">    return std::move(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和返回临时对象一样，对象 a 在函数返回前析构，返回的也是无效引用。  </p><p>应直接返回对象，而不是对象的右值引用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A foo() &#123;           // Compliant</span><br><span class="line">    return A();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A baz() &#123;           // Compliant</span><br><span class="line">    A a;</span><br><span class="line">    ....</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于函数引用的参数，或函数作用域之外的对象，如果通过 move 返回右值引用，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A&amp;&amp; baz(A&amp; a) &#123;     // Non-compliant</span><br><span class="line">    access(a);</span><br><span class="line">    return std::move(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况在运行机制上可能没有问题，但满足的实际需求较为有限，而且相当于将 access(a) 和 move(a) 两种事务合在一个函数中，在某种程度上违反了“<a href="https://en.wikipedia.org/wiki/Single-responsibility_principle">单一职责原则</a>”。  </p><p>综上所述，应统一要求函数不应返回右值引用。<br><br/><br><br/></p><h4 id="相关-121"><a href="#相关-121" class="headerlink" title="相关"></a>相关</h4><p>ID_localAddressFlowOut<br><br/></p><h4 id="参考-201"><a href="#参考-201" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines F.45<br><br/><br><br/></p><h3 id="▌R8-28-函数返回值不应为常量对象"><a href="#▌R8-28-函数返回值不应为常量对象" class="headerlink" title="▌R8.28 函数返回值不应为常量对象"></a><span id="returnconstobject">▌R8.28 函数返回值不应为常量对象</span></h3><p>ID_returnConstObject&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: function suggestion</p><hr/><p>函数返回常量对象不利于移动构造或移动赋值等机制，也可能本意是返回引用，但遗漏了引用符号。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> vector&lt;<span class="type">int</span>&gt; <span class="title">fun</span><span class="params">()</span> </span>&#123;  <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">obj</span><span class="params">(fun())</span></span>;    <span class="comment">// Call ‘vector(const vector&amp;)’</span></span><br></pre></td></tr></table></figure><p>fun 返回 const 对象，构造 obj 对象时只能进行深拷贝，无法利用移动构造等特性。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">fun</span><span class="params">()</span> </span>&#123;        <span class="comment">// Compliant</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">obj</span><span class="params">(fun())</span></span>;    <span class="comment">// Call ‘vector(vector&amp;&amp;)’, more efficient</span></span><br></pre></td></tr></table></figure><p>这样可以利用移动构造函数提高效率。  </p><p>对于遵循 C++11 之前标准的代码，也不应返回常量对象，函数返回的对象本来就需要通过常量引用或传值的方式被后续代码使用，将返回值设为常量的意义不大。<br><br/><br><br/></p><h4 id="相关-122"><a href="#相关-122" class="headerlink" title="相关"></a>相关</h4><p>ID_returnSuperfluousConst<br><br/></p><h4 id="参考-202"><a href="#参考-202" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines F.20<br><br/><br><br/></p><h3 id="▌R8-29-函数返回值不应为基本类型的常量"><a href="#▌R8-29-函数返回值不应为基本类型的常量" class="headerlink" title="▌R8.29 函数返回值不应为基本类型的常量"></a><span id="returnsuperfluousconst">▌R8.29 函数返回值不应为基本类型的常量</span></h3><p>ID_returnSuperfluousConst&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>基本类型的对象作为返回值时，本来就是不可被修改的右值，const 修饰符是多余的。  </p><p>出现这种问题说明设计与使用存在一定的偏差，也可能本意是返回引用或指针，而书写时漏掉了相关符号。  </p><p>本规则是 ID_returnConstObject 的特化。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> <span class="type">int</span>* <span class="title">foo</span><span class="params">()</span></span>;  <span class="comment">// Compliant</span></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">int</span> <span class="title">bar</span><span class="params">()</span></span>;   <span class="comment">// Non-compliant, ‘const’ is superfluous</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span>&amp; <span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">int</span> <span class="title">fun</span><span class="params">()</span> <span class="type">const</span></span>;  <span class="comment">// Non-compliant, missing ‘&amp;’</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-123"><a href="#相关-123" class="headerlink" title="相关"></a>相关</h4><p>ID_returnConstObject<br><br/></p><h4 id="依据-124"><a href="#依据-124" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 3.10(5)<br>ISO&#x2F;IEC 14882:2011 3.10(1)<br><br/><br><br/></p><h3 id="▌R8-30-被返回的表达式应与函数的返回类型相符"><a href="#▌R8-30-被返回的表达式应与函数的返回类型相符" class="headerlink" title="▌R8.30 被返回的表达式应与函数的返回类型相符"></a><span id="returnodd">▌R8.30 被返回的表达式应与函数的返回类型相符</span></h3><p>ID_returnOdd&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>不应出现下列情况：  </p><ul><li>返回类型为 bool，却返回了非 true 非 false、非 0 非 1 的常量  </li><li>返回类型为指针，却返回了非 0、非 NULL、非 nullptr 的常量  </li><li>返回类型为整数，却返回了 NULL、true、false 等常量</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="literal">NULL</span>; &#125;   <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">bar</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;  <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">baz</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&#x27;\0&#x27;</span>; &#125;   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>这种问题可能是在维护过程中产生的，也可能意味着逻辑错误，需谨慎对待。<br><br/><br><br/></p><h4 id="参考-203"><a href="#参考-203" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 4-10-1<br><br/><br><br/></p><h3 id="▌R8-31-被返回的表达式不应为相同的常量"><a href="#▌R8-31-被返回的表达式不应为相同的常量" class="headerlink" title="▌R8.31 被返回的表达式不应为相同的常量"></a><span id="returnsameconst">▌R8.31 被返回的表达式不应为相同的常量</span></h3><p>ID_returnSameConst&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>被返回的表达式均为相同的常量是没有意义的。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">50</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;   <span class="comment">// Non-compliant, all the values returned are the same</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><br/><h3 id="▌R8-32-具有-noreturn-属性的函数不应返回"><a href="#▌R8-32-具有-noreturn-属性的函数不应返回" class="headerlink" title="▌R8.32 具有 noreturn 属性的函数不应返回"></a><span id="unsuitablereturn">▌R8.32 具有 noreturn 属性的函数不应返回</span></h3><p>ID_unsuitableReturn&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>具有 noreturn 属性的函数返回会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[noreturn]] <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;  <span class="comment">// Use _Noreturn in C</span></span><br><span class="line">    <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">        <span class="built_in">abort</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;       <span class="comment">// Non-compliant, the function returns if ‘condition’ is false</span></span><br></pre></td></tr></table></figure><p>noreturn 表示不会返回，编译器可能不会为 foo 函数生成跳转回调用处的指令，一旦 foo 函数返回就会造成严重错误。<br><br/><br><br/></p><h4 id="相关-124"><a href="#相关-124" class="headerlink" title="相关"></a>相关</h4><p>ID_unsuitableReturnType<br><br/></p><h4 id="依据-125"><a href="#依据-125" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:2011 6.7.4(8 12)-undefined<br>ISO&#x2F;IEC 14882:2011 7.6.3(2)-undefined<br><br/><br><br/></p><h3 id="▌R8-33-具有-noreturn-属性的函数返回类型只应为-void"><a href="#▌R8-33-具有-noreturn-属性的函数返回类型只应为-void" class="headerlink" title="▌R8.33 具有 noreturn 属性的函数返回类型只应为 void"></a><span id="unsuitablereturntype">▌R8.33 具有 noreturn 属性的函数返回类型只应为 void</span></h3><p>ID_unsuitableReturnType&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>返回类型不是 void 说明函数有返回值，与 noreturn 属性矛盾。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_Noreturn    <span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;     <span class="comment">// Non-compliant in C</span></span><br><span class="line">[[noreturn]] <span class="function"><span class="type">int</span> <span class="title">bar</span><span class="params">()</span></span>;     <span class="comment">// Non-compliant in C++</span></span><br></pre></td></tr></table></figure><p>例中函数的返回类型为 int，与 noreturn 属性矛盾，也会对函数的使用者造成困扰。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_Noreturn    <span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span>;    <span class="comment">// Compliant in C</span></span><br><span class="line">[[noreturn]] <span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span></span>;    <span class="comment">// Compliant in C++</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-125"><a href="#相关-125" class="headerlink" title="相关"></a>相关</h4><p>ID_unsuitableReturn<br><br/></p><h4 id="依据-126"><a href="#依据-126" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:2011 6.7.4(8 12)-undefined<br>ISO&#x2F;IEC 14882:2011 7.6.3(2)-undefined<br><br/><br><br/></p><h3 id="▌R8-34-由-atexit、at-quick-exit-指定的处理函数应正常返回"><a href="#▌R8-34-由-atexit、at-quick-exit-指定的处理函数应正常返回" class="headerlink" title="▌R8.34 由 atexit、at_quick_exit 指定的处理函数应正常返回"></a><span id="exithandlernoreturn">▌R8.34 由 atexit、at_quick_exit 指定的处理函数应正常返回</span></h3><p>ID_exitHandlerNoReturn&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>如果 atexit、at_quick_exit 指定的处理函数未正常返回，会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">handler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);      <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">atexit</span>(handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中程序在调用 exit 时会执行 handler，而 handler 又调用 exit，在逻辑上形成无限递归，其后果在标准中是未定义的。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">jmp_buf buf;</span><br><span class="line"></span><br><span class="line">void handler() &#123;</span><br><span class="line">    longjmp(buf, 1);   // Non-compliant</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    atexit(handler);</span><br><span class="line">    if (setjmp(buf) == 0) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 main 返回后会调用 handler，而 handler 又调用 longjmp 跳回 main 函数，在逻辑上形成死循环。<br><br/><br><br/></p><h4 id="依据-127"><a href="#依据-127" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.20.4.3(2 3)-undefined<br>ISO&#x2F;IEC 9899:2011 7.22.4.4(2 3)-undefined<br><br/></p><h4 id="参考-204"><a href="#参考-204" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT ENV32-C<br><br/><br><br/></p><h3 id="▌R8-35-函数模板不应被特化"><a href="#▌R8-35-函数模板不应被特化" class="headerlink" title="▌R8.35 函数模板不应被特化"></a><span id="functionspecialization">▌R8.35 函数模板不应被特化</span></h3><p>ID_functionSpecialization&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>特化的函数模板不参与重载函数的选取，不属于常规用法，且容易造成混乱。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(T)</span> </span>&#123;         <span class="comment">// #1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(T*)</span> </span>&#123;        <span class="comment">// #2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="type">int</span> <span class="built_in">foo</span>&lt;<span class="type">int</span>*&gt;(<span class="type">int</span>*) &#123;   <span class="comment">// #3, non-compliant, specialization of #1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = <span class="literal">nullptr</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">foo</span>(p) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;   <span class="comment">// What is output?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 1，特化的函数模板不参与重载函数的选取，所以只会在 <code>#1</code> 和 <code>#2</code> 中选取，foo(p) 与 <code>#2</code> 更贴近，而 <code>#3</code> 是 <code>#1</code> 的特化，所以不会选取 <code>#3</code>，这种情况下 <code>#3</code> 是无效的。  </p><p>应去除对函数模板的特化，改为普通重载函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int foo(int*) &#123;   // #3, compliant, safe and brief</span><br><span class="line">    return 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样例中 main 函数会输出 2。  </p><p>如果某些特殊情况确实需要特化模板，不妨将函数委托给模板类实现，通过特化模板类实现特殊的需求，参见 ID_narrowCast 的示例。<br><br/><br><br/></p><h4 id="参考-205"><a href="#参考-205" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines T.144<br>MISRA C++ 2008 14-8-1<br><br/><br><br/></p><h3 id="▌R8-36-函数的退出点数量应在规定范围之内"><a href="#▌R8-36-函数的退出点数量应在规定范围之内" class="headerlink" title="▌R8.36 函数的退出点数量应在规定范围之内"></a><span id="toomanyexit">▌R8.36 函数的退出点数量应在规定范围之内</span></h3><p>ID_tooManyExit&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: function suggestion</p><hr/><p>理想情况下应在函数的结尾设置统一的退出点，使代码具有清晰的静态结构，否则可读性较差，尤其在多个嵌套的作用域中使用 return 等语句，会使代码难以理解。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b) &#123;</span><br><span class="line">            <span class="keyword">return</span>;   <span class="comment">// Bad</span></span><br><span class="line">        &#125;</span><br><span class="line">        ....</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">return</span>;   <span class="comment">// Bad</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中函数的主体逻辑被 return 语句“割裂”，这显然是不利于阅读和维护的。  </p><p>然而，严格地要求每个函数只能有一个退出点是不够灵活的，对于 if…else-if、switch-case、catch-handlers 等并列的分枝结构，其末尾的退出点可以算作一个退出点，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125; catch (A&amp;) &#123;</span><br><span class="line">    ....</span><br><span class="line">    return 0;    // Let it go</span><br><span class="line">&#125; catch (B&amp;) &#123;</span><br><span class="line">    ....</span><br><span class="line">    return 1;    // Let it go</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="配置-16"><a href="#配置-16" class="headerlink" title="配置"></a>配置</h4><p>maxExitCount：退出点数量上限，超过则报出<br><br/></p><h4 id="相关-126"><a href="#相关-126" class="headerlink" title="相关"></a>相关</h4><p>ID_jumpOutLoop<br><br/></p><h4 id="参考-206"><a href="#参考-206" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 14.7<br>MISRA C 2012 15.5<br>MISRA C++ 2008 6-6-5<br><br/><br><br/></p><h3 id="▌R8-37-函数的标签数量应在规定范围之内"><a href="#▌R8-37-函数的标签数量应在规定范围之内" class="headerlink" title="▌R8.37 函数的标签数量应在规定范围之内"></a><span id="toomanylabels">▌R8.37 函数的标签数量应在规定范围之内</span></h3><p>ID_tooManyLabels&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>标签过多意味着函数内部的跳转逻辑过于复杂，违反结构化设计理念，应适当重构。  </p><p>对于 C 代码，建议一个函数只用一个标签作为函数统一出口，对于 C++ 代码，不建议使用标签。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">L0:</span><br><span class="line">    ....</span><br><span class="line">L1:</span><br><span class="line">    ....   <span class="comment">// Lots of labels require lots of gotos</span></span><br><span class="line">    ....   <span class="comment">// Lots of gotos make functions terrible</span></span><br><span class="line">L100:</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="配置-17"><a href="#配置-17" class="headerlink" title="配置"></a>配置</h4><p>maxLabelCount：标签数量上限，超过则报出<br><br/><br><br/></p><h3 id="▌R8-38-函数的行数应在规定范围之内"><a href="#▌R8-38-函数的行数应在规定范围之内" class="headerlink" title="▌R8.38 函数的行数应在规定范围之内"></a><span id="toomanylines">▌R8.38 函数的行数应在规定范围之内</span></h3><p>ID_tooManyLines&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>函数体过大违反模块化编程理念，使人难以阅读，更不便于维护，应适当重构。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ... 3000 lines ...</span></span><br><span class="line">    <span class="comment">// Who has the courage to read?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议函数体不超过 60 行，以不需要拖拽滚动条就可以在屏幕上完整显示为宜。<br><br/><br><br/></p><h4 id="配置-18"><a href="#配置-18" class="headerlink" title="配置"></a>配置</h4><p>maxLineCount：函数行数上限，超过则报出<br><br/></p><h4 id="参考-207"><a href="#参考-207" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines F.2<br>C++ Core Guidelines F.3<br><br/><br><br/></p><h3 id="▌R8-39-lambda-表达式的行数应在规定范围之内"><a href="#▌R8-39-lambda-表达式的行数应在规定范围之内" class="headerlink" title="▌R8.39 lambda 表达式的行数应在规定范围之内"></a><span id="toomanylambdalines">▌R8.39 lambda 表达式的行数应在规定范围之内</span></h3><p>ID_tooManyLambdaLines&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>复杂的 lambda 表达式与调用者的代码混在一起是难以阅读的，引入 lambda 表达式的目的应该是“化简”，否则应使用普通函数。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> f0 = []() &#123;</span><br><span class="line">        <span class="comment">// ... Many lines ...</span></span><br><span class="line">    &#125;;</span><br><span class="line">        <span class="comment">// ... Many lambdas ...</span></span><br><span class="line">        <span class="comment">// ... Even lambdas nest lambdas ...</span></span><br><span class="line">    <span class="keyword">auto</span> f100 = []() &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// Tut, tut, this is a function, not a namespace,</span></span><br><span class="line">    <span class="comment">// use common functions instead</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议 lambda 表达式不超过 5 行，一个函数中不应有多个复杂的 lambda 表达式。<br><br/><br><br/></p><h4 id="配置-19"><a href="#配置-19" class="headerlink" title="配置"></a>配置</h4><p>maxLambdaLineCount：lambda 表达式行数上限，超过则报出<br><br/><br><br/></p><h3 id="▌R8-40-函数参数的数量应在规定范围之内"><a href="#▌R8-40-函数参数的数量应在规定范围之内" class="headerlink" title="▌R8.40 函数参数的数量应在规定范围之内"></a><span id="toomanyparams">▌R8.40 函数参数的数量应在规定范围之内</span></h3><p>ID_tooManyParams&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>函数参数过多，意味着：  </p><ul><li>缺少合理的抽象机制：应将多而零散的参数按其内在联系封装成对象，从而方便地处理其逻辑关系，而不是简单地线性罗列  </li><li>违反单一职责原则：参数越多，函数处理的事务自然越多，代码的可维护性自然越差</li></ul><p>建议可供外部使用的全局函数、public 或 protected 成员函数的参数不超过 4 个，内部使用的 static 函数、private 成员函数的参数不超过 8 个。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A a, B b, C c, D d, E e)</span> </span>&#123;   <span class="comment">// Bad</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当函数参数过多时，应按参数的逻辑职责进行封装。假设 a 和 b 有直接逻辑关系，c、d、e 有直接逻辑关系，不妨将 a 和 b 封装成一个类，c、d、e 封装成一个类，在类的成员函数中实现相关功能，可更为清晰直观地保证逻辑关系的正确性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class X &#123;</span><br><span class="line">    ....    // Members and methods for ‘a’, ‘b’ ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Y &#123;</span><br><span class="line">    ....    // Members and methods for ‘c’, ‘d’, ‘e’ ... </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void foo(X x, Y y) &#123;   // Good</span><br><span class="line">    x.methods();</span><br><span class="line">    y.methods();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="配置-20"><a href="#配置-20" class="headerlink" title="配置"></a>配置</h4><p>maxParamCount：函数参数数量上限，超过则报出<br>maxInnerFunParamCount：static 函数或 private 成员函数参数数量上限，超过则报出<br><br/></p><h4 id="参考-208"><a href="#参考-208" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines F.2<br>C++ Core Guidelines I.23<br><br/><br><br/></p><h3 id="▌R8-41-不应定义过于复杂的内联函数"><a href="#▌R8-41-不应定义过于复杂的内联函数" class="headerlink" title="▌R8.41 不应定义过于复杂的内联函数"></a><span id="complexinlinefunction">▌R8.41 不应定义过于复杂的内联函数</span></h3><p>ID_complexInlineFunction&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: function suggestion</p><hr/><p>是否对函数进行内联优化由实现定义，当函数执行的开销远大于调用的开销时，将函数定义为内联函数是没有意义的。  </p><p>不适合将函数定义为内联函数的情况：  </p><ul><li>语句数量超过指定限制  </li><li>存在循环或异常处理语句  </li><li>存在 switch 分枝语句  </li><li>函数存在递归实现</li></ul><p>建议内联函数的实现不要超过 3 个语句。<br><br/><br><br/></p><h4 id="配置-21"><a href="#配置-21" class="headerlink" title="配置"></a>配置</h4><p>maxInlineStatementsCount：内联函数语句数量上限，超过则报出<br><br/></p><h4 id="依据-128"><a href="#依据-128" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.7.4(5)-implementation<br>ISO&#x2F;IEC 9899:2011 6.7.4(6)-implementation<br>ISO&#x2F;IEC 14882:2003 7.1.2(2)-implementation<br>ISO&#x2F;IEC 14882:2011 7.1.2(2)-implementation<br><br/></p><h4 id="参考-209"><a href="#参考-209" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines F.5<br><br/><br><br/></p><h3 id="▌R8-42-避免递归实现"><a href="#▌R8-42-避免递归实现" class="headerlink" title="▌R8.42 避免递归实现"></a><span id="recursion">▌R8.42 避免递归实现</span></h3><p>ID_recursion&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: function warning</p><hr/><p>递归实现，如函数直接或间接地调用自身，易导致难以控制的堆栈溢出等错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">foo</span><span class="params">(<span class="type">size_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n + <span class="built_in">foo</span>(n - <span class="number">1</span>);  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 foo 函数无条件地调用自身，是一种逻辑错误，导致无限的递归调用。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">size_t bar(size_t n) &#123;</span><br><span class="line">    if (n &gt; 1) &#123;</span><br><span class="line">        return n + bar(n - 1);  // Non-compliant</span><br><span class="line">    &#125;</span><br><span class="line">    return n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 bar 函数设置了递归条件，但仍是不可取的，当参数 n 较大时仍然可以造成堆栈溢出错误。  </p><p>对于一般的功能，应尽量采用迭代、堆栈等非递归手段实现，对于难以使用非递归方式实现的特殊算法，应做到递归深度可控。<br><br/><br><br/></p><h4 id="参考-210"><a href="#参考-210" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 17.2<br>MISRA C++ 2008 7-5-4<br><br/><br><br/></p><h3 id="▌R8-43-作用域及类型嵌套不应过深"><a href="#▌R8-43-作用域及类型嵌套不应过深" class="headerlink" title="▌R8.43 作用域及类型嵌套不应过深"></a><span id="nestedtoodeep">▌R8.43 作用域及类型嵌套不应过深</span></h3><p>ID_nestedTooDeep&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: function suggestion</p><hr/><p>作用域及类型嵌套过深会造成阅读和维护困难。  </p><p>建议：  </p><ul><li>函数作用域嵌套不超过 7 层  </li><li>内联函数作用域嵌套不超过 2 层  </li><li>lambda 表达式内作用域嵌套不超过 5 层  </li><li>类、结构体嵌套不超过 3 层  </li><li>命名空间嵌套不超过 4 层</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (cond0)</span><br><span class="line">    <span class="keyword">if</span> (cond1)</span><br><span class="line">        .... nested <span class="number">10</span> layers ....</span><br><span class="line">                <span class="keyword">if</span> (cond10)  <span class="comment">// Terrible</span></span><br><span class="line">                    ....   </span><br></pre></td></tr></table></figure><p>审计工具不妨通过配置决定嵌套层数是否合规。<br><br/><br><br/></p><h4 id="配置-22"><a href="#配置-22" class="headerlink" title="配置"></a>配置</h4><p>maxFunctionNestedDepth：函数作用域最大嵌套层数，超过则报出<br>maxInlineFunctionNestedDepth：内联函数作用域最大嵌套层数，超过则报出<br>maxLambdaNestedDepth：函数作用域最大嵌套层数，超过则报出<br>maxTypeNestedDepth：类型最大嵌套层数，超过则报出<br>maxNamespaceNestedDepth：命名空间最大嵌套层数，超过则报出<br><br/><br><br/></p><h3 id="▌R8-44-汇编代码不应与普通代码混合"><a href="#▌R8-44-汇编代码不应与普通代码混合" class="headerlink" title="▌R8.44 汇编代码不应与普通代码混合"></a><span id="mixedasm">▌R8.44 汇编代码不应与普通代码混合</span></h3><p>ID_mixedAsm&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: function suggestion</p><hr/><p>汇编代码的格式由实现定义，不具备可移植性，且可读性较差，故不应与普通代码混合。  </p><p>如果条件允许，应使用汇编语言实现独立的库，再由 C&#x2F;C++ 代码调用。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">avg</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sum;               </span><br><span class="line">    __asm &#123;                <span class="comment">// Non-compliant</span></span><br><span class="line">        mov eax, a</span><br><span class="line">        mov ebx, b</span><br><span class="line">        lea eax, [eax + ebx]</span><br><span class="line">        mov sum, eax</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum / <span class="number">2</span>;        <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 avg 函数同时含有汇编代码和 C 代码是不符合要求的，至少应将汇编代码单独隔离成一个函数，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int add(int a, int b) &#123;</span><br><span class="line">    __asm &#123;                // Compliant</span><br><span class="line">        mov eax, a</span><br><span class="line">        mov ebx, b</span><br><span class="line">        lea eax, [eax + ebx]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int avg(int a, int b) &#123;</span><br><span class="line">    int sum = add(a, b);   // Compliant</span><br><span class="line">    return sum / 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-129"><a href="#依据-129" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 J.5.10-implementation<br>ISO&#x2F;IEC 9899:2011 J.5.10-implementation<br>ISO&#x2F;IEC 14882:2003 7.4(1)-implementation<br>ISO&#x2F;IEC 14882:2011 7.4(1)-implementation<br><br/></p><h4 id="参考-211"><a href="#参考-211" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 2.1<br>MISRA C 2012 Dir 4.3<br>MISRA C++ 2008 7-4-3<br><br/><br><br/></p><h3 id="▌R8-45-避免重复的函数实现"><a href="#▌R8-45-避免重复的函数实现" class="headerlink" title="▌R8.45 避免重复的函数实现"></a><span id="functionrepetition">▌R8.45 避免重复的函数实现</span></h3><p>ID_functionRepetition&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: function suggestion</p><hr/><p>重复的或过于相似的代码不利于维护。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">    ....</span><br><span class="line">    <span class="function"><span class="type">int</span>* <span class="title">foo</span><span class="params">()</span> </span>&#123;     <span class="comment">// Non-compliant, almost identical to ‘foo() const’</span></span><br><span class="line">        <span class="type">int</span>* p = a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i != <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; *p) &#123;</span><br><span class="line">                p = &amp;a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">int</span>* <span class="title">foo</span><span class="params">()</span> <span class="type">const</span> </span>&#123;     <span class="comment">// Non-compliant, almost identical to ‘foo()’</span></span><br><span class="line">        <span class="type">const</span> <span class="type">int</span>* p = a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i != <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; *p) &#123;</span><br><span class="line">                p = &amp;a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中 foo() 返回数组中最大元素的地址，代码与 foo() const 几乎完全相同，当需求有变化时，需要同时修改两个函数，极易造成意料之外的差异，显然是不利于维护的。  </p><p>本例可通过模板和自动类型推理将公有代码抽取出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">auto* foo_impl(T* t) &#123;   // The common function extracted</span><br><span class="line">    auto* p = t-&gt;a;</span><br><span class="line">    for (auto i = 1; i != 10; i++) &#123;</span><br><span class="line">        if (t-&gt;a[i] &gt; *p) &#123;</span><br><span class="line">            p = &amp;t-&gt;a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct A &#123;</span><br><span class="line">    ....</span><br><span class="line">    int* foo() &#123;</span><br><span class="line">        return foo_impl(this);   // Compliant</span><br><span class="line">    &#125;</span><br><span class="line">    const int* foo() const &#123;</span><br><span class="line">        return foo_impl(this);   // Compliant</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样，foo() 与 foo() const 的代码便得到了简化，虽然简化后仍然是相同的，但仅为接口调用，可以接受。<br><br/><br><br/></p><h4 id="配置-23"><a href="#配置-23" class="headerlink" title="配置"></a>配置</h4><p>tokenCountThreshold：符号数量阈值，小于此阈值的函数不参与比较<br>repetitionRateThreshold：函数相似度阈值，超过则报出<br><br/></p><h4 id="参考-212"><a href="#参考-212" class="headerlink" title="参考"></a>参考</h4><p>CWE-1041<br>C++ Core Guidelines ES.3<br><br/><br><br/></p><h2 id="9-Control"><a href="#9-Control" class="headerlink" title="9. Control"></a><span id="control">9. Control</span></h2><h3 id="9-1-If"><a href="#9-1-If" class="headerlink" title="9.1 If"></a><span id="control.if">9.1 If</span></h3><h3 id="▌R9-1-1-if-语句不应被分号隔断"><a href="#▌R9-1-1-if-语句不应被分号隔断" class="headerlink" title="▌R9.1.1 if 语句不应被分号隔断"></a><span id="if_semicolon">▌R9.1.1 if 语句不应被分号隔断</span></h3><p>ID_if_semicolon&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: control error</p><hr/><p>if 语句不应被分号隔断。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition);  <span class="comment">// Non-compliant, see the semicolon</span></span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个分号使整个 if 语句失效，这可能是笔误，也可能是需求变化不再需要条件判断了，在维护过程中加入了分号，形成了令人费解的残留代码，也不能排除是有人恶意篡改了代码，应立即修正。<br><br/><br><br/></p><h4 id="参考-213"><a href="#参考-213" class="headerlink" title="参考"></a>参考</h4><p>CWE-670<br><br/><br><br/></p><h3 id="▌R9-1-2-在-if…else-if-分枝中不应有重复的条件"><a href="#▌R9-1-2-在-if…else-if-分枝中不应有重复的条件" class="headerlink" title="▌R9.1.2 在 if…else-if 分枝中不应有重复的条件"></a><span id="if_identicalcondition">▌R9.1.2 在 if…else-if 分枝中不应有重复的条件</span></h3><p>ID_if_identicalCondition&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: control error</p><hr/><p>if…else-if 分枝的条件不应有重复，否则相同条件排在前面的分枝会得以执行，而排在后面的分枝得不到执行机会。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">    branch1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (condition2) &#123;</span><br><span class="line">    branch2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (condition1) &#123;  <span class="comment">// Non-compliant, see the previous ‘condition1’</span></span><br><span class="line">    branch3</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    branch4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 branch1 和 branch3 的条件是相同的，所以 branch3 不会被执行。  </p><p>此问题为常见笔误，多数由复制粘贴造成，也可能是维护代码时对之前的逻辑不够了解造成的错误。<br><br/><br><br/></p><h4 id="相关-127"><a href="#相关-127" class="headerlink" title="相关"></a>相关</h4><p>ID_if_hiddenCondition<br><br/></p><h4 id="参考-214"><a href="#参考-214" class="headerlink" title="参考"></a>参考</h4><p>CWE-561<br>CWE-670<br><br/><br><br/></p><h3 id="▌R9-1-3-在-if…else-if-分枝中不应有被遮盖的条件"><a href="#▌R9-1-3-在-if…else-if-分枝中不应有被遮盖的条件" class="headerlink" title="▌R9.1.3 在 if…else-if 分枝中不应有被遮盖的条件"></a><span id="if_hiddencondition">▌R9.1.3 在 if…else-if 分枝中不应有被遮盖的条件</span></h3><p>ID_if_hiddenCondition&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: control error</p><hr/><p>if…else-if 分枝中，如果前面的条件被满足，后面的分枝就不会被执行，所以如果前面的条件是后面条件的一部分，或者前面的条件包含后面的条件，即使后面的条件可以被满足，其分枝也得不到执行机会。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">    branch1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (condition2) &#123;</span><br><span class="line">    branch2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (condition1 &amp;&amp; condition3) &#123;  <span class="comment">// Non-compliant, see the previous ‘condition1’</span></span><br><span class="line">    branch3</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    branch4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 condition1 为 true，branch1 将得以执行，branch3 不会被执行，如果 condition1 为 false，branch3 还是不会被执行，称 branch3 被 condition1 遮盖了，branch3 永远不会得到执行机会。  </p><p>如果前面的条件包含后面的条件，同样也会遮盖后面的条件，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (condition1 || condition2) &#123;</span><br><span class="line">    branch1</span><br><span class="line">&#125;</span><br><span class="line">else if (condition2) &#123;  // Non-compliant, see the previous ‘condition2’</span><br><span class="line">    branch2</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    branch3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，branch2 永远也不会被执行。<br><br/><br><br/></p><h4 id="相关-128"><a href="#相关-128" class="headerlink" title="相关"></a>相关</h4><p>ID_if_identicalCondition<br><br/></p><h4 id="参考-215"><a href="#参考-215" class="headerlink" title="参考"></a>参考</h4><p>CWE-561<br>CWE-670<br><br/><br><br/></p><h3 id="▌R9-1-4-if-分枝和-else-分枝的代码不应完全相同"><a href="#▌R9-1-4-if-分枝和-else-分枝的代码不应完全相同" class="headerlink" title="▌R9.1.4 if 分枝和 else 分枝的代码不应完全相同"></a><span id="if_identicalblock">▌R9.1.4 if 分枝和 else 分枝的代码不应完全相同</span></h3><p>ID_if_identicalBlock&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: control error</p><hr/><p>if 分枝和 else 分枝完全相同会使条件判断失去意义，往往是由复制粘贴造成的错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    branch</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    branch  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 branch 表示完全相同的代码，需修正本应存在的差异，或去掉 if-else 结构。<br><br/><br><br/></p><h4 id="相关-129"><a href="#相关-129" class="headerlink" title="相关"></a>相关</h4><p>ID_if_identicalElseIfBlock<br>ID_if_identicalImplicitElseBlock<br><br/></p><h4 id="参考-216"><a href="#参考-216" class="headerlink" title="参考"></a>参考</h4><p>CWE-670<br><br/><br><br/></p><h3 id="▌R9-1-5-if…else-if-各分枝的代码不应完全相同"><a href="#▌R9-1-5-if…else-if-各分枝的代码不应完全相同" class="headerlink" title="▌R9.1.5 if…else-if 各分枝的代码不应完全相同"></a><span id="if_identicalelseifblock">▌R9.1.5 if…else-if 各分枝的代码不应完全相同</span></h3><p>ID_if_identicalElseIfBlock&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>内容完全相同的分枝是没有意义的，也可能是由复制粘贴造成的错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">    branch1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (condition2) &#123;</span><br><span class="line">    branch2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    branch1  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 condition1 对应分枝和 else 分枝的内容完全相同，应该合并成一个分枝，或修正本应存在的差异：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (condition2) &#123;</span><br><span class="line">    branch2</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    branch1  // Compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例外：<br>如果分枝内容较少，为了使代码更清晰可以接受适当的重复，但如果分枝内容很多就不应重复了，审计工具不妨指定一个数量限制，当重复分枝的符号数量超过这个限制时算作违规，否则放过。<br><br/><br><br/></p><h4 id="配置-24"><a href="#配置-24" class="headerlink" title="配置"></a>配置</h4><p>blockTokenCountThreshold：分枝符号数量阈值，不检查符号数量小于该值的分枝<br><br/></p><h4 id="相关-130"><a href="#相关-130" class="headerlink" title="相关"></a>相关</h4><p>ID_if_identicalBlock<br><br/></p><h4 id="参考-217"><a href="#参考-217" class="headerlink" title="参考"></a>参考</h4><p>CWE-670<br><br/><br><br/></p><h3 id="▌R9-1-6-if-分枝和隐含的-else-分枝代码不应完全相同"><a href="#▌R9-1-6-if-分枝和隐含的-else-分枝代码不应完全相同" class="headerlink" title="▌R9.1.6 if 分枝和隐含的 else 分枝代码不应完全相同"></a><span id="if_identicalimplicitelseblock">▌R9.1.6 if 分枝和隐含的 else 分枝代码不应完全相同</span></h3><p>ID_if_identicalImplicitElseBlock&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>带有 return、throw 或 break 等子句的 if 语句，其同一作用域的后续代码相当于它的 else 分枝，显然这种隐含的 else 分枝与 if 分枝完全相同是没有意义的，很可能是由复制粘贴造成的错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    statements</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">statements  <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><p>例中 if 语句之内的 statements 以及 return 语句和 if 语句之外的语句完全相同，这种情况下 if 语句的条件判断是没有意义的，需修正本应存在的差异，或去掉 if 语句。<br><br/><br><br/></p><h4 id="相关-131"><a href="#相关-131" class="headerlink" title="相关"></a>相关</h4><p>ID_if_identicalElseIfBlock<br>ID_if_identicalSucceedingBlock<br><br/></p><h4 id="参考-218"><a href="#参考-218" class="headerlink" title="参考"></a>参考</h4><p>CWE-670<br><br/><br><br/></p><h3 id="▌R9-1-7-没有-else-子句的-if-语句与其后续代码相同是可疑的"><a href="#▌R9-1-7-没有-else-子句的-if-语句与其后续代码相同是可疑的" class="headerlink" title="▌R9.1.7 没有 else 子句的 if 语句与其后续代码相同是可疑的"></a><span id="if_identicalsucceedingblock">▌R9.1.7 没有 else 子句的 if 语句与其后续代码相同是可疑的</span></h3><p>ID_if_identicalSucceedingBlock&emsp;&emsp;&emsp;&emsp;&nbsp;:question: control suspicious</p><hr/><p>if 语句与其同一作用域的后续代码完全相同是可疑的，可能是由复制粘贴造成的错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    a = SOME_VALUE;</span><br><span class="line">&#125;</span><br><span class="line">a = SOME_VALUE;  <span class="comment">// Rather suspicious</span></span><br></pre></td></tr></table></figure><p>例中对变量 a 的赋值是没有意义的。<br><br/><br><br/></p><h4 id="相关-132"><a href="#相关-132" class="headerlink" title="相关"></a>相关</h4><p>ID_if_identicalImplicitElseBlock<br><br/></p><h4 id="参考-219"><a href="#参考-219" class="headerlink" title="参考"></a>参考</h4><p>CWE-670<br><br/><br><br/></p><h3 id="▌R9-1-8-if-分枝和-else-分枝的起止语句不应相同"><a href="#▌R9-1-8-if-分枝和-else-分枝的起止语句不应相同" class="headerlink" title="▌R9.1.8 if 分枝和 else 分枝的起止语句不应相同"></a><span id="if_commonstatements">▌R9.1.8 if 分枝和 else 分枝的起止语句不应相同</span></h3><p>ID_if_commonStatements&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: control suggestion</p><hr/><p>如果 if 分枝和 else 分枝的起止语句相同，应将其从分枝结构中提取出来，否则重复的代码不利于阅读和维护。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="built_in">foo</span>();</span><br><span class="line">    ....</span><br><span class="line">    <span class="built_in">bar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">foo</span>();</span><br><span class="line">    ....</span><br><span class="line">    <span class="built_in">bar</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if 与 else 分枝的开头和结尾相同，应提取出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">foo();</span><br><span class="line">if (condition) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure><p>当条件分枝中的所有语句都相同时，本规则特化为 ID_if_identicalBlock，这种情况往往意味着错误。<br><br/><br><br/></p><h4 id="相关-133"><a href="#相关-133" class="headerlink" title="相关"></a>相关</h4><p>ID_if_identicalBlock<br><br/></p><h4 id="参考-220"><a href="#参考-220" class="headerlink" title="参考"></a>参考</h4><p>CWE-670<br>C++ Core Guidelines ES.3<br><br/><br><br/></p><h3 id="▌R9-1-9-if-语句作用域的范围不应有误"><a href="#▌R9-1-9-if-语句作用域的范围不应有误" class="headerlink" title="▌R9.1.9 if 语句作用域的范围不应有误"></a><span id="if_scope">▌R9.1.9 if 语句作用域的范围不应有误</span></h3><p>ID_if_scope&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>if 语句作用域的范围不应有误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">    statement1; statement2;  <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">    statement1;</span><br><span class="line">    statement2;  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中 statement2 不在 if 语句的作用域中，但看起来又和 if 语句相关，这种问题多数是由错误的宏展开或无效的缩进造成的。  </p><p>为了避免这种问题，if 语句应使用大括号括起来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (condition) &#123;</span><br><span class="line">    statement1; statement2;  // Compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-134"><a href="#相关-134" class="headerlink" title="相关"></a>相关</h4><p>ID_if_brace<br><br/></p><h4 id="参考-221"><a href="#参考-221" class="headerlink" title="参考"></a>参考</h4><p>CWE-483<br><br/><br><br/></p><h3 id="▌R9-1-10-如果-if-关键字前面是右大括号，if-关键字应另起一行"><a href="#▌R9-1-10-如果-if-关键字前面是右大括号，if-关键字应另起一行" class="headerlink" title="▌R9.1.10 如果 if 关键字前面是右大括号，if 关键字应另起一行"></a><span id="if_maybeelseif">▌R9.1.10 如果 if 关键字前面是右大括号，if 关键字应另起一行</span></h3><p>ID_if_mayBeElseIf&emsp;&emsp;&emsp;&emsp;&nbsp;:question: control suspicious</p><hr/><p>当 if 关键字前面是右大括号，且 if 关键字与该大括号在同一行时，属于不良换行方式，易造成 else 等关键字的遗漏。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="keyword">if</span> (condition2) &#123;  <span class="comment">// Rather suspicious, should it be ‘else if’??</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况很可能是漏掉了 else 关键字，即使没有被漏掉，也应该让 if 关键字另起一行，否则这种换行习惯会增加遗漏 else 关键字的风险，而且可读性较差。<br><br/><br><br/><br><br/></p><h3 id="▌R9-1-11-if-语句的条件不应为赋值表达式"><a href="#▌R9-1-11-if-语句的条件不应为赋值表达式" class="headerlink" title="▌R9.1.11 if 语句的条件不应为赋值表达式"></a><span id="if_assignment">▌R9.1.11 if 语句的条件不应为赋值表达式</span></h3><p>ID_if_assignment&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>虽然语言允许在 if 语句的条件中赋值，但 &#x3D; 和 &#x3D;&#x3D; 极易混淆，建议所有产生 bool 型结果的表达式，都不要包含赋值运算符。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(HRESULT r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r = S_OK) &#123;     <span class="comment">// Non-compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 S_OK 为常量，在条件中用常量对变量赋值是没有逻辑意义的，如果条件中等号右侧为常量，基本可以判定是 &#x3D;&#x3D; 被误写成了 &#x3D;。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (r = fun()) &#123;   // Non-compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 fun 为函数，这也是一种公认的不良风格，应将赋值表达式拆分出来，或者在 C++ 代码中改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (auto r = fun()) &#123;   // Compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将赋值表达式加上括号表示有意为之，是一种惯用写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ((r = fun())) &#123;   // Let it go?</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>审计工具不妨通过配置决定是否放过这种情况。<br><br/><br><br/></p><h4 id="配置-25"><a href="#配置-25" class="headerlink" title="配置"></a>配置</h4><p>allowEnclosedAssignment：是否放过括号括起来的赋值表达式<br><br/></p><h4 id="参考-222"><a href="#参考-222" class="headerlink" title="参考"></a>参考</h4><p>CWE-480<br>CWE-481<br>CWE-783<br><br/><br><br/></p><h3 id="▌R9-1-12-if-语句不应为空"><a href="#▌R9-1-12-if-语句不应为空" class="headerlink" title="▌R9.1.12 if 语句不应为空"></a><span id="if_emptyblock">▌R9.1.12 if 语句不应为空</span></h3><p>ID_if_emptyBlock&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>空的 if 语句或 else 子句往往是残留代码或功能未实现。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (cond);     <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="keyword">if</span> (cond) &#123;&#125;   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>如果 if 语句没有 else 分枝，且其分枝内容为空，这样的 if 语句无任何意义，即使其条件有副作用，也不应继续保留该 if 结构。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (cond) &#123;    // Non-compliant, empty</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    ....       // Nonempty statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!cond) &#123;   <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者添加注释说明为何为空：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (cond) &#123;  </span><br><span class="line">    ;          // Compliant if reasonable comments are provided</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-223"><a href="#参考-223" class="headerlink" title="参考"></a>参考</h4><p>CWE-1071<br><br/><br><br/></p><h3 id="▌R9-1-13-if…else-if-分枝数量应在规定范围之内"><a href="#▌R9-1-13-if…else-if-分枝数量应在规定范围之内" class="headerlink" title="▌R9.1.13 if…else-if 分枝数量应在规定范围之内"></a><span id="if_toomanyelseif">▌R9.1.13 if…else-if 分枝数量应在规定范围之内</span></h3><p>ID_if_tooManyElseIf&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>if…else-if 分枝过多不利于阅读和维护，而且执行时需逐一判断各分枝的条件，效率较低，建议改为遵循某种算法的索引结构。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (rabbit) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (hamster) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... 3000 branches ...</span></span><br><span class="line"><span class="comment">// Computers have the courage to execute,</span></span><br><span class="line"><span class="comment">// but do you have the courage to read?</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议 if…else-if 分枝数量不超过 5 个。<br><br/><br><br/></p><h4 id="配置-26"><a href="#配置-26" class="headerlink" title="配置"></a>配置</h4><p>maxElseIfCount：分枝数量上限，超过则报出<br><br/><br><br/></p><h3 id="▌R9-1-14-if-分枝中的语句应该用大括号括起来"><a href="#▌R9-1-14-if-分枝中的语句应该用大括号括起来" class="headerlink" title="▌R9.1.14 if 分枝中的语句应该用大括号括起来"></a><span id="if_brace">▌R9.1.14 if 分枝中的语句应该用大括号括起来</span></h3><p>ID_if_brace&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: control suggestion</p><hr/><p>组成 if 分枝的语句应为大括号括起来的复合语句，即使该复合语句只包含一条语句。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (cond1)           <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="keyword">if</span> (cond2)       <span class="comment">// Non-compliant</span></span><br><span class="line">        <span class="built_in">action1</span>();</span><br><span class="line"><span class="keyword">else</span>                 <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="built_in">action2</span>();</span><br></pre></td></tr></table></figure><p>根据缩进，这段代码想表达的逻辑应是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (cond1) &#123;</span><br><span class="line">    if (cond2) &#123;</span><br><span class="line">        action1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    action2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但 C&#x2F;C++ 规定 else 子句与最近的 if 子句配对，所以实际逻辑是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (cond1) &#123;</span><br><span class="line">    if (cond2) &#123;</span><br><span class="line">        action1();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        action2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这显然是与预期不符的。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (cond)      // Non-compliant</span><br><span class="line">    y = 2;</span><br><span class="line">else           // Non-compliant</span><br><span class="line">    x = 3;</span><br><span class="line">    y = 1;</span><br></pre></td></tr></table></figure><p>例中 y &#x3D; 1; 看起来应该是 else 分枝的一部分，但它实际上并不在 else 的作用范围之内，所以用大括号括起来可避免此类问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (cond) &#123;    // Compliant</span><br><span class="line">    y = 2;</span><br><span class="line">&#125; else &#123;       // Compliant</span><br><span class="line">    x = 3;</span><br><span class="line">    y = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (cond1) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125; else if (cond2) &#123;   // Compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接与 if 语句相连的 else 子句不受本规则约束。<br><br/><br><br/></p><h4 id="相关-135"><a href="#相关-135" class="headerlink" title="相关"></a>相关</h4><p>ID_do_brace<br>ID_for_brace<br>ID_while_brace<br>ID_switch_brace<br><br/></p><h4 id="参考-224"><a href="#参考-224" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 14.9<br>MISRA C 2012 15.6<br>MISRA C++ 2008 6-4-1<br><br/><br><br/></p><h3 id="▌R9-1-15-所有-if…else-if-分枝都应以-else-子句结束"><a href="#▌R9-1-15-所有-if…else-if-分枝都应以-else-子句结束" class="headerlink" title="▌R9.1.15 所有 if…else-if 分枝都应以 else 子句结束"></a><span id="if_missingendingelse">▌R9.1.15 所有 if…else-if 分枝都应以 else 子句结束</span></h3><p>ID_if_missingEndingElse&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: control suggestion</p><hr/><p>所有 if…else-if 分枝都以 else 子句结束是“<a href="https://en.wikipedia.org/wiki/Defensive_programming">防御性编程</a>”思想的良好体现。  </p><p>单独的一个 if 分枝不要求接有 else 子句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (x &gt; 0) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在多个 if…else-if 分枝时，要求接有 else 子句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if (x &gt; 0) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">else if (y &lt; 0)&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    // Comment is the minimum requirement,</span><br><span class="line">    // if here is unreachable logically,</span><br><span class="line">    // it&#x27;s better to log or throw an exception</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-136"><a href="#相关-136" class="headerlink" title="相关"></a>相关</h4><p>ID_switch_missingDefault<br><br/></p><h4 id="参考-225"><a href="#参考-225" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 15.7<br>MISRA C++ 2008 6-4-2<br><br/><br><br/></p><h3 id="9-2-For"><a href="#9-2-For" class="headerlink" title="9.2 For"></a><span id="control.for">9.2 For</span></h3><h3 id="▌R9-2-1-for-语句不应被分号隔断"><a href="#▌R9-2-1-for-语句不应被分号隔断" class="headerlink" title="▌R9.2.1 for 语句不应被分号隔断"></a><span id="for_semicolon">▌R9.2.1 for 语句不应被分号隔断</span></h3><p>ID_for_semicolon&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: control error</p><hr/><p>for 语句不应被分号隔断。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (....);  <span class="comment">// Non-compliant, see the semicolon</span></span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分号使循环失效，这可能是笔误，也可能是有人恶意篡改了代码，应立即修正。<br><br/><br><br/></p><h4 id="相关-137"><a href="#相关-137" class="headerlink" title="相关"></a>相关</h4><p>ID_do_brace<br>ID_if_brace<br>ID_switch_brace<br>ID_while_brace<br><br/></p><h4 id="参考-226"><a href="#参考-226" class="headerlink" title="参考"></a>参考</h4><p>CWE-670<br><br/><br><br/></p><h3 id="▌R9-2-2-for-语句中不应存在无条件的跳转语句"><a href="#▌R9-2-2-for-语句中不应存在无条件的跳转语句" class="headerlink" title="▌R9.2.2 for 语句中不应存在无条件的跳转语句"></a><span id="for_uncondbroken">▌R9.2.2 for 语句中不应存在无条件的跳转语句</span></h3><p>ID_for_uncondBroken&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: control error</p><hr/><p>无条件的 return、throw 或 break 语句会使循环失效，无条件的 continue 语句会使其后面的代码失效，如果其后没有代码时，该 continue 语句是没有意义的。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (....) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cond)</span><br><span class="line">        <span class="built_in">foo</span>();</span><br><span class="line">        <span class="keyword">break</span>;  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种问题多数由错误的缩进或混乱的逻辑造成。<br><br/><br><br/></p><h4 id="相关-138"><a href="#相关-138" class="headerlink" title="相关"></a>相关</h4><p>ID_while_uncondBroken<br><br/></p><h4 id="参考-227"><a href="#参考-227" class="headerlink" title="参考"></a>参考</h4><p>CWE-670<br><br/><br><br/></p><h3 id="▌R9-2-3-for-语句作用域的范围不应有误"><a href="#▌R9-2-3-for-语句作用域的范围不应有误" class="headerlink" title="▌R9.2.3 for 语句作用域的范围不应有误"></a><span id="for_scope">▌R9.2.3 for 语句作用域的范围不应有误</span></h3><p>ID_for_scope&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>for 语句作用域的范围不应有误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (....)</span><br><span class="line">    statement1; statement2;  <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (....)</span><br><span class="line">    statement1;</span><br><span class="line">    statement2;  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中 statement2 不在 for 循环的作用域中，但看起来又和 for 循环相关，这种问题多数是由宏展开或无效的缩进造成的。为了避免这种问题，for 语句应使用大括号括起来。<br><br/><br><br/></p><h4 id="相关-139"><a href="#相关-139" class="headerlink" title="相关"></a>相关</h4><p>ID_for_brace<br><br/></p><h4 id="参考-228"><a href="#参考-228" class="headerlink" title="参考"></a>参考</h4><p>CWE-483<br><br/><br><br/></p><h3 id="▌R9-2-4-for-语句没有明确的循环变量时应改用-while-语句"><a href="#▌R9-2-4-for-语句没有明确的循环变量时应改用-while-语句" class="headerlink" title="▌R9.2.4 for 语句没有明确的循环变量时应改用 while 语句"></a><span id="for_simplification">▌R9.2.4 for 语句没有明确的循环变量时应改用 while 语句</span></h3><p>ID_for_simplification&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: control suggestion</p><hr/><p>for 语句一般用于实现具有明确循环次数和循环变量的迭代算法，循环变量即控制循环次数的变量。for 语句小括号内的三个表达式应分别专注于循环变量的初始化、循环条件的判断、循环变量的增减，这样可以使循环具有清晰的静态结构，便于阅读，利于维护。  </p><p>如果没有明确的循环变量，则应改用 while 循环，避免误导维护者。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; <span class="built_in">condition</span>(); n++) &#123;   <span class="comment">// Non-compliant, ‘n’ is not a loop variable</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 n 不是循环变量，它可以记录循环次数，但与循环条件无关，应改为 while 循环：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int n = 0;</span><br><span class="line">while (condition()) &#123;   // Compliant</span><br><span class="line">    ....</span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 for 语句的第 1 个和第 3 个表达式为空，则更应改为 while 循环，使代码更简洁，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (; condition(); ) &#123;   // Non-compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (;;) &#123;   // Non-compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">condition</span>()) &#123;   <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;   <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-229"><a href="#参考-229" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.73<br><br/><br><br/></p><h3 id="▌R9-2-5-for-循环体不应为空"><a href="#▌R9-2-5-for-循环体不应为空" class="headerlink" title="▌R9.2.5 for 循环体不应为空"></a><span id="for_emptyblock">▌R9.2.5 for 循环体不应为空</span></h3><p>ID_for_emptyBlock&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>空的 for 循环结构不清晰，可读性较差。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; s += i++);   <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for 语句小括号内的三个表达式应分别专注于循环变量的初始化、循环条件的判断、循环变量的增减，循环体应专注于迭代算法的实现，使程序具有清晰的静态结构，便于阅读，利于维护。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;   <span class="comment">// Compliant</span></span><br><span class="line">        s += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，在 C++ 代码中，如果只通过 for 语句遍历容器，而不对元素进行操作是没有意义的，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void bar(vector&lt;int&gt;&amp; v) &#123;</span><br><span class="line">    for (auto i: v);         // Non-compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种代码多为残留代码或功能未实现，应当及时去除或补全功能。<br><br/><br><br/></p><h4 id="参考-230"><a href="#参考-230" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.85<br><br/><br><br/></p><h3 id="▌R9-2-6-for-循环变量不应为浮点型"><a href="#▌R9-2-6-for-循环变量不应为浮点型" class="headerlink" title="▌R9.2.6 for 循环变量不应为浮点型"></a><span id="for_floatcounter">▌R9.2.6 for 循环变量不应为浮点型</span></h3><p>ID_for_floatCounter&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>用于控制循环次数的变量称为“循环变量”，这种变量不应采用浮点类型，否则循环的次数难以控制。  </p><p>由于浮点型变量的不精确性使浮点型变量不适用于控制循环次数，参见 ID_illFloatComparison。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">float</span> f = <span class="number">0.f</span>; f &lt; <span class="number">1.f</span>; f += <span class="number">0.001f</span>) &#123;  <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; n &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;  <span class="comment">// Not 1000</span></span><br></pre></td></tr></table></figure><p>本例按常识应循环 1000 次，然而由于 f 无法精确表示 0.001，导致实际循环次数与预期产生偏差。  </p><p>可变通地建立整形循环变量与浮点数的关系：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (size_t n = 0; n &lt; 1000; n++) &#123;  // Compliant</span><br><span class="line">    float f = n * 0.001f;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样循环的次数便与预期相符。<br><br/><br><br/></p><h4 id="相关-140"><a href="#相关-140" class="headerlink" title="相关"></a>相关</h4><p>ID_illFloatComparison<br><br/></p><h4 id="参考-231"><a href="#参考-231" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 13.4<br>MISRA C 2012 14.1<br>MISRA C++ 2008 6-5-1<br><br/><br><br/></p><h3 id="▌R9-2-7-for-循环变量不应在循环体内被改变"><a href="#▌R9-2-7-for-循环变量不应在循环体内被改变" class="headerlink" title="▌R9.2.7 for 循环变量不应在循环体内被改变"></a><span id="for_counterchangedinbody">▌R9.2.7 for 循环变量不应在循环体内被改变</span></h3><p>ID_for_counterChangedInBody&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>用于控制循环次数的变量称为“循环变量”，为了使代码具有清晰的静态结构，循环变量只应在 for 语句的第 3 个表达式中被改变。   </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">if</span> (cond) &#123;</span><br><span class="line">        ++i;      <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中循环变量 i 在多处被改变，循环的执行次数和结束条件变得难以理解，易错且不利于维护。<br><br/><br><br/></p><h4 id="参考-232"><a href="#参考-232" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.86<br>MISRA C 2004 13.6<br>MISRA C++ 2008 6-5-3<br><br/><br><br/></p><h3 id="▌R9-2-8-嵌套的-for-语句不应使用相同的循环变量"><a href="#▌R9-2-8-嵌套的-for-语句不应使用相同的循环变量" class="headerlink" title="▌R9.2.8 嵌套的 for 语句不应使用相同的循环变量"></a><span id="for_counternested">▌R9.2.8 嵌套的 for 语句不应使用相同的循环变量</span></h3><p>ID_for_counterNested&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>同一个循环变量在内外层 for 循环中均被修改，使循环次数难以控制，是过于复杂的循环逻辑，也可能是某种错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; <span class="number">10</span>; i++) &#123;         <span class="comment">// Non-compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-141"><a href="#相关-141" class="headerlink" title="相关"></a>相关</h4><p>ID_for_counterChangedInBody<br><br/><br><br/></p><h3 id="▌R9-2-9-for-循环体应该用大括号括起来"><a href="#▌R9-2-9-for-循环体应该用大括号括起来" class="headerlink" title="▌R9.2.9 for 循环体应该用大括号括起来"></a><span id="for_brace">▌R9.2.9 for 循环体应该用大括号括起来</span></h3><p>ID_for_brace&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: control suggestion</p><hr/><p>for 循环体应为大括号括起来的复合语句，即使该复合语句只包含一条语句。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)  <span class="comment">// Non-compliant</span></span><br><span class="line">    a += i;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  <span class="comment">// Compliant</span></span><br><span class="line">    a += i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-233"><a href="#参考-233" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 14.8<br>MISRA C 2012 15.6<br>MISRA C++ 2008 6-3-1<br><br/><br><br/></p><h3 id="9-3-While"><a href="#9-3-While" class="headerlink" title="9.3 While"></a><span id="control.while">9.3 While</span></h3><h3 id="▌R9-3-1-while-语句不应被分号隔断"><a href="#▌R9-3-1-while-语句不应被分号隔断" class="headerlink" title="▌R9.3.1 while 语句不应被分号隔断"></a><span id="while_semicolon">▌R9.3.1 while 语句不应被分号隔断</span></h3><p>ID_while_semicolon&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: control error</p><hr/><p>while 语句不应被分号隔断。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition);  <span class="comment">// Non-compliant, see the semicolon</span></span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分号使循环失效，有造成死循环的危险。<br><br/><br><br/></p><h4 id="参考-234"><a href="#参考-234" class="headerlink" title="参考"></a>参考</h4><p>CWE-670<br><br/><br><br/></p><h3 id="▌R9-3-2-while-语句中不应存在无条件的跳转语句"><a href="#▌R9-3-2-while-语句中不应存在无条件的跳转语句" class="headerlink" title="▌R9.3.2 while 语句中不应存在无条件的跳转语句"></a><span id="while_uncondbroken">▌R9.3.2 while 语句中不应存在无条件的跳转语句</span></h3><p>ID_while_uncondBroken&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: control error</p><hr/><p>不受条件限制的 return、throw 或 break 语句会使循环失效，不受条件限制的 continue 语句会使其后面的代码失效，如果其后没有代码，该 continue 语句是没有意义的。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span>;     <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">break</span>;      <span class="comment">// Non-compliant, becomes an if-statement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">continue</span>;   <span class="comment">// Non-compliant, meaningless continue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种问题多数由错误的缩进或混乱的逻辑造成。<br><br/><br><br/></p><h4 id="相关-142"><a href="#相关-142" class="headerlink" title="相关"></a>相关</h4><p>ID_for_uncondBroken<br><br/></p><h4 id="参考-235"><a href="#参考-235" class="headerlink" title="参考"></a>参考</h4><p>CWE-670<br><br/><br><br/></p><h3 id="▌R9-3-3-while-语句的条件不应为赋值表达式"><a href="#▌R9-3-3-while-语句的条件不应为赋值表达式" class="headerlink" title="▌R9.3.3 while 语句的条件不应为赋值表达式"></a><span id="while_assignment">▌R9.3.3 while 语句的条件不应为赋值表达式</span></h3><p>ID_while_assignment&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>虽然语言允许在 while 语句的条件中赋值，但 &#x3D; 和 &#x3D;&#x3D; 极易混淆，建议所有产生 bool 型结果的表达式，都不要包含赋值运算符。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (x = <span class="number">123</span>)  <span class="comment">// Non-compliant</span></span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-143"><a href="#相关-143" class="headerlink" title="相关"></a>相关</h4><p>ID_if_assignment<br><br/></p><h4 id="参考-236"><a href="#参考-236" class="headerlink" title="参考"></a>参考</h4><p>CWE-480<br>CWE-783<br><br/><br><br/></p><h3 id="▌R9-3-4-while-语句作用域的范围不应有误"><a href="#▌R9-3-4-while-语句作用域的范围不应有误" class="headerlink" title="▌R9.3.4 while 语句作用域的范围不应有误"></a><span id="while_scope">▌R9.3.4 while 语句作用域的范围不应有误</span></h3><p>ID_while_scope&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>while 语句作用域的范围不应有误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition)</span><br><span class="line">    statement1; statement2;  <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition)</span><br><span class="line">    statement1;</span><br><span class="line">    statement2;  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中 statement2 不在 while 循环的作用域中，但看起来又和 while 循环相关，这种问题多数是由宏展开或无效的缩进造成的。<br>为了避免这种问题，while 语句应使用大括号括起来。<br><br/><br><br/></p><h4 id="相关-144"><a href="#相关-144" class="headerlink" title="相关"></a>相关</h4><p>ID_while_brace<br><br/></p><h4 id="参考-237"><a href="#参考-237" class="headerlink" title="参考"></a>参考</h4><p>CWE-483<br><br/><br><br/></p><h3 id="▌R9-3-5-while-循环体不应为空"><a href="#▌R9-3-5-while-循环体不应为空" class="headerlink" title="▌R9.3.5 while 循环体不应为空"></a><span id="while_emptyblock">▌R9.3.5 while 循环体不应为空</span></h3><p>ID_while_emptyBlock&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: control suggestion</p><hr/><p>空的 while 循环将功能全部压缩到了条件表达式中，各子句的职责划分不明确，可读性较差。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (flg.<span class="built_in">test_and_set</span>());     <span class="comment">// Non-compliant</span></span><br><span class="line">i = (i * j) % n;                <span class="comment">// The indent is odd here</span></span><br><span class="line">flg.<span class="built_in">clear</span>();</span><br></pre></td></tr></table></figure><p>示例代码循环检测并设置某标志位，这些功能被压缩到了循环条件中，而且容易使人误以为下一行代码也与循环有关。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;                  <span class="comment">// Compliant</span></span><br><span class="line">    <span class="keyword">if</span> (!flg.<span class="built_in">test_and_set</span>()) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">i = (i * j) % n;</span><br><span class="line">flg.<span class="built_in">clear</span>();</span><br></pre></td></tr></table></figure><p>循环体的内容才是循环主体功能的体现，不应为空。<br><br/><br><br/></p><h4 id="参考-238"><a href="#参考-238" class="headerlink" title="参考"></a>参考</h4><p>CWE-1071<br>C++ Core Guidelines ES.85<br><br/><br><br/></p><h3 id="▌R9-3-6-while-循环体应该用大括号括起来"><a href="#▌R9-3-6-while-循环体应该用大括号括起来" class="headerlink" title="▌R9.3.6 while 循环体应该用大括号括起来"></a><span id="while_brace">▌R9.3.6 while 循环体应该用大括号括起来</span></h3><p>ID_while_brace&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: control suggestion</p><hr/><p>while 循环体应为大括号括起来的复合语句，即使该复合语句只包含一条语句。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition)   <span class="comment">// Non-compliant</span></span><br><span class="line">    statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition)   <span class="comment">// Non-compliant</span></span><br><span class="line">    statement1;</span><br><span class="line">    statement2;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;   <span class="comment">// Compliant</span></span><br><span class="line">    statement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;   <span class="comment">// Compliant</span></span><br><span class="line">    statement1;</span><br><span class="line">    statement2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-145"><a href="#相关-145" class="headerlink" title="相关"></a>相关</h4><p>ID_do_brace<br>ID_for_brace<br>ID_if_brace<br>ID_switch_brace<br>ID_switch_onlyDefault<br>ID_switch_onlyOneCase<br><br/></p><h4 id="参考-239"><a href="#参考-239" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 14.8<br>MISRA C 2012 15.6<br>MISRA C++ 2008 6-3-1<br><br/><br><br/></p><h3 id="9-4-Do"><a href="#9-4-Do" class="headerlink" title="9.4 Do"></a><span id="control.do">9.4 Do</span></h3><h3 id="▌R9-4-1-注意-do-while-0-中可疑的-continue-语句"><a href="#▌R9-4-1-注意-do-while-0-中可疑的-continue-语句" class="headerlink" title="▌R9.4.1 注意 do-while(0) 中可疑的 continue 语句"></a><span id="do_suspiciouscontinue">▌R9.4.1 注意 do-while(0) 中可疑的 continue 语句</span></h3><p>ID_do_suspiciousContinue&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>continue 语句和 break 语句在语义上是不同的，但在 do-while(0) 中的功效是一样的。  </p><p>在 do-while(0) 的循环体中如果既有 break 语句又有 continue 语句，continue 语句被误用的可能性较大。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">if</span> (cond1) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">if</span> (cond2) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;   <span class="comment">// Rather suspicious</span></span><br><span class="line">        &#125;</span><br><span class="line">        ....</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议在 do-while(0) 中只使用 break 语句，不使用 continue 语句。<br><br/><br><br/></p><h4 id="参考-240"><a href="#参考-240" class="headerlink" title="参考"></a>参考</h4><p>CWE-670<br><br/><br><br/></p><h3 id="▌R9-4-2-do-while-循环体不应为空"><a href="#▌R9-4-2-do-while-循环体不应为空" class="headerlink" title="▌R9.4.2 do-while 循环体不应为空"></a><span id="do_emptyblock">▌R9.4.2 do-while 循环体不应为空</span></h3><p>ID_do_emptyBlock&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: control suggestion</p><hr/><p>空的 do-while 循环将功能全部压缩到了条件表达式中，各子句的职责划分不明确，可读性较差。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">char</span>* d, <span class="type">const</span> <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (*d++ = *s++);       <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码将循环的条件和循环产生的副作用叠加在了一起，易使人误解。<br><br/><br><br/></p><h4 id="相关-146"><a href="#相关-146" class="headerlink" title="相关"></a>相关</h4><p>ID_while_emptyBlock<br><br/></p><h4 id="参考-241"><a href="#参考-241" class="headerlink" title="参考"></a>参考</h4><p>CWE-1071<br>C++ Core Guidelines ES.85<br><br/><br><br/></p><h3 id="▌R9-4-3-do-while-循环体应该用大括号括起来"><a href="#▌R9-4-3-do-while-循环体应该用大括号括起来" class="headerlink" title="▌R9.4.3 do-while 循环体应该用大括号括起来"></a><span id="do_brace">▌R9.4.3 do-while 循环体应该用大括号括起来</span></h3><p>ID_do_brace&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: control suggestion</p><hr/><p>do-while 循环体应为大括号括起来的复合语句，即使该复合语句只包含一条语句。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>              <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="keyword">if</span> (cond)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">while</span> (*p++ = *q++);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>例中 while 关键字与 do 关键字产生了错误的对应关系，导致最后一个 while 形成了死循环，应改为：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">do &#123;              // Compliant</span><br><span class="line">    if (cond) &#123;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    while (*p++ = *q++);</span><br><span class="line">&#125;</span><br><span class="line">while (true);</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-147"><a href="#相关-147" class="headerlink" title="相关"></a>相关</h4><p>ID_for_brace<br>ID_if_brace<br>ID_switch_brace<br>ID_while_brace<br><br/></p><h4 id="参考-242"><a href="#参考-242" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 14.9<br>MISRA C 2012 15.6<br>MISRA C++ 2008 6-3-1<br><br/><br><br/></p><h3 id="▌R9-4-4-不建议使用-do-语句"><a href="#▌R9-4-4-不建议使用-do-语句" class="headerlink" title="▌R9.4.4 不建议使用 do 语句"></a><span id="do_deprecated">▌R9.4.4 不建议使用 do 语句</span></h3><p>ID_do_deprecated&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: control suggestion</p><hr/><p>do 语句的终止条件在末尾，且第一次执行时不检查终止条件，易被误用。  </p><p>do 语句可用于循环，也可用于定义由 break 等语句跳出的作用域，糅合了循环和流程跳转，使代码变得复杂，不利于阅读和维护，建议将复杂的 do 语句抽取成函数，使代码的静态结构更加清晰。  </p><p>宏定义中的 do-while(0) 可不受本规则限制。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ....</span><br><span class="line">    &#125; <span class="keyword">while</span> (condition);   <span class="comment">// Too complex</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-243"><a href="#参考-243" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.75<br><br/><br><br/></p><h3 id="9-5-Switch"><a href="#9-5-Switch" class="headerlink" title="9.5 Switch"></a><span id="control.switch">9.5 Switch</span></h3><h3 id="▌R9-5-1-switch-语句不应被分号隔断"><a href="#▌R9-5-1-switch-语句不应被分号隔断" class="headerlink" title="▌R9.5.1 switch 语句不应被分号隔断"></a><span id="switch_semicolon">▌R9.5.1 switch 语句不应被分号隔断</span></h3><p>ID_switch_semicolon&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: control error</p><hr/><p>switch 语句不应被分号隔断。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (v);  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>这是毫无意义的 switch 语句，可能是残留代码，应及时去除。<br><br/><br><br/></p><h4 id="参考-244"><a href="#参考-244" class="headerlink" title="参考"></a>参考</h4><p>CWE-670<br><br/><br><br/></p><h3 id="▌R9-5-2-switch-语句不应为空"><a href="#▌R9-5-2-switch-语句不应为空" class="headerlink" title="▌R9.5.2 switch 语句不应为空"></a><span id="switch_emptyblock">▌R9.5.2 switch 语句不应为空</span></h3><p>ID_switch_emptyBlock&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>空的 switch 语句没有意义。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (v) &#123;&#125;  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>这是毫无意义的 switch 语句，可能是残留代码，也可能是功能未实现。<br><br/><br><br/></p><h4 id="参考-245"><a href="#参考-245" class="headerlink" title="参考"></a>参考</h4><p>CWE-1071<br><br/><br><br/></p><h3 id="▌R9-5-3-case-标签的值不可超出-switch-条件的范围"><a href="#▌R9-5-3-case-标签的值不可超出-switch-条件的范围" class="headerlink" title="▌R9.5.3 case 标签的值不可超出 switch 条件的范围"></a><span id="switch_caseoutofrange">▌R9.5.3 case 标签的值不可超出 switch 条件的范围</span></h3><p>ID_switch_caseOutOfRange&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>如果 case 标签的值超出了 switch 条件的范围，会导致相应分枝永远不会被执行。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (c)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">100</span>:    <span class="comment">// Compliant</span></span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">256</span>:    <span class="comment">// Non-compliant, unreachable branch</span></span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中变量 c 的值不可能为 256，所以 case 256 对应的分枝永远不会被执行。<br><br/><br><br/></p><h4 id="相关-148"><a href="#相关-148" class="headerlink" title="相关"></a>相关</h4><p>ID_illComparison<br><br/></p><h4 id="参考-246"><a href="#参考-246" class="headerlink" title="参考"></a>参考</h4><p>CWE-561<br><br/><br><br/></p><h3 id="▌R9-5-4-switch-语句中任何子句都应从属于某个-case-或-default-分枝"><a href="#▌R9-5-4-switch-语句中任何子句都应从属于某个-case-或-default-分枝" class="headerlink" title="▌R9.5.4 switch 语句中任何子句都应从属于某个 case 或 default 分枝"></a><span id="switch_invalidstatement">▌R9.5.4 switch 语句中任何子句都应从属于某个 case 或 default 分枝</span></h3><p>ID_switch_invalidStatement&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: control error</p><hr/><p>switch 语句中任何子句都应从属于某个 case 或 default 分枝，否则不会被执行。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (v)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;    <span class="comment">// Non-compliant</span></span><br><span class="line">    i = <span class="number">0</span>;    <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">bar</span>(i);   <span class="comment">// Logic error, ‘i’ is not initialized</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中对变量 i 的声明和赋值不从属于任何 case 或 default 分枝，是无效语句。<br><br/><br><br/></p><h4 id="参考-247"><a href="#参考-247" class="headerlink" title="参考"></a>参考</h4><p>CWE-561<br>MISRA C 2012 16.1<br>MISRA C++ 2008 6-4-3<br><br/><br><br/></p><h3 id="▌R9-5-5-case-和-default-标签应直接从属于-switch-语句"><a href="#▌R9-5-5-case-和-default-标签应直接从属于-switch-语句" class="headerlink" title="▌R9.5.5 case 和 default 标签应直接从属于 switch 语句"></a><span id="switch_badformedcase">▌R9.5.5 case 和 default 标签应直接从属于 switch 语句</span></h3><p>ID_switch_badFormedCase&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: control suggestion</p><hr/><p>不直接从属于 switch 语句的 case 或 default 标签用于非结构性跳转，是公认的不良实现。  </p><p>关于非结构性跳转的进一步讨论可参见 ID_forbidGoto。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:         <span class="comment">// Compliant </span></span><br><span class="line">    <span class="keyword">if</span> (cond)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:         <span class="comment">// Non-compliant </span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">default</span>:        <span class="comment">// Non-compliant </span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 case 1 直接从属于 switch 语句，而 case 2 和 default 直接从属于 if 语句，当 v 的值不是 1 时，会绕过 if 语句的条件判断，产生非结构性跳转，与 goto 语句的问题一样，很容易导致逻辑混乱且不利于维护。  </p><p>虽然有些编程技巧会将 case 置于循环中，如“<a href="https://en.wikipedia.org/wiki/Duff's_device">Duff’s device</a>”等，但当今主流的编程语言均已不再提倡非结构性跳转。<br><br/><br><br/></p><h4 id="相关-149"><a href="#相关-149" class="headerlink" title="相关"></a>相关</h4><p>ID_forbidGotoBlocks<br><br/></p><h4 id="参考-248"><a href="#参考-248" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 15.1<br>MISRA C++ 2008 6-4-4<br><br/><br><br/></p><h3 id="▌R9-5-6-不应存在紧邻-default-标签的空-case-标签"><a href="#▌R9-5-6-不应存在紧邻-default-标签的空-case-标签" class="headerlink" title="▌R9.5.6 不应存在紧邻 default 标签的空 case 标签"></a><span id="switch_uselessfallthrough">▌R9.5.6 不应存在紧邻 default 标签的空 case 标签</span></h3><p>ID_switch_uselessFallThrough&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>紧邻 default 标签的空 case 标签是没有意义的，应当去除。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:     <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:     <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:     <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:     <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:    <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><br/><h3 id="▌R9-5-7-不应存在内容完全相同的-case-分枝"><a href="#▌R9-5-7-不应存在内容完全相同的-case-分枝" class="headerlink" title="▌R9.5.7 不应存在内容完全相同的 case 分枝"></a><span id="switch_identicalbranch">▌R9.5.7 不应存在内容完全相同的 case 分枝</span></h3><p>ID_switch_identicalBranch&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>内容完全相同的分枝应合并为一个分枝，也可能是由复制粘贴造成的错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    branch1</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    branch2</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    branch1   <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 case 3 对应的分枝和 case 1 对应的分枝内容完全相同，应将其合并为一个分枝，或修正本应存在的差异。  </p><p>例外：<br>如果分枝内容较少，为了使代码更清晰可以接受适当的重复，但如果分枝内容很多就不应重复了，审计工具不妨指定一个数量限制，当重复分枝的符号数量超过这个限制时算作违规，否则放过。<br><br/><br><br/></p><h4 id="配置-27"><a href="#配置-27" class="headerlink" title="配置"></a>配置</h4><p>branchTokenCountThreshold：分枝符号数量阈值，不检查符号数量小于该值的分枝<br><br/></p><h4 id="相关-150"><a href="#相关-150" class="headerlink" title="相关"></a>相关</h4><p>ID_if_identicalBlock<br>ID_if_identicalElseIfBlock<br><br/></p><h4 id="参考-249"><a href="#参考-249" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.3<br><br/><br><br/></p><h3 id="▌R9-5-8-switch-语句的条件不应为-bool-型"><a href="#▌R9-5-8-switch-语句的条件不应为-bool-型" class="headerlink" title="▌R9.5.8 switch 语句的条件不应为 bool 型"></a><span id="switch_bool">▌R9.5.8 switch 语句的条件不应为 bool 型</span></h3><p>ID_switch_bool&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>如果条件为 bool 型，应改用 if-else 语句使代码的结构更清晰。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">bool</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (b)   <span class="comment">// Non-compliant</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">bool</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b)  <span class="comment">// Compliant</span></span><br><span class="line">    &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-250"><a href="#参考-250" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 15.4<br>MISRA C 2012 16.7<br>MISRA C++ 2008 6-4-7<br><br/><br><br/></p><h3 id="▌R9-5-9-switch-语句不应只包含-default-标签"><a href="#▌R9-5-9-switch-语句不应只包含-default-标签" class="headerlink" title="▌R9.5.9 switch 语句不应只包含 default 标签"></a><span id="switch_onlydefault">▌R9.5.9 switch 语句不应只包含 default 标签</span></h3><p>ID_switch_onlyDefault&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>只有 default 标签的 switch 语句是没有意义的，起不到分枝选择的作用，往往是残留代码或功能未实现。  </p><p>示例： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">switch (v)</span><br><span class="line">&#123;</span><br><span class="line">default:    // Non-compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种空的可以 fallthrough 到 default 标签的空 case 标签也是没有意义的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">switch (v)</span><br><span class="line">&#123;</span><br><span class="line">case 1:     // Non-compliant</span><br><span class="line">case 2:</span><br><span class="line">default:</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-251"><a href="#参考-251" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 16.6<br><br/><br><br/></p><h3 id="▌R9-5-10-switch-语句不应只包含一个-case-标签"><a href="#▌R9-5-10-switch-语句不应只包含一个-case-标签" class="headerlink" title="▌R9.5.10 switch 语句不应只包含一个 case 标签"></a><span id="switch_onlyonecase">▌R9.5.10 switch 语句不应只包含一个 case 标签</span></h3><p>ID_switch_onlyOneCase&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>只有一个 case 标签的 switch 语句与 if 语句语义相同，但形式上更为复杂，应改为 if 语句。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">123</span>:    <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (v == <span class="number">123</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-252"><a href="#参考-252" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 16.6<br><br/><br><br/></p><h3 id="▌R9-5-11-switch-语句分枝数量应在规定范围之内"><a href="#▌R9-5-11-switch-语句分枝数量应在规定范围之内" class="headerlink" title="▌R9.5.11 switch 语句分枝数量应在规定范围之内"></a><span id="switch_toomanycases">▌R9.5.11 switch 语句分枝数量应在规定范围之内</span></h3><p>ID_switch_tooManyCases&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>switch 语句分枝过多不利于阅读和维护，这种情况下建议将分枝抽取成函数，再按遵循某种算法的索引结构组织在一起。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: .... <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: .... <span class="keyword">break</span>;</span><br><span class="line">        ....             <span class="comment">// Lots of cases</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1000</span>: .... <span class="keyword">break</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议 case 数量不超过 10 个。<br><br/><br><br/></p><h4 id="配置-28"><a href="#配置-28" class="headerlink" title="配置"></a>配置</h4><p>maxCasesCount：分枝数量上限，超过则报出<br><br/><br><br/></p><h3 id="▌R9-5-12-switch-语句应配有-default-分枝"><a href="#▌R9-5-12-switch-语句应配有-default-分枝" class="headerlink" title="▌R9.5.12 switch 语句应配有 default 分枝"></a><span id="switch_missingdefault">▌R9.5.12 switch 语句应配有 default 分枝</span></h3><p>ID_switch_missingDefault&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: control suggestion</p><hr/><p>所有 switch 语句都配有 default 分枝是“<a href="https://en.wikipedia.org/wiki/Defensive_programming">防御性编程</a>”思想的良好体现。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// Comment is the minimum requirement,</span></span><br><span class="line">    <span class="comment">// if here is unreachable logically,</span></span><br><span class="line">    <span class="comment">// it&#x27;s better to log or throw an exception</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例外：<br>当 switch 条件为枚举类型，且 case 标签已对应所有枚举项时，不再要求有 default 分枝。<br><br/><br><br/></p><h4 id="相关-151"><a href="#相关-151" class="headerlink" title="相关"></a>相关</h4><p>ID_if_missingEndingElse<br><br/></p><h4 id="参考-253"><a href="#参考-253" class="headerlink" title="参考"></a>参考</h4><p>CWE-478<br>MISRA C++ 2008 6-4-6<br><br/><br><br/></p><h3 id="▌R9-5-13-switch-语句的每个非空分枝都应该用无条件的-break-或-return-语句终止"><a href="#▌R9-5-13-switch-语句的每个非空分枝都应该用无条件的-break-或-return-语句终止" class="headerlink" title="▌R9.5.13 switch 语句的每个非空分枝都应该用无条件的 break 或 return 语句终止"></a><span id="switch_breakomitted">▌R9.5.13 switch 语句的每个非空分枝都应该用无条件的 break 或 return 语句终止</span></h3><p>ID_switch_breakOmitted&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>在 switch 语句的分枝中，break 或 return 语句的缺失是导致错误的常见原因。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;  <span class="comment">// Compliant</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    b = <span class="number">2</span>;  <span class="comment">// Non-compliant, missing ‘break’</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    b = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">break</span>;  <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相连的 case 标签不受本规则约束，但最好配有注释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">switch (c)</span><br><span class="line">&#123;</span><br><span class="line">case 0:     // Compliant</span><br><span class="line">case 1:</span><br><span class="line">    ....</span><br><span class="line">    break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>少数情况下，如果确实不能有 break 或 return 语句，应添加注释说明情况，或在 C++ 代码中用 [[fallthrough]] 注明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">switch (v)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">    do_something();</span><br><span class="line">    [[fallthrough]];   // Compliant, since C++17</span><br><span class="line">default:</span><br><span class="line">    do_something_default();</span><br><span class="line">    break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-130"><a href="#依据-130" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.8.4.2(7)<br>ISO&#x2F;IEC 9899:2011 6.8.4.2(7)<br>ISO&#x2F;IEC 14882:2003 6.4.2(6)<br>ISO&#x2F;IEC 14882:2011 6.4.2(6)<br>ISO&#x2F;IEC 14882:2017 10.6.5(1 2 3)<br><br/></p><h4 id="参考-254"><a href="#参考-254" class="headerlink" title="参考"></a>参考</h4><p>CWE-484<br>C++ Core Guidelines ES.78<br>MISRA C 2004 15.2<br>MISRA C 2012 16.3<br>MISRA C++ 2008 6-4-5<br><br/><br><br/></p><h3 id="▌R9-5-14-switch-语句应该用大括号括起来"><a href="#▌R9-5-14-switch-语句应该用大括号括起来" class="headerlink" title="▌R9.5.14 switch 语句应该用大括号括起来"></a><span id="switch_brace">▌R9.5.14 switch 语句应该用大括号括起来</span></h3><p>ID_switch_brace&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: control suggestion</p><hr/><p>switch 语句应为包含多条语句的复合语句，且用大括号括起来，否则不应选用 switch 语句。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (v)   <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">foo</span>(v);</span><br></pre></td></tr></table></figure><p>应改为 if 语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (v == 0) &#123;   // Compliant</span><br><span class="line">    foo(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-152"><a href="#相关-152" class="headerlink" title="相关"></a>相关</h4><p>ID_if_brace<br>ID_switch_onlyDefault<br>ID_switch_onlyOneCase<br><br/></p><h4 id="参考-255"><a href="#参考-255" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 14.8<br>MISRA C 2012 15.6<br>MISRA C++ 2008 6-3-1<br><br/><br><br/></p><h3 id="▌R9-5-15-switch-语句不应嵌套"><a href="#▌R9-5-15-switch-语句不应嵌套" class="headerlink" title="▌R9.5.15 switch 语句不应嵌套"></a><span id="switch_forbidnest">▌R9.5.15 switch 语句不应嵌套</span></h3><p>ID_switch_forbidNest&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: control suggestion</p><hr/><p>嵌套的 switch 语句使代码显得复杂，不利于阅读和维护。  </p><p>不同 switch 语句的分枝交织在一起，较难看出分枝的从属关系，尤其是相关代码行数较多时这种问题会更为明显，应将内嵌的 switch 语句抽取成一个函数，使代码具有更清晰的静态结构。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (u)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    ....</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">switch</span> (v)  <span class="comment">// Non-compliant</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:     <span class="comment">// Confusing</span></span><br><span class="line">        ....</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><br/><h3 id="9-6-Try-catch"><a href="#9-6-Try-catch" class="headerlink" title="9.6 Try-catch"></a><span id="control.try-catch">9.6 Try-catch</span></h3><h3 id="▌R9-6-1-不应存在空的-try-块"><a href="#▌R9-6-1-不应存在空的-try-块" class="headerlink" title="▌R9.6.1 不应存在空的 try 块"></a><span id="try_emptyblock">▌R9.6.1 不应存在空的 try 块</span></h3><p>ID_try_emptyBlock&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>空的 try 块是没有意义的，可能是残留代码或功能未实现。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Empty block or some code commented out</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (Exception&amp; e) &#123;</span><br><span class="line">    <span class="comment">// The whole statement is meaningless</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是残留代码应及时删去，否则引入无意义的异常处理会影响代码优化。<br><br/><br><br/></p><h4 id="参考-256"><a href="#参考-256" class="headerlink" title="参考"></a>参考</h4><p>CWE-1071<br><br/><br><br/></p><h3 id="▌R9-6-2-不应存在空的-catch-handler"><a href="#▌R9-6-2-不应存在空的-catch-handler" class="headerlink" title="▌R9.6.2 不应存在空的 catch handler"></a><span id="catch_emptyblock">▌R9.6.2 不应存在空的 catch handler</span></h3><p>ID_catch_emptyBlock&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: control suggestion</p><hr/><p>空的 catch handler 掩盖了异常，不利于问题的排查与纠正，应至少添加日志记录等操作。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (...)   <span class="comment">// Non-compliant, very bad</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做并不能真正提高程序的稳定性，相当于逃避了问题，而且掩盖没有被处理的异常也可能会影响到其他方面的正常运行。  </p><p>对于要求不能抛出异常的接口，不妨按下例处理，记录意料之外的异常情况，以便问题的排查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void foo() noexcept &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    catch (...) &#123;</span><br><span class="line">        log_unexpected_and_exit(__FILE__, __LINE__, &quot;messages&quot;);   // Compliant</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-257"><a href="#参考-257" class="headerlink" title="参考"></a>参考</h4><p>CWE-391<br>CWE-1069<br>CWE-1071<br><br/><br><br/></p><h3 id="▌R9-6-3-不应嵌套-try-catch-语句"><a href="#▌R9-6-3-不应嵌套-try-catch-语句" class="headerlink" title="▌R9.6.3 不应嵌套 try-catch 语句"></a><span id="try_forbidnest">▌R9.6.3 不应嵌套 try-catch 语句</span></h3><p>ID_try_forbidNest&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: control suggestion</p><hr/><p>嵌套的 try-catch 语句使代码显得复杂，不利于阅读和维护。  </p><p>在嵌套的 try-catch 语句中较难看出 catch 子句与 try 子句的从属关系，尤其是相关代码行数较多时这种问题会更为明显，应将内嵌的 try-catch 语句抽取成一个函数，使代码具有更清晰的静态结构。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">try</span> &#123;        <span class="comment">// Non-compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125; <span class="built_in">catch</span> (A&amp;) &#123;     <span class="comment">// Confusing</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="built_in">catch</span> (B&amp;) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-258"><a href="#参考-258" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines E.17<br><br/><br><br/></p><h3 id="▌R9-6-4-捕获所有异常的-catch-all-handler-应位于最后"><a href="#▌R9-6-4-捕获所有异常的-catch-all-handler-应位于最后" class="headerlink" title="▌R9.6.4 捕获所有异常的 catch-all handler 应位于最后"></a><span id="try_disorderedellipsis">▌R9.6.4 捕获所有异常的 catch-all handler 应位于最后</span></h3><p>ID_try_disorderedEllipsis&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: control error</p><hr/><p>如果 catch-all handler 排在前面，其后面的 handler 将失去作用。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="built_in">catch</span> (...) &#123;  <span class="comment">// Catch-all handler, non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="built_in">catch</span> (<span class="type">const</span> E&amp;) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="built_in">catch</span> (<span class="type">const</span> E&amp;) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="built_in">catch</span> (...) &#123;  <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-131"><a href="#依据-131" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 15.3(6)<br>ISO&#x2F;IEC 14882:2011 15.3(5)<br>ISO&#x2F;IEC 14882:2011 18.3(5)<br><br/></p><h4 id="参考-259"><a href="#参考-259" class="headerlink" title="参考"></a>参考</h4><p>CWE-561<br>C++ Core Guidelines E.31<br>MISRA C++ 2008 15-3-7<br><br/><br><br/></p><h3 id="▌R9-6-5-派生类的-catch-handler-应排在基类-catch-handler-之前"><a href="#▌R9-6-5-派生类的-catch-handler-应排在基类-catch-handler-之前" class="headerlink" title="▌R9.6.5 派生类的 catch handler 应排在基类 catch handler 之前"></a><span id="try_disorderedhandlers">▌R9.6.5 派生类的 catch handler 应排在基类 catch handler 之前</span></h3><p>ID_try_disorderedHandlers&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: control error</p><hr/><p>如果违反这个顺序，派生类的 catch handler 将失去作用。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123; .... &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> B &#123; .... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="built_in">catch</span> (<span class="type">const</span> B&amp;) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="built_in">catch</span> (<span class="type">const</span> D&amp;) &#123;  <span class="comment">// Non-compliant, unreachable</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 B 为基类，D 为派生类，D 类异常会被 B 的 handler 捕获，D 的 handler 失去了作用。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="built_in">catch</span> (<span class="type">const</span> D&amp;) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="built_in">catch</span> (<span class="type">const</span> B&amp;) &#123;  <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-132"><a href="#依据-132" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 15.3<br>ISO&#x2F;IEC 14882:2011 15.3<br>ISO&#x2F;IEC 14882:2011 18.3<br><br/></p><h4 id="参考-260"><a href="#参考-260" class="headerlink" title="参考"></a>参考</h4><p>CWE-561<br>C++ Core Guidelines E.31<br>MISRA C++ 2008 15-3-6<br><br/><br><br/></p><h3 id="9-7-Jump"><a href="#9-7-Jump" class="headerlink" title="9.7 Jump"></a><span id="control.jump">9.7 Jump</span></h3><h3 id="▌R9-7-1-禁止-goto-语句向嵌套的或无包含关系的作用域跳转"><a href="#▌R9-7-1-禁止-goto-语句向嵌套的或无包含关系的作用域跳转" class="headerlink" title="▌R9.7.1 禁止 goto 语句向嵌套的或无包含关系的作用域跳转"></a><span id="forbidgotoblocks">▌R9.7.1 禁止 goto 语句向嵌套的或无包含关系的作用域跳转</span></h3><p>ID_forbidGotoBlocks&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: control warning</p><hr/><p>不同的作用域对应不同的条件约束，在不同的作用域间跳转是对约束的破坏，很容易导致逻辑混乱。  </p><p>向嵌套的或无包含关系的作用域跳转是不应被允许的，如果是为了结束当前流程而在同层或向外层作用域跳转，则可被本规则允许。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">goto</span> L;    <span class="comment">// Non-compliant, jumps into a block</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; a; j++) &#123;</span><br><span class="line">L:</span><br><span class="line">            <span class="keyword">if</span> (cond) &#123;</span><br><span class="line">                <span class="keyword">goto</span> M;   <span class="comment">// Compliant, jumps out of loops</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">M:</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 goto L 从 if 语句跳入循环语句是应当被禁止的，而 goto M 用于结束循环流程，可以保留。<br><br/><br><br/></p><h4 id="相关-153"><a href="#相关-153" class="headerlink" title="相关"></a>相关</h4><p>ID_forbidGotoBack<br>ID_forbidGoto<br><br/></p><h4 id="参考-261"><a href="#参考-261" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 15.3<br>MISRA C++ 2008 6-6-1<br><br/><br><br/></p><h3 id="▌R9-7-2-禁止-goto-语句向前跳转"><a href="#▌R9-7-2-禁止-goto-语句向前跳转" class="headerlink" title="▌R9.7.2 禁止 goto 语句向前跳转"></a><span id="forbidgotoback">▌R9.7.2 禁止 goto 语句向前跳转</span></h3><p>ID_forbidGotoBack&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: control suggestion</p><hr/><p>向先于当前 goto 语句定义的标签跳转，可读性较差，是公认的不良实现。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">L:</span><br><span class="line">    j += <span class="number">1</span>;</span><br><span class="line">    i += j;</span><br><span class="line">    <span class="keyword">if</span> (j &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">goto</span> M;      <span class="comment">// Compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">goto</span> L;          <span class="comment">// Non-compliant</span></span><br><span class="line">M:</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 goto M 向后跳转符合本规则要求，而 goto L 向前跳转不符合要求，应改用循环等结构性语句。<br><br/><br><br/></p><h4 id="相关-154"><a href="#相关-154" class="headerlink" title="相关"></a>相关</h4><p>ID_forbidGotoBlocks<br>ID_forbidGoto<br><br/></p><h4 id="参考-262"><a href="#参考-262" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 15.2<br>MISRA C++ 2008 6-6-2<br><br/><br><br/></p><h3 id="▌R9-7-3-禁用-goto-语句"><a href="#▌R9-7-3-禁用-goto-语句" class="headerlink" title="▌R9.7.3 禁用 goto 语句"></a><span id="forbidgoto">▌R9.7.3 禁用 goto 语句</span></h3><p>ID_forbidGoto&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: control suggestion</p><hr/><p>历史表明，goto 语句会破坏程序的结构性规划，很容易导致逻辑混乱且不利于阅读和维护，在非自动生成的、对可读性有要求的代码中，建议禁用 goto 语句。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (cond0) &#123;</span><br><span class="line">    <span class="keyword">goto</span> L;    <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"><span class="keyword">if</span> (cond1) &#123;</span><br><span class="line">L:</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语句的排列和作用域的嵌套描述了程序的静态结构，清晰的静态结构使人易于理解程序的行为，而 goto 语句会打破这种结构，无规律的跳转会严重地降低代码可读性，例中 goto L 会绕过第二个 if 语句的条件约束，可读性很差，应被禁止。  </p><p>C 语言的流程管理较为简单，goto 语句可提供一定的灵活性，但不应作为常规实现手段，也应受一定的限制，在 C 代码中使用 goto 语句应遵循 ID_forbidGotoBlocks 和 ID_forbidGotoBack 等规则。  </p><p>C++ 语言提供了更丰富的流程管理功能，在 C++ 代码中不应再使用 goto 语句。  </p><p>下面给出 goto 语句的一种常用模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void foo(size_t n)</span><br><span class="line">&#123;</span><br><span class="line">    int *a = NULL, *b = NULL, *c = NULL;</span><br><span class="line">    a = (int*)malloc(n);</span><br><span class="line">    if (!a) &#123;</span><br><span class="line">        goto E;</span><br><span class="line">    &#125;</span><br><span class="line">    b = (int*)malloc(n);</span><br><span class="line">    if (!b) &#123;</span><br><span class="line">        goto E;</span><br><span class="line">    &#125;</span><br><span class="line">    c = (int*)malloc(n);    // Multiple resource allocation</span><br><span class="line">    if (!c) &#123;</span><br><span class="line">        goto E;</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">E:                          // Single exit point</span><br><span class="line">    free(a);</span><br><span class="line">    free(b);</span><br><span class="line">    free(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在多次资源分配过程中，如果某次分配失败则需要释放已分配的资源，利用 goto 语句可实现资源的统一释放，在 C 代码中如果不用 goto 语句反而会很繁琐，所以这种模式在 C 代码中可以复用。  </p><p>由于 C++ 提供容器、智能指针等更丰富的资源管理手段，所以不建议在 C++ 代码中再使用这种模式，即使标准库没有和相关资源对应的功能，也应该利用“<a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization">RAII</a>”等机制对其先封装再使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void foo(size_t n) &#123;</span><br><span class="line">    std::vector&lt;int&gt; a, b, c;   // Safe and brief</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-155"><a href="#相关-155" class="headerlink" title="相关"></a>相关</h4><p>ID_forbidGotoBlocks<br>ID_forbidGotoBack<br><br/></p><h4 id="参考-263"><a href="#参考-263" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.76<br>MISRA C 2012 15.1<br><br/><br><br/></p><h3 id="▌R9-7-4-禁用-setjmp、longjmp"><a href="#▌R9-7-4-禁用-setjmp、longjmp" class="headerlink" title="▌R9.7.4 禁用 setjmp、longjmp"></a><span id="forbidlongjmp">▌R9.7.4 禁用 setjmp、longjmp</span></h3><p>ID_forbidLongjmp&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: control warning</p><hr/><p>setjmp、longjmp 可以在函数间跳转，进一步破坏了结构化编程理念，非框架代码不应使用。  </p><p>setjmp 与 longjmp 由类型为 jmp_buf 的参数关联，只能在同一线程中使用，如果调用 longjmp 时没有对应的 setjmp，或 setjmp 所在函数已经结束执行，会导致标准未定义的行为，而且要注意 setjmp、longjmp 无法与 C++ 对象自动析构等机制兼容，极易造成意料之外的错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">jmp_buf buf;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">longjmp</span>(buf, <span class="number">1</span>);     <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">float</span>)a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">setjmp</span>(buf) == <span class="number">0</span>) &#123;          <span class="comment">// Non-compliant</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, <span class="built_in">div</span>(<span class="number">3</span>, <span class="number">0</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setjmp 返回 0 表示设置跳转位置成功，之后如果调用 longjmp 会跳回 setjmp 的位置，这时 setjmp 返回非 0 值，这种机制在 C 语言中可以用作异常处理，也可以实现“协程”等概念，但会严重地降低代码可读性，在普通的业务逻辑或算法实现中不应使用。  </p><p>另外，函数间跳转与编译器的优化机制有冲突，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">jmp_buf buf;</span><br><span class="line"></span><br><span class="line">void foo() &#123; longjmp(buf, 1); &#125;</span><br><span class="line"></span><br><span class="line">void bar() &#123;</span><br><span class="line">    int i = 1;            // Missing ‘volatile’</span><br><span class="line">    if (!setjmp(buf)) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        foo();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        printf(&quot;%d\n&quot;, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在启用优化时和关闭优化时可能会有不同的输出，启用优化时局部变量 i 可能直接存于寄存器，当通过 longjmp 跳转回 bar 函数时，i++ 的结果会丢失。将局部变量用 volatile 限定可解决这种问题，但很容易遗漏或产生无必要的限定。<br><br/><br><br/></p><h4 id="依据-133"><a href="#依据-133" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.13.2.1(2)-undefined<br>ISO&#x2F;IEC 14882:2011 18.10(4)-undefined<br><br/></p><h4 id="参考-264"><a href="#参考-264" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines SL.C.1<br>MISRA C 2004 20.7<br>MISRA C 2012 21.4<br>MISRA C++ 2008 17-0-5<br><br/><br><br/></p><h3 id="▌R9-7-5-不应存在不受条件控制的跳转语句"><a href="#▌R9-7-5-不应存在不受条件控制的跳转语句" class="headerlink" title="▌R9.7.5 不应存在不受条件控制的跳转语句"></a><span id="redundantjump">▌R9.7.5 不应存在不受条件控制的跳转语句</span></h3><p>ID_redundantJump&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: control warning</p><hr/><p>不受条件控制的跳转语句不改变程序的执行路径，往往意味着逻辑错误或功能未实现 。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">goto</span> L;   <span class="comment">// Non-compliant, unconditional</span></span><br><span class="line">    ....      <span class="comment">// Dead code</span></span><br><span class="line">L:</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span>;   <span class="comment">// Non-compliant, redundant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">baz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cond) &#123;</span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">continue</span>;   <span class="comment">// Non-compliant, redundant</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><br/><h3 id="▌R9-7-6-避免使用跳转语句退出循环"><a href="#▌R9-7-6-避免使用跳转语句退出循环" class="headerlink" title="▌R9.7.6 避免使用跳转语句退出循环"></a><span id="jumpoutloop">▌R9.7.6 避免使用跳转语句退出循环</span></h3><p>ID_jumpOutLoop&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: control suggestion</p><hr/><p>循环的退出条件应与其控制表达式一致，使代码具有清晰的静态结构，否则可读性较差，尤其在多个嵌套的作用域中使用 break、goto 或 return 等跳转语句，会使代码难以理解。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (loop_cond) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y) &#123;</span><br><span class="line">            <span class="keyword">break</span>;   <span class="comment">// Bad</span></span><br><span class="line">        &#125;</span><br><span class="line">        ....</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">break</span>;   <span class="comment">// Bad</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中循环条件散落在循环体内，而且循环的主体逻辑被各种跳转语句“割裂”，是不利于阅读和维护的。<br><br/><br><br/></p><h4 id="相关-156"><a href="#相关-156" class="headerlink" title="相关"></a>相关</h4><p>ID_tooManyExit<br><br/></p><h4 id="参考-265"><a href="#参考-265" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 14.6<br>MISRA C 2012 15.4<br>MISRA C++ 2008 6-6-4<br><br/><br><br/></p><h2 id="10-Expression"><a href="#10-Expression" class="headerlink" title="10. Expression"></a><span id="expression">10. Expression</span></h2><h3 id="10-1-Logic"><a href="#10-1-Logic" class="headerlink" title="10.1 Logic"></a><span id="expression.logic">10.1 Logic</span></h3><h3 id="▌R10-1-1-不应出现不合逻辑的重复子表达式"><a href="#▌R10-1-1-不应出现不合逻辑的重复子表达式" class="headerlink" title="▌R10.1.1 不应出现不合逻辑的重复子表达式"></a><span id="illidentical">▌R10.1.1 不应出现不合逻辑的重复子表达式</span></h3><p>ID_illIdentical&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: expression error</p><hr/><p>逻辑与、逻辑或、按位与、按位或的子表达式以及三元表达式的两个分枝不应重复，否则失去逻辑意义。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>* p, <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p != <span class="literal">NULL</span> &amp;&amp; p != <span class="literal">NULL</span>;  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> FLAG0 | FLAG1 | FLAG0;   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">baz</span><span class="params">(<span class="type">bool</span> cond)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cond? <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;a&#x27;</span>;          <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中重复的子表达式都是有问题的，这是一种很常见的错误。  </p><p>这种错误往往由复制粘贴引起，所以修正时不要只是删去重复的子表达式，要考虑是否有某些项被漏掉。  </p><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (fin.get() == &#x27;a&#x27; &amp;&amp; fin.get() == &#x27;a&#x27;) &#123;   // Let it go</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重复的子表达式有一定副作用时可不受本规则限制，但不值得提倡。例中逻辑表达式从文件流中读取相邻的字符，第二个子表达式可能不会被执行，这种代码即使没有逻辑错误也是不利于维护的，参见 ID_shortCircuitSideEffect。<br><br/><br><br/></p><h4 id="参考-266"><a href="#参考-266" class="headerlink" title="参考"></a>参考</h4><p>CWE-682<br><br/><br><br/></p><h3 id="▌R10-1-2-各逻辑子表达式不应自相矛盾"><a href="#▌R10-1-2-各逻辑子表达式不应自相矛盾" class="headerlink" title="▌R10.1.2 各逻辑子表达式不应自相矛盾"></a><span id="conflictcondition">▌R10.1.2 各逻辑子表达式不应自相矛盾</span></h3><p>ID_conflictCondition&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: expression error</p><hr/><p>在逻辑表达式中，相互矛盾的子表达式会使整个表达式的结果恒为真或恒为假，造成条件失效。  </p><ol><li>判断同一变量同时等于不同的值是无效的：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a == 1 &amp;&amp; a == 2  // always false</span><br><span class="line">a != 1 || a != 2  // always true</span><br></pre></td></tr></table></figure></li><li>判断同一变量的上限小于下限是无效的：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a &lt; -128 &amp;&amp; a &gt; 127    // always false</span><br><span class="line">a &gt;= -128 || a &lt;= 127  // always true</span><br></pre></td></tr></table></figure></li><li>如下逻辑判断也是无效的：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a &gt; b &amp;&amp; a &lt; b    // always false</span><br><span class="line">a &gt; b &amp;&amp; a &lt;= b   // always false</span><br><span class="line">a &gt; b || a &lt;= b   // always true</span><br><span class="line">a == b &amp;&amp; a != b  // always false</span><br><span class="line">a == b || a != b  // always true</span><br></pre></td></tr></table></figure>这类问题均为常见笔误，须认真对待。<br/><br/></li></ol><h4 id="参考-267"><a href="#参考-267" class="headerlink" title="参考"></a>参考</h4><p>CWE-570<br>CWE-571<br><br/><br><br/></p><h3 id="▌R10-1-3-条件表达式不应恒为真或恒为假"><a href="#▌R10-1-3-条件表达式不应恒为真或恒为假" class="headerlink" title="▌R10.1.3 条件表达式不应恒为真或恒为假"></a><span id="invalidcondition">▌R10.1.3 条件表达式不应恒为真或恒为假</span></h3><p>ID_invalidCondition&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>以恒为真或恒为假的表达式作为条件是没有意义的，属于逻辑错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;   <span class="comment">// Non-compliant, always true</span></span><br><span class="line">        ....       </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ....       <span class="comment">// Infeasible path</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中变量 i 初始化为 1 后在没有被修改过的情况下，仍对其进行判断是没有意义的，else 分枝的代码得不到执行机会，显然是逻辑错误。<br><br/><br><br/></p><h4 id="相关-157"><a href="#相关-157" class="headerlink" title="相关"></a>相关</h4><p>ID_constLogicExpression<br><br/></p><h4 id="参考-268"><a href="#参考-268" class="headerlink" title="参考"></a>参考</h4><p>CWE-570<br>CWE-571<br>MISRA C 2004 13.7<br>MISRA C 2012 14.3<br>MISRA C++ 2008 0-1-2<br><br/><br><br/></p><h3 id="▌R10-1-4-不应使用多余的逻辑子表达式"><a href="#▌R10-1-4-不应使用多余的逻辑子表达式" class="headerlink" title="▌R10.1.4 不应使用多余的逻辑子表达式"></a><span id="redundantcondition">▌R10.1.4 不应使用多余的逻辑子表达式</span></h3><p>ID_redundantCondition&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>逻辑或、逻辑与的子表达式有包含关系时，其中的一个表达式是多余的。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a &gt; b &amp;&amp; a != b     <span class="comment">// None-compliant, a != b is redundant</span></span><br><span class="line">a &lt; b || a != b     <span class="comment">// None-compliant, a &lt; b is redundant</span></span><br><span class="line">a &gt;= b &amp;&amp; a == b    <span class="comment">// None-compliant, a &gt;= b is redundant</span></span><br><span class="line">a == b || a &lt;= b    <span class="comment">// None-compliant, a == b is redundant</span></span><br></pre></td></tr></table></figure><p>这种多余的子表达式很可能包含某种错误，需认真对待。<br><br/><br><br/><br><br/></p><h3 id="▌R10-1-5-逻辑表达式及其子表达式的结果不应为常量"><a href="#▌R10-1-5-逻辑表达式及其子表达式的结果不应为常量" class="headerlink" title="▌R10.1.5 逻辑表达式及其子表达式的结果不应为常量"></a><span id="constlogicexpression">▌R10.1.5 逻辑表达式及其子表达式的结果不应为常量</span></h3><p>ID_constLogicExpression&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>逻辑表达式及其子表达式的结果不应为常量，否则使逻辑判断失去意义。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;  <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">false</span>) &#123;  <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> False = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (False &amp;&amp; other_condition) &#123;  <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种代码往往是调试或维护后的残留代码，没有意义的控制语句应及时去除。  </p><p>例外：<br>true 或 1 等常量可用在 while 或 do-while 循环的条件中，false 或 0 等常量可用在 do-while 循环的条件中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while (true) &#123;  // Compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125; while (0);  // Compliant</span><br></pre></td></tr></table></figure><p>但这种特例不包括逻辑表达式的子表达式，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while (other_condition || 1) &#123;  // Non-compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，预编译阶段定义的常量也不应该作为逻辑条件或逻辑子表达式，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#define M 123</span><br><span class="line"></span><br><span class="line">if (M) &#123;  // Non-compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>能在预编译阶段确定的代码应统一用预编译方式处理，不应占用运行时资源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#if M  // Compliant</span><br><span class="line">    ....</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if constexpr (M) &#123;  // Compliant, since C++17</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-269"><a href="#参考-269" class="headerlink" title="参考"></a>参考</h4><p>CWE-570<br>CWE-571<br>MISRA C 2004 13.7<br>MISRA C 2012 14.3<br>MISRA C++ 2008 0-1-2<br><br/><br><br/></p><h3 id="▌R10-1-6-逻辑表达式的右子表达式不应有副作用"><a href="#▌R10-1-6-逻辑表达式的右子表达式不应有副作用" class="headerlink" title="▌R10.1.6 逻辑表达式的右子表达式不应有副作用"></a><span id="shortcircuitsideeffect">▌R10.1.6 逻辑表达式的右子表达式不应有副作用</span></h3><p>ID_shortCircuitSideEffect&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: expression suggestion</p><hr/><p>逻辑表达式的右子表达式有副作用会使代码变得复杂易错，不利于阅读和维护。  </p><p>对于逻辑表达式的求值，标准规定从左至右计算各子表达式的值，当可以确定整个表达式的值时，即使还有未计算的子表达式，也会立即结束求值，这种方法可提高效率，称为“短路规则（short-circuit evaluation）”。  </p><p>逻辑表达式的右子表达式受左子表达式影响，可能不会被执行，如果有副作用也可能不会生效。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a == foo || b == bar++) &#123;  <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="built_in">do_something</span>(bar);         <span class="comment">// Consider that ‘bar++’ may not be evaluated</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 a &#x3D;&#x3D; foo 为真，不论 b 是否等于 bar++，整个条件表达式的值一定为真，所以 b &#x3D;&#x3D; bar++ 不一定会被执行，需要同时考虑 bar++ 执行与未执行的两种状态，很容易产生错误，也不利于阅读和维护。<br><br/><br><br/></p><h4 id="依据-134"><a href="#依据-134" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.5.13(4)<br>ISO&#x2F;IEC 9899:1999 6.5.14(4)<br>ISO&#x2F;IEC 9899:2011 6.5.13(4)<br>ISO&#x2F;IEC 9899:2011 6.5.14(4)<br><br/></p><h4 id="参考-270"><a href="#参考-270" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 12.4<br>MISRA C 2012 13.5<br>MISRA C++ 2008 5-14-1<br><br/><br><br/></p><h3 id="▌R10-1-7-逻辑表达式应保持简洁明了"><a href="#▌R10-1-7-逻辑表达式应保持简洁明了" class="headerlink" title="▌R10.1.7 逻辑表达式应保持简洁明了"></a><span id="simplifiablecondition">▌R10.1.7 逻辑表达式应保持简洁明了</span></h3><p>ID_simplifiableCondition&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>逻辑或、逻辑与的子表达式可以合并成一个表达式时应尽量合并。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a &lt; b || a &gt; b      <span class="comment">// None-compliant, use a != b instead</span></span><br><span class="line">a &gt; b || a == b     <span class="comment">// None-compliant, use a &gt;= b instead</span></span><br><span class="line">a &lt; b || a == b     <span class="comment">// None-compliant, use a &lt;= b instead</span></span><br><span class="line">a &lt;= b &amp;&amp; a &gt;= b    <span class="comment">// None-compliant, use a == b instead</span></span><br><span class="line">a &gt; b &amp;&amp; a &gt;= b     <span class="comment">// None-compliant, use a &gt;  b instead</span></span><br><span class="line">a &lt; b || a &lt;= b     <span class="comment">// None-compliant, use a &lt;= b instead</span></span><br></pre></td></tr></table></figure><p>这种不合常理的繁琐写法也可能包含某种错误，需认真对待。<br><br/><br><br/><br><br/></p><h3 id="▌R10-1-8-可化简为逻辑表达式的三元表达式应尽量化简"><a href="#▌R10-1-8-可化简为逻辑表达式的三元表达式应尽量化简" class="headerlink" title="▌R10.1.8 可化简为逻辑表达式的三元表达式应尽量化简"></a><span id="simplifiableternary">▌R10.1.8 可化简为逻辑表达式的三元表达式应尽量化简</span></h3><p>ID_simplifiableTernary&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: expression suggestion</p><hr/><p>当三元表达式的分枝是常量 true 或 false 时应化简为逻辑表达式。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">123</span>? <span class="literal">true</span>: <span class="literal">false</span>) &#123;   <span class="comment">// Non-compliant, too verbose</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bar</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; <span class="number">123</span>? <span class="built_in">fun</span>(): <span class="literal">false</span>;   <span class="comment">// Non-compliant, verbose</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">123</span>) &#123;   <span class="comment">// Compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bar</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; <span class="number">123</span> &amp;&amp; <span class="built_in">fun</span>();   <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><br/><h3 id="10-2-Evaluation"><a href="#10-2-Evaluation" class="headerlink" title="10.2 Evaluation"></a><span id="expression.evaluation">10.2 Evaluation</span></h3><h3 id="▌R10-2-1-不可依赖不会生效的副作用"><a href="#▌R10-2-1-不可依赖不会生效的副作用" class="headerlink" title="▌R10.2.1 不可依赖不会生效的副作用"></a><span id="unevaluatedsideeffect">▌R10.2.1 不可依赖不会生效的副作用</span></h3><p>ID_unevaluatedSideEffect&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>有些运算符只关注类型，其子表达式不会被求值，子表达式的副作用也不会有实际效果。  </p><p>这类运算在 C 语言中有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sizeof、_Alignof、_Generic</span><br></pre></td></tr></table></figure><p>在 C++ 语言中有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sizeof、typeid、noexcept、decltype、declval</span><br></pre></td></tr></table></figure><p>其中 typeid 较为特殊，当其子表达式是函数调用，且返回多态类型的引用时，也会执行函数。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(a++) &lt;&lt; <span class="string">&#x27; &#x27;</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;            <span class="comment">// What is output?</span></span><br></pre></td></tr></table></figure><p>输出 4 0，a++ 不会生效。<br><br/><br><br/></p><h4 id="相关-158"><a href="#相关-158" class="headerlink" title="相关"></a>相关</h4><p>ID_sideEffectAssertion<br><br/></p><h4 id="依据-135"><a href="#依据-135" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.5.3.4(2)<br>ISO&#x2F;IEC 9899:2011 6.5.3.4(2)<br>ISO&#x2F;IEC 14882:2003 5.3.3(1)<br>ISO&#x2F;IEC 14882:2011 5.3.3(1)<br>ISO&#x2F;IEC 14882:2017 8.3.3(1)<br><br/></p><h4 id="参考-271"><a href="#参考-271" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 12.3<br>MISRA C 2012 13.6<br>MISRA C++ 2008 5-3-4<br>SEI CERT EXP44-C<br>SEI CERT EXP52-CPP<br><br/><br><br/></p><h3 id="▌R10-2-2-避免依赖特定的子表达式求值顺序"><a href="#▌R10-2-2-避免依赖特定的子表达式求值顺序" class="headerlink" title="▌R10.2.2 避免依赖特定的子表达式求值顺序"></a><span id="evaluationorderreliance">▌R10.2.2 避免依赖特定的子表达式求值顺序</span></h3><p>ID_evaluationOrderReliance&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>不同的求值顺序不应产生不同的结果，否则极易导致意料之外的错误，也会降低代码的可移植性。  </p><p>C 标准用“<a href="https://en.wikipedia.org/wiki/Sequence_point">序列点（sequence point）</a>”定义求值顺序，序列点前面的表达式先于后面的表达式求值并落实相关副作用，逻辑与、逻辑或、三元、逗号等运算符以及函数调用的左括号与序列点相关，其左子表达式先于右子表达式求值并落实副作用，赋值、算术、位运算等运算符与序列点无关，其左右子表达式的求值顺序是未声明的，函数各参数的求值顺序也是未声明的，C++ 标准与 C 标准大致相同，C++17 明确了赋值、移位等运算符的求值顺序。  </p><p>要注意子表达式的副作用在不同求值顺序下的正确性，可参见 ID_confusingAssignment 的进一步说明。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stack s &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;      <span class="comment">// A stack, the top is 1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span></span>;              <span class="comment">// Pop and return the top element from the stack</span></span><br><span class="line"><span class="type">int</span> x = <span class="built_in">pop</span>() - <span class="built_in">pop</span>();  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>设 pop 函数弹出并返回栈顶元素，减号左右的两个 pop 函数哪个先执行呢？这是标准未声明的，x 的值可以是 1 - 2，也可以是 2 - 1，由编译器决定。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="built_in">pop</span>();</span><br><span class="line"><span class="type">int</span> b = <span class="built_in">pop</span>();</span><br><span class="line">x = a - b;      <span class="comment">// Compliant, or ‘b - a’, depends on your needs</span></span><br></pre></td></tr></table></figure><p>这样便确定是栈项的第一个元素减第二个元素。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun(pop(), pop());  // Non-compliant</span><br></pre></td></tr></table></figure><p>设 fun 是函数名称或获取函数指针的表达式，标准规定 fun 会先于参数求值，但参数之间的求值顺序是未声明的。  </p><p>逻辑与、逻辑或、三元、逗号等表达式可不受本规则限制，但其子表达式需受本规则限制。<br><br/><br><br/></p><h4 id="相关-159"><a href="#相关-159" class="headerlink" title="相关"></a>相关</h4><p>ID_confusingAssignment<br><br/></p><h4 id="依据-136"><a href="#依据-136" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 5.1.2.3(2)<br>ISO&#x2F;IEC 9899:1999 Annex C<br>ISO&#x2F;IEC 9899:2011 5.1.2.3(3)<br>ISO&#x2F;IEC 9899:2011 Annex C<br><br/></p><h4 id="参考-272"><a href="#参考-272" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.43<br>C++ Core Guidelines ES.44<br><br/><br><br/></p><h3 id="▌R10-2-3-在表达式中不应多次读写同一对象"><a href="#▌R10-2-3-在表达式中不应多次读写同一对象" class="headerlink" title="▌R10.2.3 在表达式中不应多次读写同一对象"></a><span id="confusingassignment">▌R10.2.3 在表达式中不应多次读写同一对象</span></h3><p>ID_confusingAssignment&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>在表达式中多次引用并修改同一对象，很可能会因为非预期的求值顺序而产生错误的结果。  </p><p>关于对象的副作用在求值过程中何时生效这一问题，相关标准既复杂又有大量未声明和未定义的情况，故需注意：  </p><ol><li>写入对象的次数不应超过 1 次  </li><li>对象不应既被读取又被写入，除非是为了计算对象的新状态并写入对象</li></ol><p>注意，对 volatile 对象的读取相当于更新对象的值，也是一种副作用，故：  </p><ol><li>volatile 对象在表达式中只应出现 1 次  </li><li>volatile 对象不应既被读取又被写入</li></ol><p>本规则是 ID_evaluationOrderReliance 的特化。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = a++;        <span class="comment">// Non-compliant</span></span><br><span class="line">a = ++a;        <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line">++b = b;        <span class="comment">// Non-compliant</span></span><br><span class="line">b = a++ + a;    <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line">arr[i] = ++i;   <span class="comment">// Non-compliant</span></span><br><span class="line">p-&gt;<span class="built_in">fun</span>(p++);    <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fun</span>(a, a++);    <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="built_in">fun</span>(++a, a++);  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中 ++ 泛指写入操作。  </p><p>设 a 是值为 0 的整型变量，如下表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = a++;        // Non-compliant</span><br></pre></td></tr></table></figure><p>对变量 a 有两次写入，分别是增 1 和赋值为 0（子表达式 a++ 的值为 0），这两次写入的次序在 C 和 C++17 之前的标准中是未声明的，如果先增 1 再赋 0，a 的值最终为 0，如果先赋 0 再增 1，a 的值最终为 1，这种不确定的结果应当避免，C++17 规定了右子表达式的副作用先于赋值生效，所以在 C++17 之后例中表达式是无效的。  </p><p>虽然新的标准强化了求值顺序，但这种代码使人费解，很容易造成理解上的偏差，故不应使用。  </p><p>如果 a 不是 volatile 变量，应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a++;            <span class="comment">// Compliant, or</span></span><br><span class="line">a += <span class="number">1</span>;         <span class="comment">// Compliant, or</span></span><br><span class="line">a = a + <span class="number">1</span>;      <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><p>如果 a 是 volatile 变量，应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> tmp = a;</span><br><span class="line">a = tmp + <span class="number">1</span>;    <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><p>对于逻辑与、逻辑或、三元以及逗号表达式，标准明确规定了子表达式从左至右求值，左子表达式的副作用也会在右子表达式求值前生效，故可不受本规则限制，但其子表达式仍需受本规则限制，进一步可参见“<a href="https://en.wikipedia.org/wiki/Sequence_point">序列点（sequence point）</a>”以及“<a href="https://en.cppreference.com/w/cpp/language/eval_order">求值顺序</a>”等概念。<br><br/><br><br/></p><h4 id="相关-160"><a href="#相关-160" class="headerlink" title="相关"></a>相关</h4><p>ID_evaluationOrderReliance<br><br/></p><h4 id="依据-137"><a href="#依据-137" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.5(2)-undefined<br>ISO&#x2F;IEC 9899:1999 Annex C<br>ISO&#x2F;IEC 9899:2011 6.5(2)-undefined<br>ISO&#x2F;IEC 9899:2011 Annex C<br>ISO&#x2F;IEC 14882:2003 5(4)-unspecified<br>ISO&#x2F;IEC 14882:2011 1.9(15)-undefined<br>ISO&#x2F;IEC 14882:2011 5.17(1)<br>ISO&#x2F;IEC 14882:2017 8.18(1)<br><br/></p><h4 id="参考-273"><a href="#参考-273" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.43<br>MISRA C 2012 13.2<br>MISRA C++ 2008 5-0-1<br>SEI CERT EXP50-CPP<br><br/><br><br/></p><h3 id="▌R10-2-4-注意运算符优先级，避免非预期的结果"><a href="#▌R10-2-4-注意运算符优先级，避免非预期的结果" class="headerlink" title="▌R10.2.4 注意运算符优先级，避免非预期的结果"></a><span id="unexpectedprecedence">▌R10.2.4 注意运算符优先级，避免非预期的结果</span></h3><p>ID_unexpectedPrecedence&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>对运算符优先级的错误理解是产生逻辑错误的主要原因之一。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">bool</span> cond)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + cond? <span class="number">2</span>: <span class="number">3</span>;  <span class="comment">// Rather suspicious</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加号的优先级大于三元运算符，但 cond 是 bool 型变量，所以这种情况十分可疑。  </p><p>很可能应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">bool</span> cond)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + (cond? <span class="number">2</span>: <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-274"><a href="#参考-274" class="headerlink" title="参考"></a>参考</h4><p>CWE-783<br><br/><br><br/></p><h3 id="▌R10-2-5-不在同一数组或对象中的地址不可相减或比较大小"><a href="#▌R10-2-5-不在同一数组或对象中的地址不可相减或比较大小" class="headerlink" title="▌R10.2.5 不在同一数组或对象中的地址不可相减或比较大小"></a><span id="illptrdiff">▌R10.2.5 不在同一数组或对象中的地址不可相减或比较大小</span></h3><p>ID_illPtrDiff&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>不在同一数组或对象中的地址之间没有逻辑关系，这种地址相减或比较大小属于逻辑错误，也会导致标准未定义或未声明的行为。  </p><p>对于 C++ 语言，即使在同一对象中：  </p><ul><li>静态成员之间  </li><li>静态成员与非静态成员之间  </li><li>由 access-specifier 分隔的成员之间</li></ul><p>也不应对地址求差值或比较大小。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> b;</span><br><span class="line"><span class="type">ptrdiff_t</span> d;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line">b = &amp;j &gt; &amp;i;   <span class="comment">// Non-compliant, undefined in C, unspecified in C++</span></span><br><span class="line">d = &amp;j - &amp;i;   <span class="comment">// Non-compliant, undefined in C and C++ if overflow</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">&#125; a;</span><br><span class="line">b = &amp;a.j &gt; &amp;a.i;   <span class="comment">// Compliant, ‘b’ is true</span></span><br><span class="line">d = &amp;a.j - &amp;a.i;   <span class="comment">// Compliant, ‘d’ is 1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x[<span class="number">8</span>];</span><br><span class="line"><span class="type">int</span> y[<span class="number">8</span>];</span><br><span class="line">d = &amp;y[<span class="number">1</span>] - &amp;x[<span class="number">0</span>];   <span class="comment">// Non-compliant, undefined behavior if overflow</span></span><br><span class="line">d = &amp;x[<span class="number">1</span>] - &amp;x[<span class="number">0</span>];   <span class="comment">// Compliant, ‘d’ is 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line"><span class="keyword">public</span>:                   <span class="comment">// access-specifier</span></span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;i &lt; &amp;j    <span class="comment">// Non-compliant, unspecified</span></span><br><span class="line">            || &amp;j &lt; &amp;k;   <span class="comment">// Non-compliant, unspecified</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另外，指针与空指针之间也不应相减或比较大小：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int* p = &amp;foo;</span><br><span class="line">bool b = p &lt; NULL;              // Non-compliant</span><br><span class="line">ptrdiff_t d = p - (int*)NULL;   // Non-compliant</span><br></pre></td></tr></table></figure><p>指针与空指针比较大小是一种常见笔误，对此本规则特化为 ID_oddPtrZeroComparison。<br><br/><br><br/></p><h4 id="相关-161"><a href="#相关-161" class="headerlink" title="相关"></a>相关</h4><p>ID_oddPtrZeroComparison<br><br/></p><h4 id="依据-138"><a href="#依据-138" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.5.6(9)-undefined<br>ISO&#x2F;IEC 9899:1999 6.5.8(5)-undefined<br>ISO&#x2F;IEC 9899:2011 6.5.6(9)-undefined<br>ISO&#x2F;IEC 9899:2011 6.5.8(5)-undefined<br>ISO&#x2F;IEC 14882:2003 5.7(6)-undefined<br>ISO&#x2F;IEC 14882:2003 5.9(2)-unspecified<br>ISO&#x2F;IEC 14882:2011 5.7(6)-undefined<br>ISO&#x2F;IEC 14882:2011 5.9(2)-unspecified<br><br/></p><h4 id="参考-275"><a href="#参考-275" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.62<br>MISRA C 2004 17.3<br>MISRA C++ 2008 5-0-16<br>MISRA C++ 2008 5-0-17<br>MISRA C++ 2008 5-0-18<br><br/><br><br/></p><h3 id="▌R10-2-6-bool-值不应参与位运算、大小比较、数值增减"><a href="#▌R10-2-6-bool-值不应参与位运算、大小比较、数值增减" class="headerlink" title="▌R10.2.6 bool 值不应参与位运算、大小比较、数值增减"></a><span id="illbooloperation">▌R10.2.6 bool 值不应参与位运算、大小比较、数值增减</span></h3><p>ID_illBoolOperation&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>bool 值只能为真或假，不具有“大小”等数值意义，bool 值参与位运算、大小比较、数值增减是不合理的。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">foo</span><span class="params">(<span class="type">unsigned</span> flags, <span class="type">unsigned</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> flags &amp; flag != <span class="number">0</span>;               <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 !&#x3D; 的优先级高于 &amp;，所以例中的 return 语句相当于先判断 flag 是否为 0，再将这个 bool 型的结果与 flags 按位与，这是没有意义的。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">foo</span><span class="params">(<span class="type">unsigned</span> flags, <span class="type">unsigned</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (flags &amp; flag) != <span class="number">0</span>;             <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-139"><a href="#依据-139" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 5.2.6(1 2)<br>ISO&#x2F;IEC 14882:2003 5.3.2(1 2)<br>ISO&#x2F;IEC 14882:2003 D.1-deprecated<br>ISO&#x2F;IEC 14882:2011 5.2.6(1 2)<br>ISO&#x2F;IEC 14882:2011 5.3.2(1 2)<br>ISO&#x2F;IEC 14882:2011 D.1-deprecated<br><br/></p><h4 id="参考-276"><a href="#参考-276" class="headerlink" title="参考"></a>参考</h4><p>CWE-682<br>CWE-783<br>CWE-1024<br>CWE-1025<br>MISRA C 2004 12.7<br>MISRA C 2012 10.1<br>MISRA C++ 2008 5-0-21<br><br/><br><br/></p><h3 id="▌R10-2-7-不应出现复合赋值的错误形式"><a href="#▌R10-2-7-不应出现复合赋值的错误形式" class="headerlink" title="▌R10.2.7 不应出现复合赋值的错误形式"></a><span id="illformedcompoundassignment">▌R10.2.7 不应出现复合赋值的错误形式</span></h3><p>ID_illFormedCompoundAssignment&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>如下形式的复合赋值表达式（设 a 和 x 为变量或表达式）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a -= a - x;</span><br><span class="line">a /= a / x;</span><br><span class="line">a &amp;= a &amp; x;</span><br><span class="line">a |= a | x;</span><br><span class="line">a ^= a ^ x;</span><br></pre></td></tr></table></figure><p>是没有意义的，均为常见笔误，应将复合赋值改为普通赋值，或去掉重复的子表达式。<br><br/><br><br/></p><h4 id="参考-277"><a href="#参考-277" class="headerlink" title="参考"></a>参考</h4><p>CWE-682<br><br/><br><br/></p><h3 id="▌R10-2-8-避免出现复合赋值的可疑形式"><a href="#▌R10-2-8-避免出现复合赋值的可疑形式" class="headerlink" title="▌R10.2.8 避免出现复合赋值的可疑形式"></a><span id="suspiciouscompoundassignment">▌R10.2.8 避免出现复合赋值的可疑形式</span></h3><p>ID_suspiciousCompoundAssignment&emsp;&emsp;&emsp;&emsp;&nbsp;:question: expression suspicious</p><hr/><p>如下形式的复合赋值表达式（设 a 和 x 为变量或表达式）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a += a + x;</span><br><span class="line">a *= a * x;</span><br><span class="line">a %= a % x;</span><br><span class="line">a &lt;&lt;= a &lt;&lt; x;</span><br><span class="line">a &gt;&gt;= a &gt;&gt; x;</span><br></pre></td></tr></table></figure><p>均为常见笔误，但在特定需求下也有其逻辑意义，故对这种表达式应给出可疑提醒。即使这类表达式没有逻辑错误，也应该换成普通赋值表达式以便提高可读性。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a += a + x;   <span class="comment">// Rather suspicious</span></span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a + x;</span><br><span class="line">a = <span class="number">2</span> * a + x;</span><br><span class="line">a = a + (a + x);</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-278"><a href="#参考-278" class="headerlink" title="参考"></a>参考</h4><p>CWE-682<br><br/><br><br/></p><h3 id="▌R10-2-9-amp-x3D-、-x3D-、-x3D-、-x2F-x3D-、-x3D-左右子表达式不应相同"><a href="#▌R10-2-9-amp-x3D-、-x3D-、-x3D-、-x2F-x3D-、-x3D-左右子表达式不应相同" class="headerlink" title="▌R10.2.9 &amp;&#x3D;、|&#x3D;、-&#x3D;、&#x2F;&#x3D;、%&#x3D; 左右子表达式不应相同"></a><span id="illselfcompoundassignment">▌R10.2.9 &amp;&#x3D;、|&#x3D;、-&#x3D;、&#x2F;&#x3D;、%&#x3D; 左右子表达式不应相同</span></h3><p>ID_illSelfCompoundAssignment&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>&amp;&#x3D;、|&#x3D; 左右子表达式如果相同则没有任何效果，-&#x3D;、&#x2F;&#x3D;、%&#x3D; 左右子表达式相同则结果总为 1 或 0，这种表达式往往意味着笔误或逻辑错误。  </p><p>示例（设 a 为变量或表达式）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a &amp;= a;  // Non-compliant, no effect</span><br><span class="line">a |= a;  // Non-compliant, no effect</span><br></pre></td></tr></table></figure><p>如果目的是清零或置 1，也不建议使用下列表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a -= a;  // Non-compliant, tedious</span><br><span class="line">a /= a;  // Non-compliant, low efficiency</span><br><span class="line">a %= a;  // Non-compliant, low efficiency</span><br></pre></td></tr></table></figure><p>对于高级语言来说，应该直接将变量赋值为 0 或 1，而不是采用更繁琐甚至低效的方式。<br><br/><br><br/></p><h4 id="参考-279"><a href="#参考-279" class="headerlink" title="参考"></a>参考</h4><p>CWE-682<br><br/><br><br/></p><h3 id="▌R10-2-10-不应将-NULL-当作整数使用"><a href="#▌R10-2-10-不应将-NULL-当作整数使用" class="headerlink" title="▌R10.2.10 不应将 NULL 当作整数使用"></a><span id="oddnullassignment">▌R10.2.10 不应将 NULL 当作整数使用</span></h3><p>ID_oddNullAssignment&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>标识符 NULL 由实现定义，在 C++ 语言中往往等同于常量 0，但 NULL 只应该用来表示空指针，否则不利于阅读和维护。  </p><p>被当作整数使用的 NULL 也很可能意味着某种错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> i = <span class="literal">NULL</span>;        <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> c = <span class="literal">NULL</span>;       <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">bool</span> x = <span class="literal">NULL</span>)</span></span>;   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> i = <span class="number">0</span>;           <span class="comment">// Compliant</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> c = <span class="string">&#x27;\0&#x27;</span>;       <span class="comment">// Compliant</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">bool</span> x = <span class="literal">false</span>)</span></span>;  <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-140"><a href="#依据-140" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 C.2.2.3(1)-implementation<br>ISO&#x2F;IEC 14882:2011 C.3.2.4(1)-implementation<br>ISO&#x2F;IEC 14882:2017 C.5.2.7(1)-implementation<br><br/></p><h4 id="参考-280"><a href="#参考-280" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 4-10-1<br><br/><br><br/></p><h3 id="▌R10-2-11-注意赋值运算符与一元运算符的空格方式"><a href="#▌R10-2-11-注意赋值运算符与一元运算符的空格方式" class="headerlink" title="▌R10.2.11 注意赋值运算符与一元运算符的空格方式"></a><span id="stickyassignmentoperator">▌R10.2.11 注意赋值运算符与一元运算符的空格方式</span></h3><p>ID_stickyAssignmentOperator&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>如果 &#x3D; 与 +、-、*、!、&amp;、~ 等一元运算符之间没有空格，而一元运算符与其子表达式之间有空格，是一种非常怪异的格式，也可能是 +&#x3D;、-&#x3D;、*&#x3D;、&amp;&#x3D; 等复合赋值运算符的笔误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a =+ b;    <span class="comment">// Non-compliant</span></span><br><span class="line">a =- b;    <span class="comment">// Non-compliant</span></span><br><span class="line">a =~ b;    <span class="comment">// Non-compliant</span></span><br><span class="line">a =! b;    <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line">a += b;    <span class="comment">// Compliant</span></span><br><span class="line">a = -b;    <span class="comment">// Compliant</span></span><br><span class="line">a = ~b;    <span class="comment">// Compliant</span></span><br><span class="line">a = !b;    <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-281"><a href="#参考-281" class="headerlink" title="参考"></a>参考</h4><p>CWE-480<br><br/><br><br/></p><h3 id="▌R10-2-12-赋值运算符左右子表达式不应相同"><a href="#▌R10-2-12-赋值运算符左右子表达式不应相同" class="headerlink" title="▌R10.2.12 赋值运算符左右子表达式不应相同"></a><span id="selfassignment">▌R10.2.12 赋值运算符左右子表达式不应相同</span></h3><p>ID_selfAssignment&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>赋值运算符左右子表达式相同是没有逻辑意义的，往往是笔误或残留代码。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = a;       <span class="comment">// Non-compliant</span></span><br><span class="line">a = b = a;   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>也可能是对语言特性不了解所致，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    int a;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    A(int a) &#123;</span><br><span class="line">        a = a;   // Non-compliant, ‘a’ is not the member</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中构造函数对成员 a 的赋值是无效的，应改为 this-&gt;a &#x3D; a;  </p><p>有时这种代码被用来消除编译警告，编译器可能会报出没有被用到的参数，将参数赋值给自身可去除警告，但这并不是一种好方法，引入了没有实际意义的代码，改进方法可参见 ID_paramNotUsed。  </p><p>有时为了设置调试断点，但又找不到合适的位置，可以增加这种代码作为断点，但这种非正式的代码是不应被保留的。<br><br/><br><br/></p><h4 id="参考-282"><a href="#参考-282" class="headerlink" title="参考"></a>参考</h4><p>CWE-682<br><br/><br><br/></p><h3 id="▌R10-2-13-除法和求余运算符左右子表达式不应相同"><a href="#▌R10-2-13-除法和求余运算符左右子表达式不应相同" class="headerlink" title="▌R10.2.13 除法和求余运算符左右子表达式不应相同"></a><span id="selfdivision">▌R10.2.13 除法和求余运算符左右子表达式不应相同</span></h3><p>ID_selfDivision&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>除法或求余运算符左右子表达式相同，结果总为 1 或 0 以及产生除零异常，往往是某种笔误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p[<span class="number">0</span>] % p[<span class="number">0</span>];  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-283"><a href="#参考-283" class="headerlink" title="参考"></a>参考</h4><p>CWE-682<br><br/><br><br/></p><h3 id="▌R10-2-14-减法运算符左右子表达式不应相同"><a href="#▌R10-2-14-减法运算符左右子表达式不应相同" class="headerlink" title="▌R10.2.14 减法运算符左右子表达式不应相同"></a><span id="selfsubtraction">▌R10.2.14 减法运算符左右子表达式不应相同</span></h3><p>ID_selfSubtraction&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>与自身做减法，结果总为 0，往往是某种笔误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p0, *p1;</span><br><span class="line">....</span><br><span class="line"><span class="type">ptrdiff_t</span> d = p0 - p0;  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中减法表达式是没有意义的，很可能是 p1 被误写成了 p0。<br><br/><br><br/></p><h4 id="参考-284"><a href="#参考-284" class="headerlink" title="参考"></a>参考</h4><p>CWE-682<br><br/><br><br/></p><h3 id="▌R10-2-15-异或运算符左右子表达式不应相同"><a href="#▌R10-2-15-异或运算符左右子表达式不应相同" class="headerlink" title="▌R10.2.15 异或运算符左右子表达式不应相同"></a><span id="selfexclusiveor">▌R10.2.15 异或运算符左右子表达式不应相同</span></h3><p>ID_selfExclusiveOr&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>与自身异或，结果总为 0，而且也可能意味着某种错误。  </p><p>对变量的清零，有一种惯用写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a ^= a;      // Non-compliant</span><br><span class="line">a = a ^ a;   // Non-compliant</span><br></pre></td></tr></table></figure><p>这种复杂的写法在 C&#x2F;C++ 等高级语言中已不再提倡，应将变量直接赋值为 0，编译器会作更好的优化。<br><br/><br><br/></p><h4 id="参考-285"><a href="#参考-285" class="headerlink" title="参考"></a>参考</h4><p>CWE-682<br><br/><br><br/></p><h3 id="▌R10-2-16-负号不应作用于无符号整数"><a href="#▌R10-2-16-负号不应作用于无符号整数" class="headerlink" title="▌R10.2.16 负号不应作用于无符号整数"></a><span id="minusonunsigned">▌R10.2.16 负号不应作用于无符号整数</span></h3><p>ID_minusOnUnsigned&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>负号作用于无符号整数，结果仍是无符号整数，令人费解易产生意料之外的错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> b = -a;    <span class="comment">// Non-compliant, ‘b’ is 4294967295, confusing</span></span><br></pre></td></tr></table></figure><p>例外：  </p><ul><li>unsigned char、unsigned short 等可以“<a href="https://en.wikipedia.org/wiki/Type_conversion#Type_promotion">类型提升</a>”为 int 的无符号类型可不受本规则约束  </li><li>-1U、-1UL、-1ULL 作为 UINT_MAX、ULONG_MAX、ULLONG_MAX 的惯用简写形式可不受本规则约束<br/><br/></li></ul><h4 id="依据-141"><a href="#依据-141" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.5.3.3(3)<br>ISO&#x2F;IEC 9899:2011 6.5.3.3(3)<br><br/></p><h4 id="参考-286"><a href="#参考-286" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 12.9<br>MISRA C 2012 10.1<br>MISRA C++ 2008 5-3-2<br><br/><br><br/></p><h3 id="▌R10-2-17-不应重复使用一元运算符"><a href="#▌R10-2-17-不应重复使用一元运算符" class="headerlink" title="▌R10.2.17 不应重复使用一元运算符"></a><span id="repeatedunaryoperators">▌R10.2.17 不应重复使用一元运算符</span></h3><p>ID_repeatedUnaryOperators&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>重复的一元运算符没有意义，为常见笔误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = ~~a;    <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="type">int</span> c = -+a;    <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="type">int</span> d = - -a;   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool e = !!a;   // Let it go</span><br></pre></td></tr></table></figure><p>两个连续的 ! 是 bool 转换的惯用方法，可不受本规则约束。<br><br/><br><br/><br><br/></p><h3 id="▌R10-2-18-运算结果不应溢出"><a href="#▌R10-2-18-运算结果不应溢出" class="headerlink" title="▌R10.2.18 运算结果不应溢出"></a><span id="evaloverflow">▌R10.2.18 运算结果不应溢出</span></h3><p>ID_evalOverflow&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>运算结果超出对应类型的存储范围往往意味着错误。  </p><p>这种情况对于有符号整数，会导致标准未定义的行为，而对于无符号整数，则只保留有效范围内的值，相当于一种模运算，标准认为这是一种语言特性，规定无符号整数不存在溢出，然而实践表明，运算结果超出无符号整数的范围很容易引起意料之外的问题，所以不论是否有符号，均应规避这种问题。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> a = <span class="number">0xffffffff</span>U + <span class="number">1</span>;  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中 0xffffffffU 是 32 位无符号整数的最大值，根据 C&#x2F;C++ 语言的计算规则，0xffffffffU + 1 仍是 32 位无符号整数，不会自动转为 64 位整数，所以 a 的值是 0，而不会是 0x100000000。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> a = <span class="number">0xffffffff</span>ULL + <span class="number">1</span>;  <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int32_t a = foo();</span><br><span class="line">int32_t b = bar();</span><br><span class="line">int64_t c = a * b;  // Rather suspicious</span><br></pre></td></tr></table></figure><p>例中 a 和 b 是 32 位整数，a*b 仍为 32 位整数，如果 a*b 的预期结果超过了 32 位就会造成溢出，这也是很常见的错误。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int64_t</span> c = <span class="built_in">static_cast</span>&lt;<span class="type">int64_t</span>&gt;(a) * b;  <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-142"><a href="#依据-142" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.2.5(9)<br>ISO&#x2F;IEC 9899:1999 6.5(5)-undefined<br>ISO&#x2F;IEC 9899:2011 6.2.5(9)<br>ISO&#x2F;IEC 9899:2011 6.5(5)-undefined<br>ISO&#x2F;IEC 14882:2003 5(5)-undefined<br>ISO&#x2F;IEC 14882:2011 5(4)-undefined<br><br/></p><h4 id="参考-287"><a href="#参考-287" class="headerlink" title="参考"></a>参考</h4><p>CWE-190<br>C++ Core Guidelines ES.103<br>C++ Core Guidelines ES.104<br><br/><br><br/></p><h3 id="▌R10-2-19-位运算符不应作用于有符号整数"><a href="#▌R10-2-19-位运算符不应作用于有符号整数" class="headerlink" title="▌R10.2.19 位运算符不应作用于有符号整数"></a><span id="bitwiseoperonsigned">▌R10.2.19 位运算符不应作用于有符号整数</span></h3><p>ID_bitwiseOperOnSigned&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>符号位在位运算方面没有逻辑意义，对负数进行位运算往往意味着逻辑错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">signed</span> s, <span class="type">unsigned</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s &amp; u;                 <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bar</span><span class="params">(<span class="type">signed</span> s, <span class="type">unsigned</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> a = s &lt;&lt; u;           <span class="comment">// Non-compliant, undefined in C and C++11</span></span><br><span class="line">        <span class="type">int</span> b = s &gt;&gt; u;           <span class="comment">// Non-compliant, implementation-defined</span></span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 s 为有符号整数，其符号位对位运算没有意义，对负数左移会导致标准未定义的行为，对负数右移则由实现定义。<br><br/><br><br/></p><h4 id="依据-143"><a href="#依据-143" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.5.7(3)-undefined<br>ISO&#x2F;IEC 9899:2011 6.5.7(3)-undefined<br>ISO&#x2F;IEC 14882:2003 5.8(2)<br>ISO&#x2F;IEC 14882:2003 5.8(3)-implementation<br>ISO&#x2F;IEC 14882:2011 5.8(2)-undefined<br>ISO&#x2F;IEC 14882:2011 5.8(3)-implementation<br><br/></p><h4 id="参考-288"><a href="#参考-288" class="headerlink" title="参考"></a>参考</h4><p>CWE-682<br>C++ Core Guidelines ES.101<br>MISRA C 2004 12.7<br>MISRA C 2012 10.1<br>MISRA C++ 2008 5-0-21<br><br/><br><br/></p><h3 id="▌R10-2-20-移位数量不可超过相关类型提升后比特位的数量"><a href="#▌R10-2-20-移位数量不可超过相关类型提升后比特位的数量" class="headerlink" title="▌R10.2.20 移位数量不可超过相关类型提升后比特位的数量"></a><span id="illshiftcount">▌R10.2.20 移位数量不可超过相关类型提升后比特位的数量</span></h3><p>ID_illShiftCount&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: expression error</p><hr/><p>如果移位数量为负数、大于或等于相关类型提升后比特位的数量，会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">foo</span><span class="params">(<span class="type">uint32_t</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> u &lt;&lt; <span class="number">32</span>;          <span class="comment">// Non-compliant, undefined behavior</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中变量 u 为 32 位整型，将其左移 32 位并不能得到 64 位整数，应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">foo</span><span class="params">(<span class="type">uint32_t</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">uint64_t</span>&gt;(u) &lt;&lt; <span class="number">32</span>;   <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-144"><a href="#依据-144" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.5.7(3)-undefined<br>ISO&#x2F;IEC 9899:2011 6.5.7(3)-undefined<br>ISO&#x2F;IEC 14882:2003 5.8(1)-undefined<br>ISO&#x2F;IEC 14882:2011 5.8(1)-undefined<br>ISO&#x2F;IEC 14882:2017 8.8(1)-undefined<br><br/></p><h4 id="参考-289"><a href="#参考-289" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 5-8-1<br><br/><br><br/></p><h3 id="▌R10-2-21-逗号表达式的子表达式应具有必要的副作用"><a href="#▌R10-2-21-逗号表达式的子表达式应具有必要的副作用" class="headerlink" title="▌R10.2.21 逗号表达式的子表达式应具有必要的副作用"></a><span id="invalidcommasubexpression">▌R10.2.21 逗号表达式的子表达式应具有必要的副作用</span></h3><p>ID_invalidCommaSubExpression&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>缺少必要副作用的逗号子表达式没有意义，往往意味着逻辑错误。  </p><p>设逗号表达式中逗号运算符的子表达式个数为 n（n &gt;&#x3D; 2），如果最后一个子表达式的值可影响程序状态，前 n - 1 个子表达式应具备副作用，否则所有子表达式都应具备副作用。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span>;             <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中逗号表达式有 3 个子表达式，只有第 2 个子表达式有效，第 1 和第 3 个没有意义。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">    a = <span class="number">0</span>, b = <span class="number">1</span>;            <span class="comment">// Compliant, but bad</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本规则集合不建议使用逗号表达式，将逗号表达式拆分成合理的语句是更好的选择，如：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void foo(int&amp; a, int&amp; b) &#123;</span><br><span class="line">    a = 0;</span><br><span class="line">    b = 1;                   // Compliant, good</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-162"><a href="#相关-162" class="headerlink" title="相关"></a>相关</h4><p>ID_forbidCommaExpression<br><br/><br><br/></p><h3 id="10-3-Comparison"><a href="#10-3-Comparison" class="headerlink" title="10.3 Comparison"></a><span id="expression.comparison">10.3 Comparison</span></h3><h3 id="▌R10-3-1-比较运算应在正确的取值范围内进行"><a href="#▌R10-3-1-比较运算应在正确的取值范围内进行" class="headerlink" title="▌R10.3.1 比较运算应在正确的取值范围内进行"></a><span id="illcomparison">▌R10.3.1 比较运算应在正确的取值范围内进行</span></h3><p>ID_illComparison&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: expression error</p><hr/><p>应在正确的取值范围内进行比较，否则会造成恒为真或恒为假的无效结果。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(string&amp; txt, string&amp; sub)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> n = txt.<span class="built_in">find</span>(sub);</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">0</span>) &#123;               <span class="comment">// Non-compliant, always true</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无符号变量不可能小于 0，也一定大于等于 0，例中 n &gt;&#x3D; 0 恒为真，是没有意义的条件。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef unsigned short X;</span><br><span class="line">void fun(X x) &#123;</span><br><span class="line">    if (x == -1) &#123;   // Non-compliant, always false</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 x 为无符号短整型变量，其取值范围为 [0, 65535]，x &#x3D;&#x3D; -1 恒为假。由于“<a href="https://en.wikipedia.org/wiki/Type_conversion#Type_promotion">类型提升</a>”，x 会被转为 int 型再与 -1 比较，x 恒为正数，-1 为负数，故不可能相等。  </p><p>对于有符号字符型变量，与其比较的数值不在 [-128, 127] 范围内时，也是无效的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CodePage encodingDetect(const char* src) &#123;</span><br><span class="line">    char b0 = src[0];</span><br><span class="line">    char b1 = src[1];</span><br><span class="line">    char b2 = src[2];</span><br><span class="line">    if (b0 == 0xef &amp;&amp; b1 == 0xbb &amp;&amp; b2 == 0xbf) &#123;   // Non-compliant, always false</span><br><span class="line">        return cpUtf8;</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使例中 b0 的二进制绝对值确实为 0xef，但由于“<a href="https://en.wikipedia.org/wiki/Type_conversion#Type_promotion">类型提升</a>”，b0 转为 int 型后为负数，0xef 为正数，比较的结果恒为假。char 型变量是否有符号由实现定义，可参见 ID_plainNumericChar 的进一步说明，将 b0 等变量设为 unsigned char 可解决这个问题。<br><br/><br><br/></p><h4 id="相关-163"><a href="#相关-163" class="headerlink" title="相关"></a>相关</h4><p>ID_switch_caseOutOfRange<br><br/></p><h4 id="参考-290"><a href="#参考-290" class="headerlink" title="参考"></a>参考</h4><p>CWE-697<br>CWE-1024<br>CWE-1025<br><br/><br><br/></p><h3 id="▌R10-3-2-不应使用-x3D-x3D-或-x3D-判断浮点数是否相等"><a href="#▌R10-3-2-不应使用-x3D-x3D-或-x3D-判断浮点数是否相等" class="headerlink" title="▌R10.3.2 不应使用 &#x3D;&#x3D; 或 !&#x3D; 判断浮点数是否相等"></a><span id="illfloatcomparison">▌R10.3.2 不应使用 &#x3D;&#x3D; 或 !&#x3D; 判断浮点数是否相等</span></h3><p>ID_illFloatComparison&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>一般来说，除了可以记作 a * 2<sup>n</sup>（a、n 为整数）的浮点数值可以被精确存储之外，其他均为近似值。用 &#x3D;&#x3D; 或 !&#x3D; 判断浮点数（float、double、long double）是否相等往往得不到预期的结果。  </p><p>如 0、1、2、3、1.5、1.25、… 可以被精确存储，而除此之外绝大部分数值如 0.1、0.2、0.3、… 只能存储其近似值。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> f = <span class="number">1</span>;</span><br><span class="line">f /= <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (f == <span class="number">0.1</span>) &#123;     <span class="comment">// Non-compliant, do not use ‘==’ or ‘!=’</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Oops&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 Oops，这是因为 f &#x3D;&#x3D; 0.1 在运算时将变量和常量转为 double 型，而转换过程中生成了两个不同的对 0.1 的近似值（如 0.10000000149011611938 和 0.10000000000000000555），其结果自然为 false。<br>这非常容易造成意料之外的混乱，所以判断浮点数是否相等不应直接使用 &#x3D;&#x3D; 或 !&#x3D; 运算符，即使浮点数可以被精确存储。  </p><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bool feq(float a, float b, float e = 0.0001f) &#123;</span><br><span class="line">    return fabs(a - b) &lt; e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用 feq 函数判断浮点数是否相等，如果两个浮点数的差值非常小则可以认为相等，其中 fabs 为计算浮点数差值绝对值的函数，如果差值绝对值小于 e 则认为相等，否则不等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (feq(f, 0.1)) &#123;   // Compliant</span><br><span class="line">    cout &lt;&lt; &quot;OK&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-291"><a href="#参考-291" class="headerlink" title="参考"></a>参考</h4><p>CWE-1025<br>MISRA C 2004 13.3<br>MISRA C++ 2008 6-2-2<br><br/><br><br/></p><h3 id="▌R10-3-3-指针不应与字符串常量直接比较"><a href="#▌R10-3-3-指针不应与字符串常量直接比较" class="headerlink" title="▌R10.3.3 指针不应与字符串常量直接比较"></a><span id="illptrstrcomparison">▌R10.3.3 指针不应与字符串常量直接比较</span></h3><p>ID_illPtrStrComparison&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: expression error</p><hr/><p>直接比较指针和字符串常量的结果往往总是 false，应改用字符串比较函数。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_name</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p == <span class="string">&quot;bar&quot;</span>;          <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果例中 is_name 函数只接受常量字符串作为参数，该函数在某些环境中也可能正常工作，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (is_name(&quot;foo&quot;)) &#123;   // May be false</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">if (is_name(&quot;bar&quot;)) &#123;   // May be true</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而相同的字符串常量是否一定拥有相同的地址呢？对这个问题不同的编译器有不同的实现，有可移植性要求的代码要规避这种问题，而且这种问题极易导致错误，一般的程序都应该避免这种问题。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_name</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">strcmp</span>(p, <span class="string">&quot;bar&quot;</span>);   <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-145"><a href="#依据-145" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.4.5(6)-unspecified<br>ISO&#x2F;IEC 9899:2011 6.4.5(7)-unspecified<br>ISO&#x2F;IEC 14882:2003 2.13.4(2)-implementation<br>ISO&#x2F;IEC 14882:2011 2.14.5(12)-implementation<br>ISO&#x2F;IEC 14882:2017 5.13.5(16)-unspecified<br><br/></p><h4 id="参考-292"><a href="#参考-292" class="headerlink" title="参考"></a>参考</h4><p>CWE-595<br>CWE-697<br>CWE-1024<br>CWE-1025<br><br/><br><br/></p><h3 id="▌R10-3-4-不应比较非同类枚举值"><a href="#▌R10-3-4-不应比较非同类枚举值" class="headerlink" title="▌R10.3.4 不应比较非同类枚举值"></a><span id="differentenumcomparison">▌R10.3.4 不应比较非同类枚举值</span></h3><p>ID_differentEnumComparison&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>比较非同类枚举值相当于比较不同类别的事物，没有逻辑意义，往往是设计缺陷或逻辑错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Fruit</span> &#123; apple, orange, banana &#125;;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Pet</span> &#123; hamster, chipmunk, chinchilla &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(Fruit f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f == hamster) &#123;  <span class="comment">// Non-compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(Pet p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (p) &#123;</span><br><span class="line">    <span class="keyword">case</span> apple:     <span class="comment">// Non-compliant</span></span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> chipmunk:  <span class="comment">// Compliant</span></span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><br/><h3 id="▌R10-3-5-比较运算符左右子表达式不应相同"><a href="#▌R10-3-5-比较运算符左右子表达式不应相同" class="headerlink" title="▌R10.3.5 比较运算符左右子表达式不应相同"></a><span id="selfcomparison">▌R10.3.5 比较运算符左右子表达式不应相同</span></h3><p>ID_selfComparison&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>与自身的比较是没意义的，往往是某种笔误。  </p><p>示例（设 a 为变量或表达式）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a == a   // Non-compliant</span><br><span class="line">a != a   // Non-compliant</span><br><span class="line">a &gt; a    // Non-compliant</span><br><span class="line">a &gt;= a   // Non-compliant</span><br><span class="line">a &lt; a    // Non-compliant</span><br><span class="line">a &lt;= a   // Non-compliant</span><br></pre></td></tr></table></figure><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void foo(float a) &#123;</span><br><span class="line">    if (a != a) &#123;     // Let it go</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 a !&#x3D; a 为真时表示 a 为无效值“<a href="https://en.wikipedia.org/wiki/NaN">NaN</a>”，这是判断浮点数是否有效的惯用方法，可不受本规则约束。<br><br/><br><br/></p><h4 id="参考-293"><a href="#参考-293" class="headerlink" title="参考"></a>参考</h4><p>CWE-1025<br><br/><br><br/></p><h3 id="▌R10-3-6-比较运算不可作为另一个比较运算的直接子表达式"><a href="#▌R10-3-6-比较运算不可作为另一个比较运算的直接子表达式" class="headerlink" title="▌R10.3.6 比较运算不可作为另一个比较运算的直接子表达式"></a><span id="successivecomparison">▌R10.3.6 比较运算不可作为另一个比较运算的直接子表达式</span></h3><p>ID_successiveComparison&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: expression error</p><hr/><p>在 C&#x2F;C++ 语言中，连续的比较运算是没有意义的，本规则是 ID_illBoolOperation 的特化。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt;= b &gt;= c;           <span class="comment">// Non-compliant, logic error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 a &gt;&#x3D; b 的结果为 bool 型，bool 型数据是没有大小概念的，这个结果再与 c 比较大小是没有意义的。  </p><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a &gt; b == true        // Compliant, but odd</span><br><span class="line">a != b != true       // Compliant, but odd</span><br><span class="line">(a &gt; b) == (c &gt; d)   // Compliant, but complex</span><br></pre></td></tr></table></figure><p>如果是判断两个 bool 表达式是否相等，可不受本规则约束，但这种复杂的形式并不值得提倡。<br><br/><br><br/></p><h4 id="相关-164"><a href="#相关-164" class="headerlink" title="相关"></a>相关</h4><p>ID_illBoolOperation<br><br/></p><h4 id="参考-294"><a href="#参考-294" class="headerlink" title="参考"></a>参考</h4><p>CWE-697<br>CWE-1024<br>CWE-1025<br><br/><br><br/></p><h3 id="10-4-Call"><a href="#10-4-Call" class="headerlink" title="10.4 Call"></a><span id="expression.call">10.4 Call</span></h3><h3 id="▌R10-4-1-不应忽略重要的返回值"><a href="#▌R10-4-1-不应忽略重要的返回值" class="headerlink" title="▌R10.4.1 不应忽略重要的返回值"></a><span id="returnvalueignored">▌R10.4.1 不应忽略重要的返回值</span></h3><p>ID_returnValueIgnored&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>与状态判断、信息获取、资源分配有关的返回值不应被忽略。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(string&amp; s)</span> </span>&#123;</span><br><span class="line">    s.<span class="built_in">empty</span>();          <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 empty 函数返回字符串是否为空，如果忽略返回值会使函数调用失去意义。  </p><p>C++17 nodiscard 属性表示返回值具有重要意义，标准库中以及由用户标注的具有 nodiscard 属性的返回值不应被忽略，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[[nodiscard]] int fun();   // Or use __attribute__((warn_unused_result)) in GCC</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    fun();           // Non-compliant</span><br><span class="line">    int r = fun();   // Compliant, ‘r’ should be used in subsequent code   </span><br><span class="line">    ....</span><br><span class="line">    (void)fun();     // Let it go?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经 void 转换的函数调用可以认为是有意放弃返回值，审计工具不妨通过配置决定是否放过这种情况。<br><br/><br><br/></p><h4 id="配置-29"><a href="#配置-29" class="headerlink" title="配置"></a>配置</h4><p>allowVoidCastedDiscard：是否允许通过 void 转换忽略返回值<br><br/></p><h4 id="依据-146"><a href="#依据-146" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2017 10.6.7<br><br/></p><h4 id="参考-295"><a href="#参考-295" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 17.7<br>MISRA C++ 2008 0-1-7<br><br/><br><br/></p><h3 id="▌R10-4-2-不可臆断返回值的意义"><a href="#▌R10-4-2-不可臆断返回值的意义" class="headerlink" title="▌R10.4.2 不可臆断返回值的意义"></a><span id="wronguseofreturnvalue">▌R10.4.2 不可臆断返回值的意义</span></h3><p>ID_wrongUseOfReturnValue&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: expression error</p><hr/><p>应遵循接口文档使用接口，不可臆断返回值的意义，否则造成逻辑错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">find</span>(<span class="string">&quot;bar&quot;</span>)) &#123;      <span class="comment">// Non-compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 find 函数返回 “bar” 在 s 中的位置，当 s 中不存在 “bar” 时返回 string::npos，将 find 函数的返回值转为 bool 型是没有逻辑意义的。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">find</span>(<span class="string">&quot;bar&quot;</span>) != string::npos) &#123;   <span class="comment">// Compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想当然地认为返回 0 表示失败或不存在，非 0 表示成功或存在，是造成错误的常见原因。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bool gt(const char* a, const char* b) &#123;</span><br><span class="line">    return strcmp(a, b) == 1;             // Non-compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>strcmp 函数的返回值可以是等于、大于或小于 0 的任意整数，分别对应字符串的等于、大于或小于关系，认为其只能返回 0、1 或 -1 是一种常见的误解。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">gt</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* a, <span class="type">const</span> <span class="type">char</span>* b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(a, b) &gt; <span class="number">0</span>;              <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>strcmp、wcscmp 以及 memcmp 等函数不应与 0 之外的任何值比较。  </p><p>下列函数的返回值不应与 0 比较，也不应转为 bool 型：  </p><ul><li>open、create 等 Linux 系统调用，失败时返回负数，成功时返回非负数  </li><li>CreateFile、CreateNamedPipe 等 Windows API，失败时返回 INVALID_HANDLE_VALUE，而不是 0  </li><li>HRESULT 型 Windows API 返回值，负数表示失败、非负数表示成功</li></ul><p>另外，有相当一部分函数成功时返回 0，失败时返回非 0，如 access、chmod、rename 等 Linux 系统调用，不可将其返回值当作 bool 型使用。<br><br/><br><br/></p><h4 id="依据-147"><a href="#依据-147" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.21.4<br>ISO&#x2F;IEC 9899:2011 7.24.4<br><br/></p><h4 id="参考-296"><a href="#参考-296" class="headerlink" title="参考"></a>参考</h4><p>CWE-253<br><br/><br><br/></p><h3 id="▌R10-4-3-避免对象切片"><a href="#▌R10-4-3-避免对象切片" class="headerlink" title="▌R10.4.3 避免对象切片"></a><span id="objectslicing">▌R10.4.3 避免对象切片</span></h3><p>ID_objectSlicing&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>将派生类对象复制为基类对象的行为称为“<a href="https://en.wikipedia.org/wiki/Object_slicing">对象切片（object slicing）</a>”，基类对象不再持有派生类的属性，不再遵循多态机制，意味着某种精度上的损失，往往会造成意料之外的错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123; .... &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span>: A &#123; .... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A)</span></span>;</span><br><span class="line"></span><br><span class="line">A a;</span><br><span class="line">B b;</span><br><span class="line"></span><br><span class="line">a = b;    <span class="comment">// Slicing</span></span><br><span class="line"><span class="built_in">foo</span>(b);   <span class="comment">// Slicing</span></span><br><span class="line"></span><br><span class="line">vector&lt;A&gt; v&#123;b&#125;;   <span class="comment">// Slicing</span></span><br><span class="line">v.<span class="built_in">push_back</span>(b);   <span class="comment">// Slicing</span></span><br></pre></td></tr></table></figure><p>尤其是函数传参或容器收纳对象时发生切片，会引起相当大的困惑，明明传入的是派生类对象，但虚函数都不生效了，所以要求多态性的接口或容器均应使用指针或引用。  </p><p>在少数情况下，对象切片可能也有其逻辑意义，但不建议“隐式切片”，应定义特定名称的函数标明这是一种特殊处理，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A a;</span><br><span class="line">B b;</span><br><span class="line"></span><br><span class="line">a = b;                   // Bad, implicit slicing</span><br><span class="line">a = to_base_object(b);   // OK</span><br></pre></td></tr></table></figure><p>其中 to_base_object 是一个返回基类对象的函数，表示有意为之。<br><br/><br><br/></p><h4 id="相关-165"><a href="#相关-165" class="headerlink" title="相关"></a>相关</h4><p>ID_paramMayBeSlicing<br><br/></p><h4 id="参考-297"><a href="#参考-297" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.63<br>C++ Core Guidelines C.145<br>SEI CERT OOP51-CPP<br><br/><br><br/></p><h3 id="▌R10-4-4-避免显式调用析构函数"><a href="#▌R10-4-4-避免显式调用析构函数" class="headerlink" title="▌R10.4.4 避免显式调用析构函数"></a><span id="explicitdtorcall">▌R10.4.4 避免显式调用析构函数</span></h3><p>ID_explicitDtorCall&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: expression suggestion</p><hr/><p>显式调用析构函数会提前结束对象的生命周期，之后对该对象的任何访问都会导致标准未定义的行为。  </p><p>对于在栈上定义的对象，流程离开相关作用域时会再次自动调用其析构函数；对于动态创建的对象，用 delete 回收时也会调用其析构函数，使对象在生命周期之外被访问，导致标准未定义的行为。   </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span>* p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">123</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    a.~<span class="built_in">A</span>();   <span class="comment">// Non-compliant, explicitly call the destructor</span></span><br><span class="line">&#125;             <span class="comment">// ~A() twice called, crash...</span></span><br></pre></td></tr></table></figure><p>例中对象 a 的析构函数被显式调用，foo 返回前会再次调用析构函数，造成内存被重复释放。应去掉显式调用，由类提供提前释放资源的方法，并保证资源不会被重复释放。  </p><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">char* p = new char[sizeof(Type)];</span><br><span class="line">Type* q = new (p) Type;</span><br><span class="line">....</span><br><span class="line">q-&gt;~Type();   // Compliant, used with replacement new</span><br><span class="line">delete[] p;</span><br></pre></td></tr></table></figure><p>与 replacement new 配合的显式析构是实现容器或内存池的常规手段，可不受本规则约束。<br><br/><br><br/></p><h4 id="相关-166"><a href="#相关-166" class="headerlink" title="相关"></a>相关</h4><p>ID_missingResetNull<br><br/></p><h4 id="依据-148"><a href="#依据-148" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 12.4(14)-undefined<br>ISO&#x2F;IEC 14882:2011 12.4(15)-undefined<br><br/><br><br/></p><h3 id="▌R10-4-5-不应将非-POD-对象传入可变参数列表"><a href="#▌R10-4-5-不应将非-POD-对象传入可变参数列表" class="headerlink" title="▌R10.4.5 不应将非 POD 对象传入可变参数列表"></a><span id="nonpodvariadicargument">▌R10.4.5 不应将非 POD 对象传入可变参数列表</span></h3><p>ID_nonPODVariadicArgument&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: expression error</p><hr/><p>如果将非“<a href="https://en.cppreference.com/w/cpp/named_req/PODType">POD</a>”对象传入可变参数列表，程序的行为在 C++03 中是未定义的，在 C++11 中是部分由实现定义的。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> n, ...)</span> </span>&#123;</span><br><span class="line">    va_list ap;</span><br><span class="line">    ....</span><br><span class="line">    string s = <span class="built_in">va_arg</span>(ap, string);   <span class="comment">// Undefined behavior</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(string&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">foo</span>(<span class="number">1</span>, s);          <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 string 类对象不是 POD 对象，其拷贝构造和析构过程难以与可变参数列表机制兼容，通过 va_arg 难以获取正确的对象。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct A &#123;</span><br><span class="line">    string s;</span><br><span class="line">    operator const char*() const &#123;</span><br><span class="line">        return s.c_str();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void foo(const A&amp; a) &#123;</span><br><span class="line">    printf(&quot;%s\n&quot;, a);   // Non-compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使对象有转为 const char* 的方法，在可变参数列表中也是无效的，printf 无法正确获取字符串地址，造成内存访问错误。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> A&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">static_cast</span>&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(a));   <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-167"><a href="#相关-167" class="headerlink" title="相关"></a>相关</h4><p>ID_badVaArgType<br><br/></p><h4 id="依据-149"><a href="#依据-149" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 5.2.2(7)-undefined<br>ISO&#x2F;IEC 14882:2011 5.2.2(7)-implementation<br><br/></p><h4 id="参考-298"><a href="#参考-298" class="headerlink" title="参考"></a>参考</h4><p>CWE-686<br><br/><br><br/></p><h3 id="▌R10-4-6-C-格式化字符串需要的参数个数与实际传入的参数个数应一致"><a href="#▌R10-4-6-C-格式化字符串需要的参数个数与实际传入的参数个数应一致" class="headerlink" title="▌R10.4.6 C 格式化字符串需要的参数个数与实际传入的参数个数应一致"></a><span id="inconsistentformatargnum">▌R10.4.6 C 格式化字符串需要的参数个数与实际传入的参数个数应一致</span></h3><p>ID_inconsistentFormatArgNum&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: expression error</p><hr/><p>如果 C 格式化占位符的数量大于参数的数量，会导致标准未定义的行为，反之多余的参数会失去意义，往往意味着逻辑错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> type, <span class="type">const</span> <span class="type">char</span>* msg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Error (type %d): %s\n&quot;</span>, type);  <span class="comment">// Non-compliant, undefined behavior</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中格式化字符串需要两个参数，但只传入了一个，往往会引发运行时堆栈错误。  </p><p>由于可变参数列表自身的局限，很难在编译时发现这种问题，有些编译器会检查 printf、sprintf 等标准函数，但无法检查自定义函数，建议在 C++ 代码中禁用可变参数列表和 C 风格的格式化函数。<br><br/><br><br/></p><h4 id="相关-168"><a href="#相关-168" class="headerlink" title="相关"></a>相关</h4><p>ID_inconsistentFormatArgType<br>ID_forbidCStringFormat<br><br/></p><h4 id="依据-150"><a href="#依据-150" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.19.6.1(2)-undefined<br>ISO&#x2F;IEC 9899:2011 7.21.6.1(2)-undefined<br><br/></p><h4 id="参考-299"><a href="#参考-299" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT FIO47-C<br><br/><br><br/></p><h3 id="▌R10-4-7-C-格式化占位符与其对应参数的类型应一致"><a href="#▌R10-4-7-C-格式化占位符与其对应参数的类型应一致" class="headerlink" title="▌R10.4.7 C 格式化占位符与其对应参数的类型应一致"></a><span id="inconsistentformatargtype">▌R10.4.7 C 格式化占位符与其对应参数的类型应一致</span></h3><p>ID_inconsistentFormatArgType&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: expression error</p><hr/><p>C 格式化占位符与其对应参数的类型应一致，否则导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> n;</span><br><span class="line"><span class="type">ptrdiff_t</span> d;</span><br><span class="line">....</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u&quot;</span>, n);    <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, d);    <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lu&quot;</span>, n);   <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, d);  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>size_t、ptrdiff_t 等类型是由实现定义的，标准没有规定其是否一定对应 unsigned、long 或 long long 等类型，而 %u、%d、%lu、%lld 只对应 unsigned、int、unsigned long、long long 等类型，所以示例代码都是不合理的。  </p><p>应使 n 对应 %zu，d 对应 %td： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;%zu&quot;, n);   // Compliant</span><br><span class="line">printf(&quot;%td&quot;, d);   // Compliant</span><br></pre></td></tr></table></figure><p>对于 stdint.h 中定义的类型，应使用 inttypes.h 中定义的占位符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int32_t i;</span><br><span class="line">uint64_t u;</span><br><span class="line">....</span><br><span class="line">printf(&quot;%d&quot;, i);    // Unportable</span><br><span class="line">printf(&quot;%lu&quot;, u);   // Unportable</span><br><span class="line"></span><br><span class="line">printf(&quot;%&quot; PRId32, i);   // OK</span><br><span class="line">printf(&quot;%&quot; PRIu64, u);   // OK</span><br></pre></td></tr></table></figure><p>int32_t、uint64_t 并不一定对应 int、unsigned long，不应将 %d、%lu 等占位符在代码中写死，PRId32 和 PRIu64 是 inttypes.h 中定义的宏，可解决移植性问题。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void foo(const string&amp; msg) &#123;</span><br><span class="line">    printf(&quot;%s\n&quot;, msg);        // Non-compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 %s 要求对应 char* 型指针，但 msg 是 string 型对象，造成栈读取错误，应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> string&amp; msg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, msg.<span class="built_in">c_str</span>());   <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于可变参数列表自身的局限，很难在编译时发现这种问题，有些编译器会检查 printf、sprintf 等标准函数，但无法检查自定义函数，建议在 C++ 代码中禁用可变参数列表和 C 风格的格式化函数。<br><br/><br><br/></p><h4 id="相关-169"><a href="#相关-169" class="headerlink" title="相关"></a>相关</h4><p>ID_nonPODVariadicArgument<br>ID_inconsistentFormatArgNum<br>ID_forbidCStringFormat<br><br/></p><h4 id="依据-151"><a href="#依据-151" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.19.6.1(9)-undefined<br>ISO&#x2F;IEC 9899:2011 7.21.6.1(9)-undefined<br><br/></p><h4 id="参考-300"><a href="#参考-300" class="headerlink" title="参考"></a>参考</h4><p>CWE-686<br>SEI CERT FIO47-C<br><br/><br><br/></p><h3 id="▌R10-4-8-在-C-代码中禁用-C-字符串格式化方法"><a href="#▌R10-4-8-在-C-代码中禁用-C-字符串格式化方法" class="headerlink" title="▌R10.4.8 在 C++ 代码中禁用 C 字符串格式化方法"></a><span id="forbidcstringformat">▌R10.4.8 在 C++ 代码中禁用 C 字符串格式化方法</span></h3><p>ID_forbidCStringFormat&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: expression suggestion</p><hr/><p>C 字符串格式化方法的主要问题有：  </p><ul><li>需要手工维护参数与格式化占位符的对应关系  </li><li>在编译期难以保证安全性，增加测试成本  </li><li>与 C++ 的强类型理念不符，不在 C++ 标准之内  </li><li>只接受基本类型的参数，不利于数据的对象化管理</li></ul><p>故在 C++ 代码中禁用下列函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printf、fprintf、sprintf、snprintf、</span><br><span class="line">wprintf、fwprintf、swprintf、</span><br><span class="line">vprintf、vfprintf、vsprintf、vsnprintf、</span><br><span class="line">vwprintf、vfwprintf、vswprintf</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int32_t</span> mytype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    mytype a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> T* p)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p-&gt;a);   <span class="comment">// Non-compliant, unportable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 C 字符串格式化方法中，不同类型的参数依赖不同的格式化占位符，参数的类型与个数必须和占位符严格对应，否则就会导致未定义的行为，当参数较多时极易出错，单纯地要求开发者小心谨慎是不可靠的，改用更安全的方法才是明智的选择。  </p><p>在 C++ 代码中利用标准流可避免这些问题，而且 C++ 标准流具备可扩展性，符合面向对象的编程理念：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">std::ostream&amp; operator &lt;&lt; (std::ostream&amp; os, const T&amp; t) &#123;</span><br><span class="line">    return os &lt;&lt; t.a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void foo(const T* p) &#123;</span><br><span class="line">    std::cout &lt;&lt; *p;     // Compliant, safe and brief</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当参数较多时，标准流的方式在形态上可能较为“松散”，在可读性上可能不如 printf 函数，而且重载 &lt;&lt;、&gt;&gt; 运算符的方式也会产生同步问题和额外的性能开销，对此 C++20 的“<a href="https://en.cppreference.com/w/cpp/utility/format/format">std::format</a>”提供了更多的格式化方法。也可参见 ID_forbidVariadicFunction 的示例，用“<a href="https://en.cppreference.com/w/cpp/language/parameter_pack">模板参数包</a>”等更安全的方法实现 printf 函数的功能。<br><br/><br><br/></p><h4 id="相关-170"><a href="#相关-170" class="headerlink" title="相关"></a>相关</h4><p>ID_forbidVariadicFunction<br><br/></p><h4 id="依据-152"><a href="#依据-152" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.19.6.1(2)-undefined<br>ISO&#x2F;IEC 9899:1999 7.19.6.1(9)-undefined<br>ISO&#x2F;IEC 9899:2011 7.21.6.1(2)-undefined<br>ISO&#x2F;IEC 9899:2011 7.21.6.1(9)-undefined<br><br/></p><h4 id="参考-301"><a href="#参考-301" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines SL.io.3<br><br/><br><br/></p><h3 id="▌R10-4-9-禁用-atof、atoi、atol-以及-atoll-等函数"><a href="#▌R10-4-9-禁用-atof、atoi、atol-以及-atoll-等函数" class="headerlink" title="▌R10.4.9 禁用 atof、atoi、atol 以及 atoll 等函数"></a><span id="forbidatox">▌R10.4.9 禁用 atof、atoi、atol 以及 atoll 等函数</span></h3><p>ID_forbidAtox&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: expression warning</p><hr/><p>当字符串无法被正确转为数值时，stdlib.h 或 cstdlib 中的 atof、atoi、atol 以及 atoll 等函数会导致标准未定义的行为。  </p><p>对于 C 语言应改用 strtof、strtol 等函数，对于 C++ 语言应改用标准流转换的方式。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="built_in">atoi</span>(<span class="string">&quot;abcdefg&quot;</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;        <span class="comment">// Non-compliant</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">atoi</span>(<span class="string">&quot;100000000000&quot;</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中字符串“abcdefg”不表示数字，字符串“100000000000”超出了正常 int 型变量的范围，这些情况会导致标准未定义的行为。  </p><p>更严重的问题是无法通过这种函数判断转换是否成功，这种不确定性也意味着代码在实现上存在缺陷。  </p><p>C++ 标准流转换示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> v = <span class="number">0</span>;</span><br><span class="line">    <span class="function">stringstream <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line">    ss &gt;&gt; v;</span><br><span class="line">    <span class="keyword">if</span> (ss.<span class="built_in">fail</span>()) &#123;              <span class="comment">// Or use ‘!ss.eof() || ss.fail()’</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">some_exception</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本例通过 ss.fail() 判断字符串前面的字符是否可以转为 int 型变量，也可通过 !ss.eof() || ss.fail() 判断字符串整体是否可以转为 int 型变量。<br><br/><br><br/></p><h4 id="依据-153"><a href="#依据-153" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.20.1(1)-undefined<br>ISO&#x2F;IEC 9899:2011 7.22.1(1)-undefined<br><br/></p><h4 id="参考-302"><a href="#参考-302" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 20.10<br>MISRA C 2012 21.7<br>MISRA C++ 2008 18-0-2<br><br/><br><br/></p><h3 id="▌R10-4-10-避免使用由实现定义的库函数"><a href="#▌R10-4-10-避免使用由实现定义的库函数" class="headerlink" title="▌R10.4.10 避免使用由实现定义的库函数"></a><span id="implementationdefinedfunction">▌R10.4.10 避免使用由实现定义的库函数</span></h3><p>ID_implementationDefinedFunction&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>由实现定义的（implementation-defined）库函数会增加移植或兼容等方面的成本。  </p><p>如：  </p><ul><li>cstdlib、stdlib.h 中的 abort、exit、getenv 或 system 等函数  </li><li>ctime、time.h 中的 clock 等函数  </li><li>csignal、signal.h 中的 signal 等函数</li></ul><p>这些函数的行为取决于编译器、库或环境的生产厂家，同一个函数不同的厂家会有不同的实现，故称这种函数的行为是“由实现定义”的。有高可靠性要求的软件系统应避免使用这种函数，否则需明确各种实现上的具体差异，增加了移植、发布以及兼容性等多方面的成本。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">abort</span>();   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标准规定调用 abort 后进程应被终止，但进程打开的流是否会被关闭，创建的临时文件是否会被清理等问题没明确定义。<br><br/><br><br/></p><h4 id="依据-154"><a href="#依据-154" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:2011 7.14.1.1(3)-implementation<br>ISO&#x2F;IEC 9899:2011 7.22.4.1(2)-implementation<br>ISO&#x2F;IEC 9899:2011 7.22.4.4(5)-implementation<br>ISO&#x2F;IEC 9899:2011 7.22.4.6(2)-implementation<br>ISO&#x2F;IEC 9899:2011 7.22.4.8(3)-implementation<br>ISO&#x2F;IEC 9899:2011 7.27.2.1(3)-implementation<br><br/></p><h4 id="参考-303"><a href="#参考-303" class="headerlink" title="参考"></a>参考</h4><p>CWE-474<br>CWE-589<br>MISRA C 2004 20.8<br>MISRA C 2004 20.11<br>MISRA C 2004 20.12<br>MISRA C 2012 21.5<br>MISRA C 2012 21.8<br>MISRA C 2012 21.10<br>MISRA C++ 2008 18-0-3<br>MISRA C++ 2008 18-0-4<br>MISRA C++ 2008 18-7-1<br><br/><br><br/></p><h3 id="▌R10-4-11-合理使用-std-move"><a href="#▌R10-4-11-合理使用-std-move" class="headerlink" title="▌R10.4.11 合理使用 std::move"></a><span id="unsuitablemove">▌R10.4.11 合理使用 std::move</span></h3><p>ID_unsuitableMove&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>std::move 的参数应为左值，返回值应直接作为接口的参数，除此之外的使用方式价值有限，且易产生错误。  </p><p>std::move 将左值转为右值，意在宣告对象的数据将被转移到其他对象，应由合适的接口完成数据转移。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">string s = <span class="built_in">move</span>(<span class="built_in">foo</span>());  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中 foo 函数返回的是右值，如果再调用 std::move 是多余的，应将 std::move 去掉。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string a(&quot;....&quot;);</span><br><span class="line">string&amp;&amp; b = move(a);  // Non-compliant</span><br><span class="line">string c(b);           // Not move construction</span><br></pre></td></tr></table></figure><p>例中 b 是具有名称的右值引用，其实是左值，c 仍是拷贝构造。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">a</span><span class="params">(<span class="string">&quot;....&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">c</span><span class="params">(move(a))</span></span>;  <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><p>这样构造 c 时会自动选取移动构造函数，避免了复制。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string foo() &#123;</span><br><span class="line">    string s(&quot;....&quot;);</span><br><span class="line">    ....</span><br><span class="line">    return move(s);  // Non-compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 foo 函数返回对象，编译器会进行“<a href="https://en.wikipedia.org/wiki/Copy_elision#Return_value_optimization">RVO（Return Value Optimization）</a>”优化，显式调用 move 是多余的，而且会干扰优化，不应出现 return std::move(….) 这种代码。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;....&quot;</span>)</span></span>;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span> s;  <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-155"><a href="#依据-155" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2011 20.2.3(6)<br>ISO&#x2F;IEC 14882:2017 23.2.5(5)<br><br/></p><h4 id="参考-304"><a href="#参考-304" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.56<br>C++ Core Guidelines F.18<br>C++ Core Guidelines F.48<br><br/><br><br/></p><h3 id="▌R10-4-12-合理使用-std-forward"><a href="#▌R10-4-12-合理使用-std-forward" class="headerlink" title="▌R10.4.12 合理使用 std::forward"></a><span id="unsuitableforward">▌R10.4.12 合理使用 std::forward</span></h3><p>ID_unsuitableForward&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>std::forward 的参数应为“<a href="https://en.cppreference.com/w/cpp/language/reference#Forwarding_references">转发引用（forwarding references）</a>”，返回值应直接作为接口的参数，除此之外的使用方式价值有限，且易产生错误。  </p><p>转发引用是类型为 T&amp;&amp; 的参数，T 为函数模板类型，无论左值还是右值均可被这种参数接受，而且 const、volatile 等属性也会被忽略，这种参数应通过 std::forward<T> 交由合适的接口处理。  </p><p>关于转发引用，可参见 ID_illForwardingReference 的进一步说明。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123; .... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A&amp;)</span></span>;        <span class="comment">// #1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> A&amp;)</span></span>;  <span class="comment">// #2</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A&amp;&amp;)</span></span>;       <span class="comment">// #3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(T&amp;&amp; x)</span> </span>&#123;        <span class="comment">// Forwarding reference</span></span><br><span class="line">    <span class="built_in">foo</span>(forward&lt;T&gt;(x));  <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">baz</span><span class="params">(<span class="type">const</span> A&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="function">A <span class="title">b</span><span class="params">(a)</span></span>;</span><br><span class="line">    <span class="built_in">bar</span>(b);    <span class="comment">// Calls #1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">bar</span>(a);    <span class="comment">// Calls #2</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">bar</span>(<span class="built_in">A</span>());  <span class="comment">// Calls #3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 bar 接口的参数为转发引用，在 baz 函数中，bar 接口将左值、常量引用和临时对象分别转发给对应的 foo 接口，这种模式称为“完美转发”，std::forward 应在这种模式内使用。  </p><p>下面给出几种错误示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(A&amp;&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">foo</span>(forward&lt;A&gt;(x));  <span class="comment">// Non-compliant, ‘x’ is not a forwarding reference</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">X</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(T&amp;&amp; x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">foo</span>(forward&lt;T&gt;(x));  <span class="comment">// Non-compliant, ‘x’ is not a forwarding reference</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意，转发引用的类型只能是函数模板类型，非模板和类模板不构成转发引用。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">void bar(T&amp;&amp; x) &#123;</span><br><span class="line">    T y = forward&lt;T&gt;(x);  // Non-compliant, ‘y’ is always an lvalue</span><br><span class="line">    foo(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">void bar(T&amp;&amp; x) &#123;</span><br><span class="line">    foo(forward&lt;T&amp;&gt;(x));  // Non-compliant, use ‘forward&lt;T&gt;(x)’</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>forward 的返回值应直接作为接口的参数，且只应使用 forward<T>。<br><br/><br><br/></p><h4 id="相关-171"><a href="#相关-171" class="headerlink" title="相关"></a>相关</h4><p>ID_illForwardingReference<br><br/></p><h4 id="依据-156"><a href="#依据-156" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2011 20.2.3(1)<br>ISO&#x2F;IEC 14882:2017 23.2.5(1)<br><br/></p><h4 id="参考-305"><a href="#参考-305" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines F.19<br><br/><br><br/></p><h3 id="10-5-Sizeof"><a href="#10-5-Sizeof" class="headerlink" title="10.5 Sizeof"></a><span id="expression.sizeof">10.5 Sizeof</span></h3><h3 id="▌R10-5-1-sizeof-不应作用于数组参数"><a href="#▌R10-5-1-sizeof-不应作用于数组参数" class="headerlink" title="▌R10.5.1 sizeof 不应作用于数组参数"></a><span id="sizeof_arrayparameter">▌R10.5.1 sizeof 不应作用于数组参数</span></h3><p>ID_sizeof_arrayParameter&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: expression error</p><hr/><p>当函数的形式参数为数组时，实际上是一个指针，对这种参数使用 sizeof 无法获取到数组大小，往往意味着错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">char</span> arr[<span class="number">32</span>])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="built_in">sizeof</span>(arr));  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中参数 arr 是一个指针，而不是一个真实的数组。  </p><p>在 C++ 代码中，如果有必要将参数设为数组，建议使用引用的方式，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void fun(char (&amp;arr)[32]) &#123;</span><br><span class="line">    memset(arr, 0, sizeof(arr));  // Compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样 sizeof(arr) 的结果就会和预期一致。<br><br/><br><br/></p><h4 id="依据-157"><a href="#依据-157" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.7.5.3(7)<br>ISO&#x2F;IEC 9899:2011 6.7.6.3(7)<br><br/></p><h4 id="参考-306"><a href="#参考-306" class="headerlink" title="参考"></a>参考</h4><p>CWE-467<br><br/><br><br/></p><h3 id="▌R10-5-2-sizeof-不应作用于逻辑表达式"><a href="#▌R10-5-2-sizeof-不应作用于逻辑表达式" class="headerlink" title="▌R10.5.2 sizeof 不应作用于逻辑表达式"></a><span id="sizeof_oddexpression">▌R10.5.2 sizeof 不应作用于逻辑表达式</span></h3><p>ID_sizeof_oddExpression&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>sizeof 作用于 &lt;、&gt;、&lt;&#x3D;、&gt;&#x3D;、&#x3D;&#x3D;、!&#x3D;、&amp;&amp;、|| 等逻辑表达式为常见笔误，逻辑运算符往往应该移出 sizeof 表达式。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">sizeof</span>(a == x)) &#123;  <span class="comment">// Non-compliant, may be sizeof(a) == x</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">sizeof</span>(a &gt;= x)) &#123;  <span class="comment">// Non-compliant, may be sizeof(a) &gt;= x</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><br/><h3 id="▌R10-5-3-sizeof-作用于指针是可疑的"><a href="#▌R10-5-3-sizeof-作用于指针是可疑的" class="headerlink" title="▌R10.5.3 sizeof 作用于指针是可疑的"></a><span id="sizeof_pointer">▌R10.5.3 sizeof 作用于指针是可疑的</span></h3><p>ID_sizeof_pointer&emsp;&emsp;&emsp;&emsp;&nbsp;:question: expression suspicious</p><hr/><p>sizeof 作用于指针的结果是指针的大小，而不是指针指向内容的大小，sizeof 作用于指针很容易造成错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>* p)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="built_in">sizeof</span>(p));   <span class="comment">// Logic error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>* p, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(p, <span class="number">0</span>, n * <span class="built_in">sizeof</span>(*p));   <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中参数 n 是数组元素的个数。<br><br/><br><br/></p><h4 id="相关-172"><a href="#相关-172" class="headerlink" title="相关"></a>相关</h4><p>ID_sizeof_pointerDivision<br><br/></p><h4 id="参考-307"><a href="#参考-307" class="headerlink" title="参考"></a>参考</h4><p>CWE-467<br><br/><br><br/></p><h3 id="▌R10-5-4-被除数不应是作用于指针的-sizeof-表达式"><a href="#▌R10-5-4-被除数不应是作用于指针的-sizeof-表达式" class="headerlink" title="▌R10.5.4 被除数不应是作用于指针的 sizeof 表达式"></a><span id="sizeof_pointerdivision">▌R10.5.4 被除数不应是作用于指针的 sizeof 表达式</span></h3><p>ID_sizeof_pointerDivision&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>形如 sizeof(p) &#x2F; n 的表达式往往意在获取数组元素的个数，如果 p 是指针，sizeof(p) 是指针大小而不是数组大小，结果很可能是错误的。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(T* p)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> n = <span class="built_in">sizeof</span>(p[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">qsort</span>(p, <span class="built_in">sizeof</span>(p) / n, n, cmp);  <span class="comment">// Non-compliant, logic error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 sizeof(p) &#x2F; n 并不能获取 p 所指数组中元素的个数。  </p><p>本规则是 ID_sizeof_pointer 的特化，sizeof 作用于指针是可疑的，再作为被除数就更加可疑了。<br><br/><br><br/></p><h4 id="相关-173"><a href="#相关-173" class="headerlink" title="相关"></a>相关</h4><p>ID_sizeof_pointer<br><br/></p><h4 id="参考-308"><a href="#参考-308" class="headerlink" title="参考"></a>参考</h4><p>CWE-467<br><br/><br><br/></p><h3 id="▌R10-5-5-指针加减偏移量时计入-sizeof-是可疑的"><a href="#▌R10-5-5-指针加减偏移量时计入-sizeof-是可疑的" class="headerlink" title="▌R10.5.5 指针加减偏移量时计入 sizeof 是可疑的"></a><span id="sizeof_suspiciousadd">▌R10.5.5 指针加减偏移量时计入 sizeof 是可疑的</span></h3><p>ID_sizeof_suspiciousAdd&emsp;&emsp;&emsp;&emsp;&nbsp;:question: expression suspicious</p><hr/><p>指针加减偏移量时会自动计入指针指向类型的大小，如果再计入 sizeof 的值，很可能是某种错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>* p, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *(p + i * <span class="built_in">sizeof</span>(<span class="type">int</span>));   <span class="comment">// Rather suspicious</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 foo 函数是为了获取指针 p 之后第 i 个整数的值，那么这种实现是错误的，应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>* p, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *(p + i);       <span class="comment">// Right</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-158"><a href="#依据-158" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.5.6(8)<br>ISO&#x2F;IEC 9899:2011 6.5.6(8)<br><br/></p><h4 id="参考-309"><a href="#参考-309" class="headerlink" title="参考"></a>参考</h4><p>CWE-468<br><br/><br><br/></p><h3 id="▌R10-5-6-sizeof-表达式的结果不应与-0-或负数比较"><a href="#▌R10-5-6-sizeof-表达式的结果不应与-0-或负数比较" class="headerlink" title="▌R10.5.6 sizeof 表达式的结果不应与 0 或负数比较"></a><span id="sizeof_zerocomparison">▌R10.5.6 sizeof 表达式的结果不应与 0 或负数比较</span></h3><p>ID_sizeof_zeroComparison&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: expression error</p><hr/><p>将 sizeof 表达式的结果与 0 或负数比较往往意味着逻辑错误。  </p><p>标准规定，如果 sizeof 作用于完整类型结果一定大于 0，如果作用于不完整的类型则无法通过编译。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sizeof</span>(p)) &#123;  <span class="comment">// Non-compliant, always true</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，在某些 C 环境中，sizeof 作用于空结构体或联合体结果可能是 0，但这属于未定义的行为，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">struct A &#123;&#125; a;</span><br><span class="line">printf(&quot;%zu\n&quot;, sizeof(a));  // What is output?</span><br></pre></td></tr></table></figure><p>空结构体或联合体在 C 标准中属于非法类型，示例代码可能会输出 0，也可能不会通过编译。<br><br/><br><br/></p><h4 id="依据-159"><a href="#依据-159" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.7.2.1(7)-undefined<br>ISO&#x2F;IEC 9899:2011 6.7.2.1(8)-undefined<br>ISO&#x2F;IEC 14882:2003 5.3.3(1 6)<br>ISO&#x2F;IEC 14882:2003 9(3)<br>ISO&#x2F;IEC 14882:2011 5.3.3(1 6)<br>ISO&#x2F;IEC 14882:2011 9(3)<br>ISO&#x2F;IEC 14882:2017 8.3.3(1 6)<br>ISO&#x2F;IEC 14882:2017 12(4)<br><br/></p><h4 id="参考-310"><a href="#参考-310" class="headerlink" title="参考"></a>参考</h4><p>CWE-1025<br><br/><br><br/></p><h3 id="▌R10-5-7-sizeof-不应再作用于-sizeof-表达式"><a href="#▌R10-5-7-sizeof-不应再作用于-sizeof-表达式" class="headerlink" title="▌R10.5.7 sizeof 不应再作用于 sizeof 表达式"></a><span id="sizeof_sizeof">▌R10.5.7 sizeof 不应再作用于 sizeof 表达式</span></h3><p>ID_sizeof_sizeof&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: expression error</p><hr/><p>sizeof(sizeof(…)) 等价于 sizeof(size_t)，在实际应用中没有任何必要写成连续 sizeof 的形式，往往意味着逻辑错误，多数由复制粘贴或错误的宏展开导致。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T* p = (T*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(T));</span><br><span class="line">    p-&gt;nLength = <span class="built_in">sizeof</span>(<span class="built_in">sizeof</span>(T));  <span class="comment">// Non-compliant, copy-paste error</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-160"><a href="#依据-160" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.5.3.4(4)<br>ISO&#x2F;IEC 9899:2011 6.5.3.4(5)<br>ISO&#x2F;IEC 14882:2003 5.3.3(6)<br>ISO&#x2F;IEC 14882:2011 5.3.3(6)<br>ISO&#x2F;IEC 14882:2017 8.3.3(6)<br><br/></p><h4 id="参考-311"><a href="#参考-311" class="headerlink" title="参考"></a>参考</h4><p>CWE-682<br><br/><br><br/></p><h3 id="▌R10-5-8-C-代码中-sizeof-不应作用于-NULL"><a href="#▌R10-5-8-C-代码中-sizeof-不应作用于-NULL" class="headerlink" title="▌R10.5.8 C++ 代码中 sizeof 不应作用于 NULL"></a><span id="sizeof_null">▌R10.5.8 C++ 代码中 sizeof 不应作用于 NULL</span></h3><p>ID_sizeof_NULL&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>标识符 NULL 由实现定义，在 C++ 语言中往往等同于常量 0，sizeof(NULL) 的结果很可能与预期不符。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> n = <span class="built_in">sizeof</span>(<span class="literal">NULL</span>);   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>不同的编译器对示例代码有不同的处理，有些会把 NULL 当作指针，有些会当作常量 0。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> n = <span class="built_in">sizeof</span>(<span class="literal">nullptr</span>);   <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-174"><a href="#相关-174" class="headerlink" title="相关"></a>相关</h4><p>ID_deprecatedNULL<br><br/></p><h4 id="依据-161"><a href="#依据-161" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 C.2.2.3(1)-implementation<br>ISO&#x2F;IEC 14882:2011 C.3.2.4(1)-implementation<br>ISO&#x2F;IEC 14882:2017 C.5.2.7(1)-implementation<br><br/></p><h4 id="参考-312"><a href="#参考-312" class="headerlink" title="参考"></a>参考</h4><p>CWE-351<br><br/><br><br/></p><h3 id="▌R10-5-9-sizeof-不可作用于-void"><a href="#▌R10-5-9-sizeof-不可作用于-void" class="headerlink" title="▌R10.5.9 sizeof 不可作用于 void"></a><span id="sizeof_void">▌R10.5.9 sizeof 不可作用于 void</span></h3><p>ID_sizeof_void&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: expression error</p><hr/><p>void 表示不存在的类型，也是不完整的类型，sizeof 作用于 void 是没意义的，属于语言运用错误，也可能是 sizeof(void*) 的笔误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> a = <span class="built_in">sizeof</span>(<span class="type">void</span>);   <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="type">size_t</span> b = <span class="built_in">sizeof</span>(<span class="type">void</span>*);  <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-162"><a href="#依据-162" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.2.5(19)<br>ISO&#x2F;IEC 9899:1999 6.3.2.2(1)<br>ISO&#x2F;IEC 9899:2011 6.2.5(19)<br>ISO&#x2F;IEC 9899:2011 6.3.2.2(1)<br><br/><br><br/></p><h3 id="10-6-Assertion"><a href="#10-6-Assertion" class="headerlink" title="10.6 Assertion"></a><span id="expression.assertion">10.6 Assertion</span></h3><h3 id="▌R10-6-1-断言中的表达式不应恒为真"><a href="#▌R10-6-1-断言中的表达式不应恒为真" class="headerlink" title="▌R10.6.1 断言中的表达式不应恒为真"></a><span id="badassertion">▌R10.6.1 断言中的表达式不应恒为真</span></h3><p>ID_badAssertion&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: expression error</p><hr/><p>恒为真的断言是没有意义的。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> a[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">sizeof</span>(a));        <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="built_in">assert</span>(<span class="string">&quot;some comments&quot;</span>);  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也不建议使用恒为假的断言表示异常，在 C++ 代码中应改用异常处理的方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void bar(int x) &#123;</span><br><span class="line">    if (x &lt; 0) &#123;</span><br><span class="line">        assert(0);  // Bad, use exceptions instead</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-163"><a href="#依据-163" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.2<br>ISO&#x2F;IEC 9899:2011 7.2<br><br/><br><br/></p><h3 id="▌R10-6-2-断言中的表达式不应有副作用"><a href="#▌R10-6-2-断言中的表达式不应有副作用" class="headerlink" title="▌R10.6.2 断言中的表达式不应有副作用"></a><span id="sideeffectassertion">▌R10.6.2 断言中的表达式不应有副作用</span></h3><p>ID_sideEffectAssertion&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: expression error</p><hr/><p>断言中的表达式如果有副作用，不能保证在所有编译设置下都有效。  </p><p>如标准断言 assert 会受宏 NDEBUG 的影响，当该宏被定义时 assert 中的表达式不会被执行。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>* p)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(++(*p) &gt; <span class="number">0</span>);  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表达式的副作用均应在 assert 之前完成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void foo(int* p) &#123;</span><br><span class="line">    ++(*p);</span><br><span class="line">    assert(*p &gt; 0);      // Compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-175"><a href="#相关-175" class="headerlink" title="相关"></a>相关</h4><p>ID_macro_sideEffectArgs<br>ID_unevaluatedSideEffect<br><br/></p><h4 id="依据-164"><a href="#依据-164" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.2<br>ISO&#x2F;IEC 9899:2011 7.2<br><br/></p><h4 id="参考-313"><a href="#参考-313" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT PRE31-C<br><br/><br><br/></p><h3 id="▌R10-6-3-断言中的表达式不应过于复杂"><a href="#▌R10-6-3-断言中的表达式不应过于复杂" class="headerlink" title="▌R10.6.3 断言中的表达式不应过于复杂"></a><span id="complexassertion">▌R10.6.3 断言中的表达式不应过于复杂</span></h3><p>ID_complexAssertion&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: expression suggestion</p><hr/><p>断言中的表达式不应过于复杂，否则不易定位具体是哪一项不符合断言，不利于调试。  </p><p>对于“逻辑与”表达式应将各子表达式分成多个断言。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(a != <span class="number">0</span> &amp;&amp; b &gt; <span class="number">10</span> &amp;&amp; c == b + <span class="number">1</span>);  <span class="comment">// Bad</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(a != <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">assert</span>(b &gt; <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">assert</span>(c == b + <span class="number">1</span>);  <span class="comment">// Good</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本着使代码便于调试的理念展开工作，可有效降低测试及维护成本。<br><br/><br><br/></p><h4 id="配置-30"><a href="#配置-30" class="headerlink" title="配置"></a>配置</h4><p>maxLogicOperatorCount：断言表达式中“逻辑与”运算符的最大数量，超过则报出<br><br/><br><br/></p><h3 id="10-7-Complexity"><a href="#10-7-Complexity" class="headerlink" title="10.7 Complexity"></a><span id="expression.complexity">10.7 Complexity</span></h3><h3 id="▌R10-7-1-表达式不应过于复杂"><a href="#▌R10-7-1-表达式不应过于复杂" class="headerlink" title="▌R10.7.1 表达式不应过于复杂"></a><span id="complexexpression">▌R10.7.1 表达式不应过于复杂</span></h3><p>ID_complexExpression&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: expression suggestion</p><hr/><p>复杂的表达式不利于阅读与调试，易包含潜在的错误，应适当拆分。  </p><p>下列情况可判定为复杂表达式：  </p><ul><li>运算符过多  </li><li>有副作用的子表达式过多  </li><li>优先级括号嵌套层次过深  </li><li>函数调用或数组索引嵌套层次过深  </li><li>三元表达式嵌套层次过深</li></ul><p>审计工具不妨通过配置判断表达式是否合规。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">f</span>(<span class="built_in">g</span>(<span class="built_in">h</span>(<span class="built_in">i</span>(....)));           <span class="comment">// Non-compliant</span></span><br><span class="line">    </span><br><span class="line">a || b || c || .... || z;  <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line">++++++n;                   <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line">x ? y ? z ? .... : ....;   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="配置-31"><a href="#配置-31" class="headerlink" title="配置"></a>配置</h4><p>maxOperatorCount：运算符最大数量，超过则报出<br>maxSideEffectPoints：具有副作用的子表达式最大数量，超过则报出<br>maxParenthesesLevel：优先级括号嵌套最大层数，超过则报出<br>maxPostfixLevel：函数调用、数组索引嵌套最大层数，超过则报出<br>maxTernaryLevel：三元表达式嵌套最大层数，超过则报出<br><br/></p><h4 id="参考-314"><a href="#参考-314" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.40<br><br/><br><br/></p><h3 id="10-8-Other"><a href="#10-8-Other" class="headerlink" title="10.8 Other"></a><span id="expression.other">10.8 Other</span></h3><h3 id="▌R10-8-1-不应访问填充数据"><a href="#▌R10-8-1-不应访问填充数据" class="headerlink" title="▌R10.8.1 不应访问填充数据"></a><span id="accesspaddingdata">▌R10.8.1 不应访问填充数据</span></h3><p>ID_accessPaddingData&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>内存中各对象之间可能存在填充数据，这种数据只为实现“<a href="https://en.wikipedia.org/wiki/Data_structure_alignment">内存对齐</a>”而无数值意义，而且填充数据的值是标准未声明的。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">char</span> a;</span><br><span class="line">    <span class="type">long</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A* x, A* y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">memcmp</span>(x, y, <span class="built_in">sizeof</span>(*x)) == <span class="number">0</span>) &#123;  <span class="comment">// Non-compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果按常见的 4 或 8 字节对齐，A 的成员 a 和 b 之间会存在填充数据，填充数据参与比较将得到错误的结果。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A* x, A* y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;a == y-&gt;a &amp;&amp; x-&gt;b == y-&gt;b) &#123;  <span class="comment">// Compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使成员之间没有填充数据也不应使用 memcmp 等函数比较，应实现类型明确的比较接口以供调用，否则很容易产生错误。<br><br/><br><br/></p><h4 id="相关-176"><a href="#相关-176" class="headerlink" title="相关"></a>相关</h4><p>ID_ignorePaddingData<br><br/></p><h4 id="依据-165"><a href="#依据-165" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.2.6.2(5)-unspecified<br>ISO&#x2F;IEC 9899:2011 6.2.6.2(5)-unspecified<br><br/><br><br/></p><h3 id="▌R10-8-2-new-表达式只可用于赋值或当作参数"><a href="#▌R10-8-2-new-表达式只可用于赋值或当作参数" class="headerlink" title="▌R10.8.2 new 表达式只可用于赋值或当作参数"></a><span id="oddnew">▌R10.8.2 new 表达式只可用于赋值或当作参数</span></h3><p>ID_oddNew&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>new 表达式只应作为“&#x3D;”的直接右子表达式，或直接作为参数，其他形式均有问题。  </p><p>本规则对 replacement new 不作要求。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = *<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);         <span class="comment">// Non-compliant, memory leak</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>&amp; j = *<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);        <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="keyword">delete</span> &amp;j;                    <span class="comment">// Very odd</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* p = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">10</span>] + <span class="number">5</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="keyword">delete</span>[] p - <span class="number">5</span>;               <span class="comment">// Very odd</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>]) &#123;            <span class="comment">// Non-compliant, memory leak</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种问题多数是由笔误或错误的宏展开造成的。<br><br/><br><br/></p><h4 id="相关-177"><a href="#相关-177" class="headerlink" title="相关"></a>相关</h4><p>ID_multiAllocation<br><br/><br><br/></p><h3 id="▌R10-8-3-数组下标应为整形表达式"><a href="#▌R10-8-3-数组下标应为整形表达式" class="headerlink" title="▌R10.8.3 数组下标应为整形表达式"></a><span id="oddsubscripting">▌R10.8.3 数组下标应为整形表达式</span></h3><p>ID_oddSubscripting&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: expression warning</p><hr/><p>C&#x2F;C++ 语言规定，数组下标可以在中括号的右侧也可以在左侧，然而这只是一种理论上的设计，在实际代码中应采用约定俗成的方式，即数组的名称在中括号的左侧，下标在中括号的右侧。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="number">4</span>[a] = <span class="number">5</span>;                       <span class="comment">// Non-compliant, use a[4] instead</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        cout &lt;&lt; i + <span class="number">1</span>[a] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;   <span class="comment">// Non-compliant, may be a[i + 1]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 a[4] 相当于 *(a+4)，所以与其等价的 *(4+a) 也应该可以解释为 4[a]，但下标在左侧的写法容易造成运算符优先级相关的问题，将下标写在右侧才是符合惯例的方式。<br><br/><br><br/></p><h4 id="依据-166"><a href="#依据-166" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.5.2.1(2)<br>ISO&#x2F;IEC 9899:2011 6.5.2.1(2)<br>ISO&#x2F;IEC 14882:2003 8.3.4(6)<br>ISO&#x2F;IEC 14882:2011 8.3.4(6)<br><br/><br><br/></p><h3 id="▌R10-8-4-禁用逗号表达式"><a href="#▌R10-8-4-禁用逗号表达式" class="headerlink" title="▌R10.8.4 禁用逗号表达式"></a><span id="forbidcommaexpression">▌R10.8.4 禁用逗号表达式</span></h3><p>ID_forbidCommaExpression&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: expression suggestion</p><hr/><p>逗号表达式将多个语句合成一个表达式，不利于阅读且易形成笔误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fun1</span>(), <span class="built_in">fun2</span>();                     <span class="comment">// Non-compliant, bad</span></span><br><span class="line">cond? <span class="built_in">foo</span>(), <span class="built_in">bar</span>(): <span class="built_in">baz</span>(), <span class="built_in">qux</span>();   <span class="comment">// Non-compliant, very bad</span></span><br></pre></td></tr></table></figure><p>逗号表达式会使代码的静态结构含混不明，总有更合理的方法替代逗号表达式： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fun1();</span><br><span class="line">fun2();      // Compliant</span><br><span class="line"></span><br><span class="line">if (cond) &#123;</span><br><span class="line">    foo();</span><br><span class="line">    bar();   // Compliant</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    baz();</span><br><span class="line">    qux();   // Compliant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逗号表达式也易被误用，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = b++, b * 2;      // Non-compliant</span><br><span class="line">x, y, z = 1, 2, 3;   // Non-compliant</span><br><span class="line">delete p, q;         // Non-compliant</span><br><span class="line">foo((a, b), c);      // Non-compliant</span><br><span class="line">return i, j, k;      // Non-compliant</span><br></pre></td></tr></table></figure><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (a = 0, b = 0; a &lt; 100; a++, b++)  &#123;   // Let it go?</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 for 语句的第 1 个和第 3 个表达式中使用逗号表达式为惯用方式，但这种方式并不值得提倡，审计工具不妨通过配置决定是否放过这种方式。<br><br/><br><br/></p><h4 id="配置-32"><a href="#配置-32" class="headerlink" title="配置"></a>配置</h4><p>allowCommaExpressionInForIteration：是否放过 for 语句中的逗号表达式<br><br/></p><h4 id="参考-315"><a href="#参考-315" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 12.10<br>MISRA C 2012 12.3<br>MISRA C++ 2008 5-18-1<br><br/><br><br/></p><h2 id="11-Literal"><a href="#11-Literal" class="headerlink" title="11. Literal"></a><span id="literal">11. Literal</span></h2><h3 id="▌R11-1-注意可疑的字符常量"><a href="#▌R11-1-注意可疑的字符常量" class="headerlink" title="▌R11.1 注意可疑的字符常量"></a><span id="literal_suspiciouschar">▌R11.1 注意可疑的字符常量</span></h3><p>ID_literal_suspiciousChar&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: literal warning</p><hr/><p>注意字符常量的错误书写，如正反斜杠的误用，’\n’ 误写为 ‘&#x2F;n’、’\\‘ 误写为 ‘&#x2F;&#x2F;‘ 等。  </p><p>由于 C&#x2F;C++ 语言允许在单引号内写入多个字符来表示一个整形常量（multi-character literal），如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto i = &#x27;/t&#x27;;   // Non-compliant</span><br></pre></td></tr></table></figure><p>例中 i 为 int 型变量，值可以为 12148，这种语言特性可以让一些笔误通过编译，造成不易察觉的问题。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto* tab = wcschr(str, L&#x27;/t&#x27;);   // Non-compliant</span><br></pre></td></tr></table></figure><p>在某些环境中执行结果和下列代码一样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto* tab = wcschr(str, L&#x27;/&#x27;);</span><br></pre></td></tr></table></figure><p>字符 t 将被忽略，这显然是错误的，L’&#x2F;t’ 应改为 L’\t’。<br><br/><br><br/></p><h4 id="相关-178"><a href="#相关-178" class="headerlink" title="相关"></a>相关</h4><p>ID_literal_multicharacter<br><br/></p><h4 id="依据-167"><a href="#依据-167" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.4.4.4(10)-implementation<br>ISO&#x2F;IEC 9899:2011 6.4.4.4(10)-implementation<br>ISO&#x2F;IEC 14882:2011 2.13.2(1)-implementation<br>ISO&#x2F;IEC 14882:2011 2.14.3(1)-implementation<br>ISO&#x2F;IEC 14882:2017 5.13.3(2)-implementation<br><br/><br><br/></p><h3 id="▌R11-2-字符常量中不可存在应转义而未转义的字符"><a href="#▌R11-2-字符常量中不可存在应转义而未转义的字符" class="headerlink" title="▌R11.2 字符常量中不可存在应转义而未转义的字符"></a><span id="literal_hardcodechar">▌R11.2 字符常量中不可存在应转义而未转义的字符</span></h3><p>ID_literal_hardCodeChar&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: literal warning</p><hr/><p>在字符常量中，如果存在制表符或控制字符，应使用转义字符。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c = <span class="string">&#x27;&#x27;</span>;  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中空白符为 tab，易被人误解为空格，经过复制粘贴后也可能会变成数目不确定的空格，产生意外的错误。  </p><p>应使用转义字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char c = &#x27;\t&#x27;;  // Compliant</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-179"><a href="#相关-179" class="headerlink" title="相关"></a>相关</h4><p>ID_literal_hardCodeString<br><br/><br><br/></p><h3 id="▌R11-3-字符串常量中不可存在应转义而未转义的字符"><a href="#▌R11-3-字符串常量中不可存在应转义而未转义的字符" class="headerlink" title="▌R11.3 字符串常量中不可存在应转义而未转义的字符"></a><span id="literal_hardcodestring">▌R11.3 字符串常量中不可存在应转义而未转义的字符</span></h3><p>ID_literal_hardCodeString&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: literal warning</p><hr/><p>在字符串常量中，如果存在制表符或控制字符，应使用转义字符。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span>* s = <span class="string">&quot;ab&quot;</span>;  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中空白符为 tab，易被人误解为空格，经过复制粘贴后也可能会变成数目不确定的空格，产生意外的错误。  </p><p>应使用转义字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const char* s = &quot;a\tb&quot;;  // Compliant</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-180"><a href="#相关-180" class="headerlink" title="相关"></a>相关</h4><p>ID_literal_hardCodeChar<br><br/><br><br/></p><h3 id="▌R11-4-不应使用非标准转义字符"><a href="#▌R11-4-不应使用非标准转义字符" class="headerlink" title="▌R11.4 不应使用非标准转义字符"></a><span id="literal_nonstandardesc">▌R11.4 不应使用非标准转义字符</span></h3><p>ID_literal_nonStandardEsc&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: literal warning</p><hr/><p>非标准转义字符没有可移植性，也可能是忘了将反斜杠转义。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">path</span><span class="params">(<span class="string">&quot;C:\Files\x.cpp&quot;</span>)</span></span>;   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中 \F 不是标准转义字符，\x 也不符合 16 进制转义字符的格式，这显然是路径中的反斜杠忘了转义。  </p><p>附 C&#x2F;C++ 标准转义字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x27;\a&#x27;          // Alert</span><br><span class="line">&#x27;\b&#x27;          // Backspace</span><br><span class="line">&#x27;\f&#x27;          // Formfeed page break</span><br><span class="line">&#x27;\n&#x27;          // New line</span><br><span class="line">&#x27;\r&#x27;          // Carriage return</span><br><span class="line">&#x27;\t&#x27;          // Horizontal tab</span><br><span class="line">&#x27;\v&#x27;          // Vertical tab</span><br><span class="line">&#x27;\\&#x27;          // Backslash</span><br><span class="line">&#x27;\?&#x27;          // Question mark</span><br><span class="line">&#x27;\&#x27;&#x27;          // Single quotation mark</span><br><span class="line">&#x27;\&quot;&#x27;          // Double quotation mark</span><br><span class="line">&#x27;\0&#x27;          // Null character</span><br><span class="line">&#x27;\ddd&#x27;        // Any character, ‘d’ is an octal number</span><br><span class="line">&#x27;\xhh&#x27;        // Any character, ‘h’ is a hex number</span><br><span class="line">&#x27;\uhhhh&#x27;      // Universal character name, ‘h’ is a hex number</span><br><span class="line">&#x27;\Uhhhhhhhh&#x27;  // Universal character name, ‘h’ is a hex number</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-168"><a href="#依据-168" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.4.4.4<br>ISO&#x2F;IEC 9899:2011 6.4.4.4<br>ISO&#x2F;IEC 14882:2003 2.13.2(3)-undefined<br>ISO&#x2F;IEC 14882:2011 2.14.3(3)-implementation<br>ISO&#x2F;IEC 14882:2017 5.13.3(7)-implementation<br><br/></p><h4 id="参考-316"><a href="#参考-316" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 4.1<br>MISRA C++ 2008 2-13-1<br><br/><br><br/></p><h3 id="▌R11-5-不同前缀的字符串常量不应连接在一起"><a href="#▌R11-5-不同前缀的字符串常量不应连接在一起" class="headerlink" title="▌R11.5 不同前缀的字符串常量不应连接在一起"></a><span id="literal_hybridconcat">▌R11.5 不同前缀的字符串常量不应连接在一起</span></h3><p>ID_literal_hybridConcat&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: literal warning</p><hr/><p>不同前缀的字符串常量连接在一起会导致标准未定义或由实现定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">wchar_t</span> S[];</span><br><span class="line"></span><br><span class="line">S a = <span class="string">L&quot;123&quot;</span> <span class="string">U&quot;456&quot;</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line">S b = <span class="string">L&quot;123&quot;</span> <span class="string">u&quot;456&quot;</span>;   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>C++03 规定宽字符串与窄字符串连接会导致未定义的行为；C++11 规定如果一个字符串有前缀另一个没有，结果以有前缀的为准，其他情况由实现定义或无法通过编译，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S x = L&quot;123&quot; &quot;456&quot;;    // Undefined in C++03, a wide string in C++11</span><br><span class="line">S y = L&quot;123&quot; U&quot;456&quot;;   // Implementation defined in C++11</span><br><span class="line">S z = L&quot;123&quot; u8&quot;456&quot;;  // Ill-formed in C++11</span><br></pre></td></tr></table></figure><p>C99 规定宽字符串与窄字符串连接的结果为宽字符串，C11 规定不同前缀的宽字符串连接结果由实现定义，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S u = L&quot;123&quot; &quot;456&quot;;    // A wide string in C99</span><br><span class="line">S v = L&quot;123&quot; U&quot;456&quot;;   // Implementation defined in C11</span><br></pre></td></tr></table></figure><p>为了提高可读性和可移植性，字符串前缀应保持一致：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S r = &quot;123&quot; L&quot;456&quot;;    // Bad</span><br><span class="line">S s = L&quot;123&quot; L&quot;456&quot;;   // Good</span><br><span class="line">S t = L&quot;123&quot; &quot;456&quot;;    // Let it go?</span><br></pre></td></tr></table></figure><p>对于有前缀和无前缀的字符串连接，在新的语言标准中均已有定义，审计工具不妨通过配置决定是否放过这种连接。<br><br/><br><br/></p><h4 id="配置-33"><a href="#配置-33" class="headerlink" title="配置"></a>配置</h4><p>allowPrefixedConcatUnprefixed：是否允许有前缀和无前缀的字符串连接<br><br/></p><h4 id="依据-169"><a href="#依据-169" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.4.5(4)<br>ISO&#x2F;IEC 9899:2011 6.4.5(5)-implementation<br>ISO&#x2F;IEC 14882:2003 2.13.4(3)-undefined<br>ISO&#x2F;IEC 14882:2011 2.14.5(13)-implementation<br><br/></p><h4 id="参考-317"><a href="#参考-317" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 2-13-5<br><br/><br><br/></p><h3 id="▌R11-6-字符串常量中不应存在拼写错误"><a href="#▌R11-6-字符串常量中不应存在拼写错误" class="headerlink" title="▌R11.6 字符串常量中不应存在拼写错误"></a><span id="literal_misspelling">▌R11.6 字符串常量中不应存在拼写错误</span></h3><p>ID_literal_misspelling&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: literal warning</p><hr/><p>如果含有拼写错误的常量字符串对用户可见，也可以认为是产品的一种 bug，会对用户造成困扰，故应认真对待。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">showMessage</span><span class="params">(<span class="type">int</span> err)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Error\n&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Successfull\n&quot;</span>;  <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中“Successfull”存在拼写错误，应改为“Successful”。<br><br/><br><br/></p><h4 id="相关-181"><a href="#相关-181" class="headerlink" title="相关"></a>相关</h4><p>ID_misspelling<br><br/><br><br/></p><h3 id="▌R11-7-整数或浮点数常量的后缀应使用大写字母"><a href="#▌R11-7-整数或浮点数常量的后缀应使用大写字母" class="headerlink" title="▌R11.7 整数或浮点数常量的后缀应使用大写字母"></a><span id="literal_confusingsuffix">▌R11.7 整数或浮点数常量的后缀应使用大写字母</span></h3><p>ID_literal_confusingSuffix&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: literal warning</p><hr/><p>整数或浮点数常量的后缀应使用大写字母，否则小写字母“l”极易与数字“1”混淆。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> a = <span class="number">100ll</span>;    <span class="comment">// Non-compliant, misread as 10011</span></span><br><span class="line"><span class="type">long</span> <span class="type">double</span> b = <span class="number">100.l</span>;  <span class="comment">// Non-compliant, misread as 100.1</span></span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> a = <span class="number">100LL</span>;    <span class="comment">// Compliant</span></span><br><span class="line"><span class="type">long</span> <span class="type">double</span> b = <span class="number">100.L</span>;  <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><p>后缀大小写混用的情况会使人更加困惑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">long long c = 100lL;            // Non-compliant, very bad</span><br><span class="line">unsigned long long d = 100lLU;  // Non-compliant, very bad</span><br></pre></td></tr></table></figure><p>其中，小写的 l 和大写的 L 混在了一起。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> c = <span class="number">100LL</span>;            <span class="comment">// Compliant</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> d = <span class="number">100LLU</span>;  <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-318"><a href="#参考-318" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines NL.19<br>MISRA C 2012 7.3<br>MISRA C++ 2008 2-13-4<br><br/><br><br/></p><h3 id="▌R11-8-禁用-8-进制常量"><a href="#▌R11-8-禁用-8-进制常量" class="headerlink" title="▌R11.8 禁用 8 进制常量"></a><span id="literal_forbidoct">▌R11.8 禁用 8 进制常量</span></h3><p>ID_literal_forbidOct&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: literal suggestion</p><hr/><p>8 进制不像 10 进制那样符合人们的常规思维，也不像 2 进制或 16 进制那样便于展示数据的存储格式，而且 C&#x2F;C++ 语言中 8 进制表示法只是在数字前置 0，与十进制过于相似，易被误用。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> K_0 = <span class="number">5592</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> K_1 = <span class="number">0631</span>;  <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> K_2 = <span class="number">3817</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> K_3 = <span class="number">4257</span>;</span><br></pre></td></tr></table></figure><p>为了格式上的对齐，错误地在 10 进制数前写 0 是常见笔误，例中 k_1 的实际值为 409。<br><br/><br><br/></p><h4 id="参考-319"><a href="#参考-319" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 7.1<br>MISRA C 2012 7.1<br>MISRA C++ 2008 2-13-2<br><br/><br><br/></p><h3 id="▌R11-9-整数或浮点数常量应使用标准后缀"><a href="#▌R11-9-整数或浮点数常量应使用标准后缀" class="headerlink" title="▌R11.9 整数或浮点数常量应使用标准后缀"></a><span id="literal_nonstandardsuffix">▌R11.9 整数或浮点数常量应使用标准后缀</span></h3><p>ID_literal_nonStandardSuffix&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: literal suggestion</p><hr/><p>整数常量后缀只应为 L、LL、UL、ULL，浮点数常量的后缀只应为 L、f 或 F，其他非标准后缀没有可移植性。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">100u</span>i32;  <span class="comment">// Non-compliant, not common between compilers</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> b = <span class="number">100</span>i64;      <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">100U</span>;  <span class="comment">// Compliant</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> b = <span class="number">100LL</span>;    <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-182"><a href="#相关-182" class="headerlink" title="相关"></a>相关</h4><p>ID_literal_confusingSuffix<br><br/></p><h4 id="依据-170"><a href="#依据-170" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.4.4.1(5)<br>ISO&#x2F;IEC 9899:1999 6.4.4.2(4)<br>ISO&#x2F;IEC 9899:2011 6.4.4.1(5)<br>ISO&#x2F;IEC 9899:2011 6.4.4.2(4)<br>ISO&#x2F;IEC 14882:2003 2.14.2(2)<br>ISO&#x2F;IEC 14882:2003 2.14.4(1)<br>ISO&#x2F;IEC 14882:2011 2.14.2(2)<br>ISO&#x2F;IEC 14882:2011 2.14.4(1)<br>ISO&#x2F;IEC 14882:2017 5.13.2(2)<br>ISO&#x2F;IEC 14882:2017 5.13.4(1)<br><br/><br><br/></p><h3 id="▌R11-10-小心遗漏逗号导致的非预期字符串连接"><a href="#▌R11-10-小心遗漏逗号导致的非预期字符串连接" class="headerlink" title="▌R11.10 小心遗漏逗号导致的非预期字符串连接"></a><span id="literal_oddconcat">▌R11.10 小心遗漏逗号导致的非预期字符串连接</span></h3><p>ID_literal_oddConcat&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: literal warning</p><hr/><p>注意可能导致非预期结果的字符串连接，尤其在初始化列表中，小心逗号被遗漏。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string strs[] = &#123;</span><br><span class="line">    <span class="string">&quot;123&quot;</span>, <span class="string">&quot;456&quot;</span>, <span class="string">&quot;789&quot;</span>,</span><br><span class="line">    <span class="string">&quot;123&quot;</span>, <span class="string">&quot;456&quot;</span>, <span class="string">&quot;789&quot;</span>   <span class="comment">// Rather suspicious, missing a comma?</span></span><br><span class="line">    <span class="string">&quot;123&quot;</span>, <span class="string">&quot;456&quot;</span>, <span class="string">&quot;789&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中初始化列表第 2 行的 “789” 与第 3 行的 “123” 中间没有逗号，会连接成 “789123”，显然是不符合预期的，这种问题属于常见笔误。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void foo(const char*);</span><br><span class="line">void foo(const char*, const char*);</span><br><span class="line"></span><br><span class="line">void bar() &#123;</span><br><span class="line">    foo(&quot;abc&quot; &quot;123&quot;);  // Rather suspicious, which ‘foo’ is right?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量字符串连接的用途：  </p><ul><li>字符串过长不便于显示时可将字符串拆成多个子串分行书写  </li><li>宏和字符串连接在一起完成一些更灵活的操作</li></ul><p>除此之外不应再将一个字符串拆成多个常量。<br><br/><br><br/><br><br/></p><h3 id="▌R11-11-不应存在-magic-number"><a href="#▌R11-11-不应存在-magic-number" class="headerlink" title="▌R11.11 不应存在 magic number"></a><span id="literal_magicnumber">▌R11.11 不应存在 magic number</span></h3><p>ID_literal_magicNumber&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: literal suggestion</p><hr/><p>直接出现在代码中的字面数值称为 magic number，使人难以理解其含义，不利于阅读和维护，应改用具有适当名称的常量或枚举项。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">foo</span><span class="params">(<span class="type">double</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> a = b * <span class="number">1.618034</span>;   <span class="comment">// Non-compliant, 1.618034 is a magic number</span></span><br><span class="line">    <span class="keyword">return</span> a * (a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">bar</span><span class="params">(<span class="type">double</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> b = a * <span class="number">0.618034</span>;   <span class="comment">// Non-compliant, 0.618034 is a magic number</span></span><br><span class="line">    <span class="keyword">return</span> a * (a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 1.618034 不能表示其含义，而且当这种 magic number 散落在代码的各个角落时，不便于统一管理，造成维护上的困难。  </p><p>应改为具有名称的常量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const double goldenRatio = 1.618034;   // Compliant</span><br><span class="line"></span><br><span class="line">double foo(double b) &#123;</span><br><span class="line">    double a = b * goldenRatio;   // Compliant</span><br><span class="line">    return a * (a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double bar(double a) &#123;</span><br><span class="line">    double b = a * (goldenRatio - 1);   // Compliant</span><br><span class="line">    return a * (a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量初始化表达式中的字面数值，以及表示序号起始或简单状态的 0、1 等小字面数值可不受本规则约束。<br><br/><br><br/></p><h4 id="相关-183"><a href="#相关-183" class="headerlink" title="相关"></a>相关</h4><p>ID_literal_magicString<br><br/></p><h4 id="参考-320"><a href="#参考-320" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.45<br><br/><br><br/></p><h3 id="▌R11-12-不应存在-magic-string"><a href="#▌R11-12-不应存在-magic-string" class="headerlink" title="▌R11.12 不应存在 magic string"></a><span id="literal_magicstring">▌R11.12 不应存在 magic string</span></h3><p>ID_literal_magicString&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: literal suggestion</p><hr/><p>直接出现在代码中的字面常量字符串称为 magic string，不利于阅读和维护，应改用具有适当名称的常量。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> string&amp; url)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (url == <span class="string">&quot;https://foo.net&quot;</span>) &#123;  <span class="comment">// Non-compliant</span></span><br><span class="line">        <span class="built_in">bar</span>(<span class="string">&quot;https://foo.net&quot;</span>);      <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当这种常量字符串散落在代码的各个角落时，不便于统一管理，造成维护上的困难。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> myUrl[] = <span class="string">&quot;https://foo.net&quot;</span>;  <span class="comment">// Compliant</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> string&amp; url)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (url == myUrl) &#123;  <span class="comment">// Compliant</span></span><br><span class="line">        <span class="built_in">bar</span>(myUrl);      <span class="comment">// Compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量初始化表达式中的常量字符串可不受本规则约束。<br><br/><br><br/></p><h4 id="相关-184"><a href="#相关-184" class="headerlink" title="相关"></a>相关</h4><p>ID_literal_magicNumber<br><br/></p><h4 id="参考-321"><a href="#参考-321" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.45<br><br/><br><br/></p><h3 id="▌R11-13-不应使用多字符常量"><a href="#▌R11-13-不应使用多字符常量" class="headerlink" title="▌R11.13 不应使用多字符常量"></a><span id="literal_multicharacter">▌R11.13 不应使用多字符常量</span></h3><p>ID_literal_multicharacter&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: literal suggestion</p><hr/><p>“多字符常量（multi-character literal）”指单引号之间有多个字符或非基本字符的常量，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27;abc&#x27;  // has type int and implementation-defined value</span><br><span class="line">&#x27;中&#x27;   // has type int and implementation-defined value</span><br><span class="line">L&#x27;文&#x27;  // has type wchar_t and implementation-defined value</span><br></pre></td></tr></table></figure><p>这种常量的值是由实现定义的，而且在形式上与字符或字符串常量非常相似，易被误用，故建议禁用。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="string">&#x27;tcp&#x27;</span>) &#123;  <span class="comment">// Non-compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="string">&#x27;udp&#x27;</span>) &#123;  <span class="comment">// Non-compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 ‘tcp’、’udp’ 为多字符常量，在 C 代码中应改用 enum，在 C++ 代码中应改用 enum class 实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">enum class PROT &#123; tcp, udp &#125;;</span><br><span class="line"></span><br><span class="line">void foo(PROT x) &#123;</span><br><span class="line">    if (x == PROT::tcp) &#123;  // Compliant</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    else if (x == PROT::udp) &#123;  // Compliant</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-185"><a href="#相关-185" class="headerlink" title="相关"></a>相关</h4><p>ID_literal_suspiciousChar<br><br/></p><h4 id="依据-171"><a href="#依据-171" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.4.4.4(10)-implementation<br>ISO&#x2F;IEC 9899:2011 6.4.4.4(10)-implementation<br>ISO&#x2F;IEC 14882:2011 2.13.2(1)-implementation<br>ISO&#x2F;IEC 14882:2011 2.14.3(1)-implementation<br>ISO&#x2F;IEC 14882:2017 5.13.3(2)-implementation<br><br/><br><br/></p><h2 id="12-Cast"><a href="#12-Cast" class="headerlink" title="12. Cast"></a><span id="cast">12. Cast</span></h2><h3 id="▌R12-1-避免类型转换造成数据丢失"><a href="#▌R12-1-避免类型转换造成数据丢失" class="headerlink" title="▌R12.1 避免类型转换造成数据丢失"></a><span id="narrowcast">▌R12.1 避免类型转换造成数据丢失</span></h3><p>ID_narrowCast&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: cast warning</p><hr/><p>应检查类型转换的结果是否正确，避免数据丢失等问题。  </p><p>取值范围大的类型向取值范围小的类型转换需要考虑数据丢失问题，这种问题在浮点型转整型、整型转浮点型，以及浮点型转浮点型时会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> i, <span class="type">double</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> c = i;              <span class="comment">// Non-compliant</span></span><br><span class="line">    <span class="type">float</span> f = (<span class="type">float</span>)d;      <span class="comment">// Non-compliant, may cause undefined behavior</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接将 int 转为 char、double 转为 float 是不符合要求的，应判断源对象的值是否在目标对象的取值范围内。  </p><p>下面给出判断转换是否安全的简单示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">To</span>, <span class="keyword">class</span> <span class="title class_">From</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CastChecker</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">static</span> To <span class="title">cast</span><span class="params">(From x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> y = <span class="built_in">static_cast</span>&lt;To&gt;(x);</span><br><span class="line">        <span class="keyword">auto</span> z = <span class="built_in">static_cast</span>&lt;From&gt;(y);</span><br><span class="line">        <span class="keyword">return</span> x == z? y: <span class="keyword">throw</span> <span class="built_in">DataLoss</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">To</span>, <span class="keyword">class</span> <span class="title class_">From</span>&gt;</span><br><span class="line"><span class="function">To <span class="title">checked_cast</span><span class="params">(From x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CastChecker&lt;To, From&gt;::<span class="built_in">cast</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 checked_cast 委托类 CastChecker 将源类型转为目标类型，再将目标类型转回源类型，如果经两次转换得到的数据与源数据不符，说明转换存在数据丢失，抛出 DataLoss 异常，使用方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void foo(int i, double d) &#123;</span><br><span class="line">    char c = checked_cast&lt;char&gt;(i);     // Compliant</span><br><span class="line">    float f = checked_cast&lt;float&gt;(d);   // Compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浮点型转换可能导致标准未定义的行为，所以应在转换之前判断取值范围，可通过特化 CastChecker 实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">template &lt;&gt;</span><br><span class="line">struct CastChecker&lt;float, double&gt;</span><br><span class="line">&#123;</span><br><span class="line">    static bool check(double x) &#123;</span><br><span class="line">        return !isnan(x)</span><br><span class="line">            &amp;&amp; !isgreater(fabs(x), FLT_MAX)</span><br><span class="line">            &amp;&amp; !isless(fabs(x), FLT_MIN);</span><br><span class="line">    &#125;</span><br><span class="line">    static float cast(double x) &#123;</span><br><span class="line">        return check(x)? static_cast&lt;float&gt;(x): throw DataLoss();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样当 double 对象的值超出 float 对象的取值范围时会抛出异常。另外，浮点型转整型时小数部分如何取舍、负数是否可以转为无符号数等问题均可以根据实际需求通过特化 CastChecker 来实现。<br><br/><br><br/></p><h4 id="依据-172"><a href="#依据-172" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.3.1.4(1)-undefined<br>ISO&#x2F;IEC 9899:1999 6.3.1.5(2)-undefined<br>ISO&#x2F;IEC 9899:2011 6.3.1.4(1)-undefined<br>ISO&#x2F;IEC 9899:2011 6.3.1.5(1)-undefined<br>ISO&#x2F;IEC 14882:2003 4.8(1)-undefined<br>ISO&#x2F;IEC 14882:2003 4.9(1)-undefined<br>ISO&#x2F;IEC 14882:2011 4.8(1)-undefined<br>ISO&#x2F;IEC 14882:2011 4.9(1 2)-undefined<br><br/></p><h4 id="参考-322"><a href="#参考-322" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.46<br>SEI CERT FLP34-C<br><br/><br><br/></p><h3 id="▌R12-2-避免与-void-相互转换"><a href="#▌R12-2-避免与-void-相互转换" class="headerlink" title="▌R12.2 避免与 void* 相互转换"></a><span id="voidcast">▌R12.2 避免与 void* 相互转换</span></h3><p>ID_voidCast&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: cast suggestion</p><hr/><p>与 void* 相互转换会打破类型限制，是不安全的类型转换。  </p><p>C 语言的某些传统接口会使用 void*，可不受本规则限制，但在 C++ 代码中应避与 void* 相互转换。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123; .... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">void</span>* v)</span> </span>&#123;</span><br><span class="line">    A* a = (A*)v;     <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中参数 v 可以随意接受非 A 对象的指针，进而导致标准未定义的行为，代码的正确性单方面依赖开发者是不可靠的。<br><br/><br><br/></p><h4 id="相关-186"><a href="#相关-186" class="headerlink" title="相关"></a>相关</h4><p>ID_forbidMemberVoidPtr<br>ID_forbidFunctionVoidPtr<br><br/></p><h4 id="依据-173"><a href="#依据-173" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 5.2.10(7)-unspecified<br>ISO&#x2F;IEC 14882:2011 5.2.10(7)-unspecified<br><br/></p><h4 id="参考-323"><a href="#参考-323" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 11.5<br>MISRA C++ 2008 5-2-8<br><br/><br><br/></p><h3 id="▌R12-3-避免向下类型转换"><a href="#▌R12-3-避免向下类型转换" class="headerlink" title="▌R12.3 避免向下类型转换"></a><span id="downcast">▌R12.3 避免向下类型转换</span></h3><p>ID_downCast&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: cast suggestion</p><hr/><p>当代码中出现了从基类到派生类的向下类型转换，以及可以造成数据损失的类型转换，意味着现有接口或流程不能满足需求，需要“特殊处理”，所以这种转换越少越好。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; .... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span></span>;   <span class="comment">// A new function</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A* a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span>* p = <span class="built_in">dynamic_cast</span>&lt;B*&gt;(a)) &#123;   <span class="comment">// Bad</span></span><br><span class="line">        p-&gt;<span class="built_in">bar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 foo 接口对 B 类型进行特殊处理，是不利于维护的，当这种特殊处理较多时，应利用虚函数、重载或模板等方法进行合理重构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    ....</span><br><span class="line">public:</span><br><span class="line">    virtual void bar();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class B: public A &#123;</span><br><span class="line">public:</span><br><span class="line">    void bar() override;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void foo(A* a) &#123;</span><br><span class="line">    if (a) &#123;</span><br><span class="line">        a-&gt;bar();   // Good</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-187"><a href="#相关-187" class="headerlink" title="相关"></a>相关</h4><p>ID_nonDynamicDownCast<br>ID_narrowCast<br><br/></p><h4 id="参考-324"><a href="#参考-324" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.48<br><br/><br><br/></p><h3 id="▌R12-4-指针与整数不应相互转换"><a href="#▌R12-4-指针与整数不应相互转换" class="headerlink" title="▌R12.4 指针与整数不应相互转换"></a><span id="ptrintcast">▌R12.4 指针与整数不应相互转换</span></h3><p>ID_ptrIntCast&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: cast warning</p><hr/><p>指针与整数相互转换容易造成地址不完整、寻址错误、降低可移植性等多种问题。  </p><p>指针与整数的转换由实现定义，整数的符号和取值范围可能与指针有冲突，错误的值转为指针也会导致标准未定义的行为。在某些平台上指针与 size_t 可以安全转换，但不具备可移植性，审计工具不妨通过配置决定是否放过这种转换。C 标准规定指针可以转为 intptr_t 或 uintptr_t，但也声明了这些类型不是编译器必须实现的类型。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>* p)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    v.<span class="built_in">emplace_back</span>((<span class="type">int</span>)p);  <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中将指针转为 int 是不符合要求的，指针的值可能会超过 int 的范围。<br><br/><br><br/></p><h4 id="配置-34"><a href="#配置-34" class="headerlink" title="配置"></a>配置</h4><p>allowPointerToSizeType：是否放过指针与 size_t 的转换<br><br/></p><h4 id="相关-188"><a href="#相关-188" class="headerlink" title="相关"></a>相关</h4><p>ID_fixedAddrToPointer<br><br/></p><h4 id="依据-174"><a href="#依据-174" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.3.2.3(5)-implementation<br>ISO&#x2F;IEC 9899:1999 7.18.1.4(1)<br>ISO&#x2F;IEC 9899:2011 6.3.2.3(5)-implementation<br>ISO&#x2F;IEC 9899:2011 7.20.1.4(1)<br>ISO&#x2F;IEC 14882:2003 5.2.10(4 5)-implementation<br>ISO&#x2F;IEC 14882:2011 3.7.4.3(1)<br>ISO&#x2F;IEC 14882:2011 5.2.10(4 5)-implementation<br><br/></p><h4 id="参考-325"><a href="#参考-325" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 11.3<br>MISRA C 2012 11.4<br>MISRA C++ 2008 5-2-9<br>SEI CERT INT36-C<br><br/><br><br/></p><h3 id="▌R12-5-类型转换不应去掉-const、volatile-等属性"><a href="#▌R12-5-类型转换不应去掉-const、volatile-等属性" class="headerlink" title="▌R12.5 类型转换不应去掉 const、volatile 等属性"></a><span id="qualifiercastedaway">▌R12.5 类型转换不应去掉 const、volatile 等属性</span></h3><p>ID_qualifierCastedAway&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: cast warning</p><hr/><p>去掉 const、volatile 等属性会使相关机制失去意义，往往意味着设计上的缺陷，也会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> v = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">*(<span class="type">int</span>*)&amp;c = <span class="number">3</span>;   <span class="comment">// Non-compliant, undefined behavior</span></span><br><span class="line">*(<span class="type">int</span>*)&amp;v = <span class="number">4</span>;   <span class="comment">// Non-compliant, undefined behavior</span></span><br></pre></td></tr></table></figure><p>通过去掉 const 或 volatile 的转换修改相关对象会导致标准未定义的行为。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct A &#123;</span><br><span class="line">    void foo() const &#123;</span><br><span class="line">        const_cast&lt;A*&gt;(this)-&gt;n++;   // Non-compliant</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    int n = 0;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中 foo 为常量成员函数，用 const_cast 去掉 this 指针的 const 限定是不符合要求的。  </p><p>如果成员的改变只起辅助作用而不影响对象状态，可将成员设为 mutable，否则应重新设计类，如： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct A &#123;</span><br><span class="line">    void foo() const &#123;</span><br><span class="line">        n++;             // OK</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    mutable int n = 0;   // Can be modified by const member functions</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="依据-175"><a href="#依据-175" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.7.3(5)-undefined<br>ISO&#x2F;IEC 9899:2011 6.7.3(6)-undefined<br>ISO&#x2F;IEC 14882:2003 7.1.5.1(4 7)-undefined<br>ISO&#x2F;IEC 14882:2011 7.1.6.1(4 6)-undefined<br><br/></p><h4 id="参考-326"><a href="#参考-326" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines Type.3<br>MISRA C 2004 11.5<br>MISRA C 2012 11.8<br>MISRA C++ 2008 5-2-5<br>SEI CERT EXP32-C<br>SEI CERT EXP55-CPP<br><br/><br><br/></p><h3 id="▌R12-6-不应强制转换无继承关系的指针或引用"><a href="#▌R12-6-不应强制转换无继承关系的指针或引用" class="headerlink" title="▌R12.6 不应强制转换无继承关系的指针或引用"></a><span id="castnoinheritance">▌R12.6 不应强制转换无继承关系的指针或引用</span></h3><p>ID_castNoInheritance&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: cast warning</p><hr/><p>无继承关系的指针或引用之间没有逻辑关系，不应强制转换，否则意味着设计缺陷或逻辑错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span>* p = (<span class="type">int</span>*)&amp;f;  <span class="comment">// Non-compliant</span></span><br><span class="line">(*p)++;             <span class="comment">// Undefined behavior</span></span><br></pre></td></tr></table></figure><p>基本类型之间没有继承关系，float* 转为 int* 属于逻辑错误，导致标准未定义的行为。  </p><p>有时为了考察对象内部结构，需要将对象指针转为 unsigned char* 等类型，但这种转换打破了类型的边界，超越了数据处理的常规方法，易造成移植等方面的问题，审计工具不妨通过配置决定是否放过这种转换。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class A &#123; .... &#125;;</span><br><span class="line">class B &#123; .... &#125;;</span><br><span class="line">class C: public A, public B &#123; .... &#125;;</span><br><span class="line"></span><br><span class="line">A* a = new C;</span><br><span class="line"></span><br><span class="line">B* b0 = (B*)a;                    // Non-compliant</span><br><span class="line">B* b1 = reinterpret_cast&lt;B*&gt;(a);  // Non-compliant</span><br><span class="line"></span><br><span class="line">B* b2 = static_cast&lt;B*&gt;(a);       // Compliant, compile-time protected</span><br><span class="line">B* b3 = dynamic_cast&lt;B*&gt;(a);      // Compliant, run-time protected</span><br></pre></td></tr></table></figure><p>例中 A 与 B 没有继承关系，C 从 A 和 B 继承，指针 a 为 A 类型但实际指向 C 的实例，这种情况下将 a 直接强制转为 B 类型的指针将得到错误的结果，这种问题在实际代码中也很常见。  </p><p>本规则限制无继承关系的 C 风格类型转换以及 reinterpret_cast 转换，不限制 static_cast 和 dynamic_cast 转换，示例中的 static_cast 转换将得到编译错误从而锁定问题，如果 A 和 B 是多态类型，用 dynamic_cast 会得到正确的结果。  </p><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class V &#123; .... &#125;;</span><br><span class="line"></span><br><span class="line">class U &#123;</span><br><span class="line">    ....</span><br><span class="line">public:</span><br><span class="line">    operator V*();   // Conversion operator</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">U* u = new U;</span><br><span class="line"></span><br><span class="line">V* v0 = (V*)u;                     // Compliant, but bad</span><br><span class="line">V* v1 = reinterpret_cast&lt;V*&gt;(u);   // Still non-compliant</span><br></pre></td></tr></table></figure><p>例中 U 和 V 是无继承关系的类，但 U 实现了向 V 的转换运算符，U 和 V 之间存在逻辑关系，这时的 C 风格类型转换可不受本规则限制，但不符合规则 ID_forbidCStyleCast，这种情况仍然不能使用 reinterpret_cast，参见 ID_unsuitableReinterpretCast。<br><br/><br><br/></p><h4 id="配置-35"><a href="#配置-35" class="headerlink" title="配置"></a>配置</h4><p>allowWeakerCast：是否放过与 unsigned char* 的转换<br><br/></p><h4 id="相关-189"><a href="#相关-189" class="headerlink" title="相关"></a>相关</h4><p>ID_stricterAlignedCast<br>ID_castNonPublicInheritance<br><br/></p><h4 id="依据-176"><a href="#依据-176" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.5(7)-undefined<br>ISO&#x2F;IEC 9899:2011 6.5(7)-undefined<br>ISO&#x2F;IEC 14882:2003 3.10(15)-undefined<br>ISO&#x2F;IEC 14882:2003 4.1(1)-undefined<br>ISO&#x2F;IEC 14882:2011 3.10(10)-undefined<br>ISO&#x2F;IEC 14882:2011 4.1(1)-undefined<br><br/></p><h4 id="参考-327"><a href="#参考-327" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 11.3<br>MISRA C++ 2008 5-2-7<br>SEI CERT EXP39-C<br><br/><br><br/></p><h3 id="▌R12-7-不应强制转换无-public-继承关系的指针或引用"><a href="#▌R12-7-不应强制转换无-public-继承关系的指针或引用" class="headerlink" title="▌R12.7 不应强制转换无 public 继承关系的指针或引用"></a><span id="castnonpublicinheritance">▌R12.7 不应强制转换无 public 继承关系的指针或引用</span></h3><p>ID_castNonPublicInheritance&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: cast warning</p><hr/><p>public 继承表示派生类是基类的某种扩展，而非 public 继承往往表示派生类是基类的某种“例外”，基类的方法不再适用于派生类的对象。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; .... &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">private</span> A &#123; .... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(A* a)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(B* b)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">bar</span>((A*)b);    <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 B 是对 A 的某种改造，如果再用 A 的方法去处理 B 的对象，显然是有问题的。<br><br/><br><br/></p><h4 id="相关-190"><a href="#相关-190" class="headerlink" title="相关"></a>相关</h4><p>ID_castNoInheritance<br><br/></p><h4 id="依据-177"><a href="#依据-177" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 4.10(3)<br>ISO&#x2F;IEC 14882:2011 4.10(3)<br><br/><br><br/></p><h3 id="▌R12-8-非-POD-类的指针与基本类型的指针不应相互转换"><a href="#▌R12-8-非-POD-类的指针与基本类型的指针不应相互转换" class="headerlink" title="▌R12.8 非 POD 类的指针与基本类型的指针不应相互转换"></a><span id="nonpodbinarycast">▌R12.8 非 POD 类的指针与基本类型的指针不应相互转换</span></h3><p>ID_nonPODBinaryCast&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: cast warning</p><hr/><p>非“<a href="https://en.cppreference.com/w/cpp/named_req/PODType">POD</a>”对象相关数据之间存在特殊的内在关系，尤其是虚函数表指针、虚基类表指针这种由实现定义的运行时数据，不应当作普通二进制数据处理，非 POD 对象的指针也不应与 void*、unsigned char* 等基本类型的指针相互转换。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">A</span>() = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        FILE* fp = <span class="built_in">fopen</span>(<span class="string">&quot;dat&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">        <span class="built_in">fwrite</span>(<span class="keyword">this</span>, <span class="built_in">sizeof</span>(A), <span class="number">1</span>, fp);   <span class="comment">// Non-compliant</span></span><br><span class="line">        <span class="built_in">fclose</span>(fp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FILE* fp = <span class="built_in">fopen</span>(<span class="string">&quot;dat&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">        <span class="built_in">fread</span>(<span class="keyword">this</span>, <span class="built_in">sizeof</span>(A), <span class="number">1</span>, fp);    <span class="comment">// Non-compliant</span></span><br><span class="line">        <span class="built_in">fclose</span>(fp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中 A 是多态类型，save 函数将对象写入文件，fwrite 的第一个参数 this 被隐式转为 void*，不符合本规则要求。对象的虚表指针等数据一并被写入文件，但虚表指针是运行时数据不应被保存，load 函数从文件中读取对象便破坏了运行时数据。<br><br/><br><br/></p><h4 id="相关-191"><a href="#相关-191" class="headerlink" title="相关"></a>相关</h4><p>ID_nonPODFilling<br><br/></p><h4 id="参考-328"><a href="#参考-328" class="headerlink" title="参考"></a>参考</h4><p>CWE-843<br><br/><br><br/></p><h3 id="▌R12-9-不同的字符串类型之间不可直接转换"><a href="#▌R12-9-不同的字符串类型之间不可直接转换" class="headerlink" title="▌R12.9 不同的字符串类型之间不可直接转换"></a><span id="charwcharcast">▌R12.9 不同的字符串类型之间不可直接转换</span></h3><p>ID_charWCharCast&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: cast warning</p><hr/><p>char* 和 wchar_t* 直接转换并不进行字符集转换，属于语言运用错误，char*、wchar_t*、char16_t* 以及 char32_t* 之间均不可直接转换。  </p><p>本规则是 ID_castNoInheritance 的特化。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">wchar_t</span>* <span class="title">to_unicode</span><span class="params">(<span class="type">char</span>* str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">wchar_t</span>*)str;          <span class="comment">// Remarkably brave, but totally wrong</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码显然是错误的，应改用 iconv、MultiByteToWideChar 等字符集编码转换函数。  </p><p>由于 unsigned char* 一般针对二进制数据，unsigned char* 与其他字符串类型之间的转换可不受本规则约束，但 char* 不应作为二进制数据的类型，参见 ID_plainBinaryChar。<br><br/><br><br/></p><h4 id="相关-192"><a href="#相关-192" class="headerlink" title="相关"></a>相关</h4><p>ID_castNoInheritance<br>ID_plainBinaryChar<br><br/></p><h4 id="参考-329"><a href="#参考-329" class="headerlink" title="参考"></a>参考</h4><p>CWE-704<br>SEI CERT STR38-C<br><br/><br><br/></p><h3 id="▌R12-10-避免向对齐要求更严格的指针转换"><a href="#▌R12-10-避免向对齐要求更严格的指针转换" class="headerlink" title="▌R12.10 避免向对齐要求更严格的指针转换"></a><span id="stricteralignedcast">▌R12.10 避免向对齐要求更严格的指针转换</span></h3><p>ID_stricterAlignedCast&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: cast warning</p><hr/><p>访问不符合对齐要求的数据会导致标准未定义的行为。  </p><p>对象的存储地址与其占用空间的长度相关，如变量的地址往往是其长度的整数倍，这种机制称为“<a href="https://en.wikipedia.org/wiki/Data_structure_alignment">内存对齐</a>”，可提高处理器访问数据的效率，如果对象的地址不符合这种要求，访问对象的效率就会降低，在某些平台上甚至会崩溃，详见“<a href="https://en.wikipedia.org/wiki/Bus_error#Unaligned_access">unaligned access</a>”。  </p><p>每种对象类型都有一个“<a href="https://en.cppreference.com/w/c/language/object#Alignment">对齐要求（alignment requirement）</a>”，一般来说占用空间越大的类型，对齐要求越严格，如 char 对象可以存储在任意地址，而 int 对象的地址只应是 sizeof(int) 的整数倍，所以解引用由 char 指针转换成的 int 指针很可能会造成“<a href="https://en.wikipedia.org/wiki/Bus_error#Unaligned_access">unaligned access</a>”。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* p)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> c = *(<span class="type">char</span>*)p;            <span class="comment">// Compliant</span></span><br><span class="line">    <span class="type">long</span> n = *(<span class="type">long</span>*)(p + <span class="number">1</span>);      <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二进制数据转向结构化数据时，这种问题较为常见，例中 p + 1 与 long 型变量的对齐要求不同，不应直接转换。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* p)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> c = *(<span class="type">char</span>*)p;            <span class="comment">// Compliant</span></span><br><span class="line">    <span class="type">long</span> n;</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;n, p + <span class="number">1</span>, <span class="built_in">sizeof</span>(n));  <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 memcpy 等函数将低对齐要求的数据复制到高对齐要求的对象中，是避免相关问题的通用模式。<br><br/><br><br/></p><h4 id="相关-193"><a href="#相关-193" class="headerlink" title="相关"></a>相关</h4><p>ID_castNoInheritance<br><br/></p><h4 id="依据-178"><a href="#依据-178" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.3.2.3(7)-undefined<br>ISO&#x2F;IEC 9899:2011 6.3.2.3(7)-undefined<br><br/></p><h4 id="参考-330"><a href="#参考-330" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT EXP36-C<br><br/><br><br/></p><h3 id="▌R12-11-避免转换指向数组的指针"><a href="#▌R12-11-避免转换指向数组的指针" class="headerlink" title="▌R12.11 避免转换指向数组的指针"></a><span id="arraypointercast">▌R12.11 避免转换指向数组的指针</span></h3><p>ID_arrayPointerCast&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: cast warning</p><hr/><p>指针的逻辑大小与类型相关，转换指向数组的指针极易造成元素定位、空间计算等方面的错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123; <span class="type">int</span> x; &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span>: A &#123; <span class="type">int</span> y; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A* p, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        p[i].x = <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    B arr[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">foo</span>(arr, <span class="number">100</span>);   <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中派生类对象的数组被转换成了基类指针，foo 函数中对数组元素的定位将是错误的。  </p><p>另外，在回收动态分配的数组时，如果指针的类型与实际元素的类型不一致，会导致标准未定义的行为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A* p = new B[100];   // Non-compliant</span><br><span class="line">delete[] p;          // Undefined behavior</span><br></pre></td></tr></table></figure><p>这是一个危险的问题，本规则针对所有数组相关的隐式和显式类型转换。<br><br/><br><br/></p><h4 id="依据-179"><a href="#依据-179" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 5.3.5(3)-undefined<br>ISO&#x2F;IEC 14882:2011 5.3.5(3)-undefined<br><br/></p><h4 id="参考-331"><a href="#参考-331" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines C.152<br><br/><br><br/></p><h3 id="▌R12-12-避免转换函数指针"><a href="#▌R12-12-避免转换函数指针" class="headerlink" title="▌R12.12 避免转换函数指针"></a><span id="functionpointercast">▌R12.12 避免转换函数指针</span></h3><p>ID_functionPointerCast&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: cast warning</p><hr/><p>函数指针和不兼容的类型转换会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*<span class="type">fnp_t</span>)</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* p0 = (<span class="type">void</span>*)&amp;foo;    <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="type">fnp_t</span> p1 = (<span class="type">fnp_t</span>)&amp;foo;    <span class="comment">// Non-compliant</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">p1</span>(<span class="number">123</span>);                   <span class="comment">// Undefined behavior</span></span><br></pre></td></tr></table></figure><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fnp_t p = NULL;            // Compliant</span><br><span class="line"></span><br><span class="line">(void)p;                   // Let it go</span><br><span class="line">p = (fnp_t)dlsym(h, &quot;f&quot;);  // Let it go</span><br></pre></td></tr></table></figure><p>对函数指针进行 void 转换，或 dlsym、GetProcAddress 等动态导入函数的系统接口可不受本规则约束。<br><br/><br><br/></p><h4 id="依据-180"><a href="#依据-180" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.3.2.3(6 7 8)-undefined<br>ISO&#x2F;IEC 9899:1999 6.5.2.2(9)-undefined<br>ISO&#x2F;IEC 9899:2011 6.3.2.3(6 7 8)-undefined<br>ISO&#x2F;IEC 9899:2011 6.5.2.2(9)-undefined<br>ISO&#x2F;IEC 14882:2003 5.2.10(6)-undefined<br>ISO&#x2F;IEC 14882:2011 5.2.10(6)-undefined<br>ISO&#x2F;IEC 14882:2011 5.2.10(8)-implementation<br><br/></p><h4 id="参考-332"><a href="#参考-332" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2004 11.1<br>MISRA C 2012 11.1<br>MISRA C++ 2008 5-2-6<br><br/><br><br/></p><h3 id="▌R12-13-向下动态类型转换应使用-dynamic-cast"><a href="#▌R12-13-向下动态类型转换应使用-dynamic-cast" class="headerlink" title="▌R12.13 向下动态类型转换应使用 dynamic_cast"></a><span id="nondynamicdowncast">▌R12.13 向下动态类型转换应使用 dynamic_cast</span></h3><p>ID_nonDynamicDownCast&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: cast warning</p><hr/><p>向下动态类型转换应使用 dynamic_cast 以保证安全性。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; .... &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A &#123; .... &#125;;   <span class="comment">// A and B are polymorphic classes</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A* a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    B* b0 = (B*)a;                     <span class="comment">// Non-compliant</span></span><br><span class="line">    B* b1 = <span class="built_in">static_cast</span>&lt;B*&gt;(a);        <span class="comment">// Non-compliant</span></span><br><span class="line">    B* b2 = <span class="built_in">reinterpret_cast</span>&lt;B*&gt;(a);   <span class="comment">// Non-compliant</span></span><br><span class="line">    B* b3 = <span class="built_in">dynamic_cast</span>&lt;B*&gt;(a);       <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 a 实际指向的不是 B 类对象，使用 dynamic_cast 会得到一个空值便于进一步处理，其他方式的转换会得到无法判断对错的结果。  </p><p>注意，虚基类指针只能通过 dynamic_cast 转换为派生类指针，否则导致标准未定义的行为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class A &#123; .... &#125;;</span><br><span class="line">class B: virtual A &#123; .... &#125;;</span><br><span class="line">class C: virtual A &#123; .... &#125;;</span><br><span class="line">class D: B, C &#123; .... &#125;;</span><br><span class="line"></span><br><span class="line">void foo(A* a) &#123;</span><br><span class="line">    D* d0 = (D*)a;                 // Undefined behavior</span><br><span class="line">    D* d1 = dynamic_cast&lt;D*&gt;(a);   // Right</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应尽量减少向下类型转换，参见 ID_downCast。<br><br/><br><br/></p><h4 id="相关-194"><a href="#相关-194" class="headerlink" title="相关"></a>相关</h4><p>ID_downCast<br><br/></p><h4 id="依据-181"><a href="#依据-181" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 5.2.7<br>ISO&#x2F;IEC 14882:2003 5.2.9(5 8)-undefined<br>ISO&#x2F;IEC 14882:2011 5.2.7<br>ISO&#x2F;IEC 14882:2011 5.2.9(11 12)-undefined<br><br/></p><h4 id="参考-333"><a href="#参考-333" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines Type.2<br>MISRA C++ 2008 5-2-2<br><br/><br><br/></p><h3 id="▌R12-14-对-new-表达式不应进行类型转换"><a href="#▌R12-14-对-new-表达式不应进行类型转换" class="headerlink" title="▌R12.14 对 new 表达式不应进行类型转换"></a><span id="oddnewcast">▌R12.14 对 new 表达式不应进行类型转换</span></h3><p>ID_oddNewCast&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: cast warning</p><hr/><p>new 表达式本身是类型明确的，转换 new 表达式的类型也容易造成分配、访问或回收相关的错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* p = (<span class="type">int</span>*)<span class="keyword">new</span> <span class="type">char</span>[<span class="number">123</span>];  <span class="comment">// Non-compliant</span></span><br><span class="line">....</span><br><span class="line"><span class="keyword">delete</span>[] p;  <span class="comment">// What will happen?</span></span><br></pre></td></tr></table></figure><p>例中 char 数组被转为 int 数组，由于元素个数不兼容也会导致内存访问与回收的错误。<br><br/><br><br/></p><h4 id="相关-195"><a href="#相关-195" class="headerlink" title="相关"></a>相关</h4><p>ID_arrayPointerCast<br><br/><br><br/></p><h3 id="▌R12-15-不应存在多余的类型转换"><a href="#▌R12-15-不应存在多余的类型转换" class="headerlink" title="▌R12.15 不应存在多余的类型转换"></a><span id="redundantcast">▌R12.15 不应存在多余的类型转换</span></h3><p>ID_redundantCast&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: cast warning</p><hr/><p>多余的类型转换是没有意义的，往往意味着某种错误。  </p><p>不应出现下列情况：  </p><ul><li>原类型与转换后的类型完全相同  </li><li>非 void 转换的结果没有被读取</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)x;   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">bar</span><span class="params">(<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    (<span class="type">float</span>)y;        <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中参数 x 转换后的类型与转换前完全相同，参数 y 转换后没有被读取，均不符合要求。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">float</span>)x;   <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">bar</span><span class="params">(<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">float</span>)y;   <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可用 void 转换表示有意放弃读取，但对无返回值的函数不应再使用 void 转换，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">char foo();</span><br><span class="line">void bar();</span><br><span class="line"></span><br><span class="line">void baz(int x) &#123;</span><br><span class="line">    (void)x;        // Compliant</span><br><span class="line">    (void)foo();    // Compliant</span><br><span class="line">    (void)bar();    // Non-compliant, ‘(void)’ is redundant</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-334"><a href="#参考-334" class="headerlink" title="参考"></a>参考</h4><p>CWE-704<br><br/><br><br/></p><h3 id="▌R12-16-可用其他方式完成的转换不应使用-reinterpret-cast"><a href="#▌R12-16-可用其他方式完成的转换不应使用-reinterpret-cast" class="headerlink" title="▌R12.16 可用其他方式完成的转换不应使用 reinterpret_cast"></a><span id="unsuitablereinterpretcast">▌R12.16 可用其他方式完成的转换不应使用 reinterpret_cast</span></h3><p>ID_unsuitableReinterpretCast&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: cast warning</p><hr/><p>reinterpret_cast 将地址强行按另一种类型解释，不考虑转换需要的逻辑，可用 static_cast、dynamic_cast 完成的转换不应使用 reinterpret_cast。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123; <span class="type">int</span> a = <span class="number">1</span>; &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span> &#123; <span class="type">int</span> b = <span class="number">2</span>; &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">C</span>: A, B &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    C c;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">static_cast</span>&lt;B*&gt;(&amp;c)-&gt;b &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;B*&gt;(&amp;c)-&gt;b &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;  <span class="comment">// Non-compliant, what is output?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 2 1，如果想将派生类对象的地址 &amp;c 转为基类指针，应使用 static_cast 进行正确的偏移转换，使用 reinterpret_cast 不会进行偏移转换，得到的成员 b 不是真实的成员 b。<br><br/><br><br/></p><h4 id="相关-196"><a href="#相关-196" class="headerlink" title="相关"></a>相关</h4><p>ID_voidCast<br><br/></p><h4 id="依据-182"><a href="#依据-182" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 5.2.10(7)-unspecified<br>ISO&#x2F;IEC 14882:2011 5.2.10(7)-unspecified<br><br/></p><h4 id="参考-335"><a href="#参考-335" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines Type.1<br><br/><br><br/></p><h3 id="▌R12-17-合理使用-reinterpret-cast"><a href="#▌R12-17-合理使用-reinterpret-cast" class="headerlink" title="▌R12.17 合理使用 reinterpret_cast"></a><span id="forbidreinterpretcast">▌R12.17 合理使用 reinterpret_cast</span></h3><p>ID_forbidReinterpretCast&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: cast suggestion</p><hr/><p>reinterpret_cast 是一种不安全的类型转换，如果必须使用需提供合理的注释说明。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyData</span> &#123; .... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* p = <span class="built_in">read_from_file</span>(path);</span><br><span class="line">    MyData* dat = <span class="built_in">reinterpret_cast</span>&lt;MyData*&gt;(p);  <span class="comment">// Bad</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设例中 read_from_file 读取并返回文件的二进制数据，用 reinterpret_cast 将二进制数据直接转为对象是不安全的，妥善的做法是根据文件数据将对象的成员逐一构造出来，可参见 ID_stricterAlignedCast 介绍的方法，这样也可以及时发现并处理问题。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ext_type* ext_interface();   // External interface</span><br><span class="line"></span><br><span class="line">void foo() &#123;</span><br><span class="line">    auto* raw = ext_interface();</span><br><span class="line">    auto* dat = reinterpret_cast&lt;MyType*&gt;(raw);   // OK</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 ext_interface 是不受控制的外部接口，它的返回类型不完整或不可用，甚至返回的地址也不遵循 C++ 内存模型，需要将其“重解释”为另一种类型才能探究其内部结构和数据，MyType 是为了解决这个问题而自定义的类型，这种情况可以使用 reinterpret_cast 完成这种非常规转换，但需注明这种情况产生的原因。<br><br/><br><br/></p><h4 id="相关-197"><a href="#相关-197" class="headerlink" title="相关"></a>相关</h4><p>ID_forbidCStyleCast<br>ID_stricterAlignedCast<br><br/></p><h4 id="参考-336"><a href="#参考-336" class="headerlink" title="参考"></a>参考</h4><p>CWE-843<br>C++ Core Guidelines Pro.safety<br><br/><br><br/></p><h3 id="▌R12-18-在-C-代码中禁用-C-风格类型转换"><a href="#▌R12-18-在-C-代码中禁用-C-风格类型转换" class="headerlink" title="▌R12.18 在 C++ 代码中禁用 C 风格类型转换"></a><span id="forbidcstylecast">▌R12.18 在 C++ 代码中禁用 C 风格类型转换</span></h3><p>ID_forbidCStyleCast&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: cast suggestion</p><hr/><p>C 风格类型转换易造成数据丢失或逻辑错误，在 C++ 代码中应使用 static_cast、dynamic_cast 等方法代替 C 风格类型转换。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; .... &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123; .... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A* a)</span> </span>&#123;</span><br><span class="line">    B* b = (B*)a;  <span class="comment">// Non-compliant, an error value with no logical meaning</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(A* a)</span> </span>&#123;</span><br><span class="line">    B* b = <span class="built_in">dynamic_cast</span>&lt;B*&gt;(a);  <span class="comment">// Compliant, prevent errors at compile time</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 A 和 B 是两种不相关的类型，用 C 语言的转换方式是可以转换成功的，但并没有逻辑意义，在 C++ 代码中应使用 static_cast 或 dynamic_cast 等方法在编译时或运行时保障转换的有效性。<br><br/><br><br/></p><h4 id="参考-337"><a href="#参考-337" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.49<br>MISRA C++ 2008 5-2-4<br><br/><br><br/></p><h2 id="13-Buffer"><a href="#13-Buffer" class="headerlink" title="13. Buffer"></a><span id="buffer">13. Buffer</span></h2><h3 id="▌R13-1-避免缓冲区溢出"><a href="#▌R13-1-避免缓冲区溢出" class="headerlink" title="▌R13.1 避免缓冲区溢出"></a><span id="bufferoverflow">▌R13.1 避免缓冲区溢出</span></h3><p>ID_bufferOverflow&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: buffer warning</p><hr/><p>“缓冲区（buffer）”的本意是指内存等高速设备上的区域，程序在这种区域内接收或处理数据，之后再一并输出到网络或磁盘等低速环境，起到提高效率的作用，故称缓冲区。连续的内存区域均可称为缓冲区，在 C&#x2F;C++ 语言中对应数组等结构。  </p><p>缓冲区之外可能是程序的其他数据，也可能是函数返回地址、资源分配信息等重要数据，对缓冲区的越界读写往往意味着逻辑错误，而且会使程序遭到破坏。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(buf, s);   <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">foo</span>(<span class="built_in">userInput</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 userInput 函数返回用户输入的字符串，其长度不确定，而缓冲区 buf 的长度为 100 字节，如果用户输入超过这个长度就会使程序遭到破坏，这种问题称为“<a href="https://en.wikipedia.org/wiki/Buffer_overflow">缓冲区溢出（buffer overflow）</a>”，也是程序遭受攻击的常见原因。  </p><p>缓冲区溢出可造成严重危害，如：  </p><ul><li>破坏堆栈或段结构，扰乱程序执行  </li><li>改写关键信息，篡改程序行为  </li><li>注入并运行恶意代码  </li><li>攻击高权限进程获取非法权限</li></ul><p>所以将读写限定在缓冲区边界之内是十分重要的，示例代码应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">100</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">strncpy</span>(buf, s, <span class="built_in">sizeof</span>(buf) - <span class="number">1</span>);   <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>strncpy 与 strcpy 不同，当源字符串长度超过指定限制时会结束复制，但要注意 strncpy 对空字符的处理。<br><br/><br><br/></p><h4 id="相关-198"><a href="#相关-198" class="headerlink" title="相关"></a>相关</h4><p>ID_arrayIndexOverflow<br>ID_unsafeStringFunction<br><br/></p><h4 id="参考-338"><a href="#参考-338" class="headerlink" title="参考"></a>参考</h4><p>CWE-119<br>CWE-125<br>CWE-787<br>CWE-788<br><br/><br><br/></p><h3 id="▌R13-2-数组下标不可越界"><a href="#▌R13-2-数组下标不可越界" class="headerlink" title="▌R13.2 数组下标不可越界"></a><span id="arrayindexoverflow">▌R13.2 数组下标不可越界</span></h3><p>ID_arrayIndexOverflow&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: buffer error</p><hr/><p>数组下标超过数组大小范围会导致标准未定义的行为。  </p><p>设数组元素个数为 N，p 为指向数组第一个元素的指针，i 为整数，标准规定：  </p><ul><li>当 i &gt;&#x3D; 0 且 i &lt; N 时，p + i 的结果不会溢出  </li><li>当 i 等于 N 时，p + i 的结果不会溢出，但不可对其解引用  </li><li>当 i &lt; 0 或 i &gt; N 时，p + i 的结果可能会溢出  </li><li>使数组下标超出 [0, N] 的运算可能会使指针值溢出，导致未定义的行为</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> *p, *e;</span><br><span class="line"></span><br><span class="line">p = a + <span class="number">0</span>;    <span class="comment">// Compliant</span></span><br><span class="line">p = a + <span class="number">5</span>;    <span class="comment">// Compliant</span></span><br><span class="line">e = a + <span class="number">10</span>;   <span class="comment">// Compliant, won&#x27;t overflow</span></span><br><span class="line"></span><br><span class="line">p = a - <span class="number">1</span>;    <span class="comment">// Non-compliant, the array subscript is -1, which exceeds [0, N]</span></span><br><span class="line">e = a + <span class="number">11</span>;   <span class="comment">// Non-compliant, the array subscript is 11, which exceeds [0, N]</span></span><br><span class="line"></span><br><span class="line">--p;          <span class="comment">// Non-compliant, may overflow</span></span><br><span class="line">e++;          <span class="comment">// Non-compliant, may overflow</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-199"><a href="#相关-199" class="headerlink" title="相关"></a>相关</h4><p>ID_bufferOverflow<br><br/></p><h4 id="依据-183"><a href="#依据-183" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.5.6(8)-undefined<br>ISO&#x2F;IEC 9899:2011 6.5.6(8)-undefined<br>ISO&#x2F;IEC 14882:2003 5.7(5)-undefined<br>ISO&#x2F;IEC 14882:2011 5.7(5)-undefined<br><br/></p><h4 id="参考-339"><a href="#参考-339" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.103<br>SEI CERT ARR30-C<br><br/><br><br/></p><h3 id="▌R13-3-为缓冲区分配足够的空间"><a href="#▌R13-3-为缓冲区分配足够的空间" class="headerlink" title="▌R13.3 为缓冲区分配足够的空间"></a><span id="insufficientbuffer">▌R13.3 为缓冲区分配足够的空间</span></h3><p>ID_insufficientBuffer&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: buffer warning</p><hr/><p>为缓冲区分配足够的空间，避免溢出等问题。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span>* p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(s));  <span class="comment">// Non-compliant, should be ‘strlen(s) + 1’</span></span><br><span class="line">    <span class="built_in">strcpy</span>(p, s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, p);  <span class="comment">// Out of bounds, undefined behavior</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串以空字符结尾，在分配字符串空间时不可漏掉空字符的空间。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void bar() &#123;</span><br><span class="line">    int* p = (int*)malloc(123);  // Non-compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 bar 函数为 int 型数组分配了 123 个字节的空间，而 123 不能被 sizeof(int) 整除，最后一个元素会越界。虽然 malloc 函数返回已对齐的地址，但这种代码往往意味着 sizeof 因子的缺失。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">123</span> * <span class="built_in">sizeof</span>(<span class="type">int</span>));  <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-200"><a href="#相关-200" class="headerlink" title="相关"></a>相关</h4><p>ID_bufferOverflow<br><br/></p><h4 id="参考-340"><a href="#参考-340" class="headerlink" title="参考"></a>参考</h4><p>CWE-131<br>CWE-135<br><br/><br><br/></p><h3 id="▌R13-4-memset-等函数不应作用于非-POD-对象"><a href="#▌R13-4-memset-等函数不应作用于非-POD-对象" class="headerlink" title="▌R13.4 memset 等函数不应作用于非 POD 对象"></a><span id="nonpodfilling">▌R13.4 memset 等函数不应作用于非 POD 对象</span></h3><p>ID_nonPODFilling&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: buffer error</p><hr/><p>memset、memcpy、memmove 等具有填充功能的函数不应作用于非“<a href="https://en.cppreference.com/w/cpp/named_req/PODType">POD</a>”对象，否则会破坏其数据的内在关系。  </p><p>本规则是 ID_nonPODBinaryCast 的特化。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    ....</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">A</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));   <span class="comment">// Non-compliant, the ‘vfptr’ is corrupted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 memset 填充非 POD 对象，其虚函数表指针会被破坏，造成严重的运行时错误。<br><br/><br><br/></p><h4 id="相关-201"><a href="#相关-201" class="headerlink" title="相关"></a>相关</h4><p>ID_nonPODBinaryCast<br><br/></p><h4 id="参考-341"><a href="#参考-341" class="headerlink" title="参考"></a>参考</h4><p>CWE-463<br>C++ Core Guidelines SL.con.4<br>C++ Core Guidelines C.90<br><br/><br><br/></p><h3 id="▌R13-5-memset-等函数长度相关的参数不应有误"><a href="#▌R13-5-memset-等函数长度相关的参数不应有误" class="headerlink" title="▌R13.5 memset 等函数长度相关的参数不应有误"></a><span id="badlength">▌R13.5 memset 等函数长度相关的参数不应有误</span></h3><p>ID_badLength&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: buffer error</p><hr/><p>对于 memset、memcpy、memmove、memcmp 及同类函数，表示长度的参数不应存在常见笔误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">1024</span>, <span class="number">0</span>);  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>长度和填充值参数被写反是常见笔误，应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">1024</span>);  <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int arr[1024];</span><br><span class="line">memset(buf, 0, 1024);  // Rather suspicious</span><br><span class="line">memset(buf, 1, 123);   // Non-compliant</span><br></pre></td></tr></table></figure><p>memset 等函数的长度单位为字节，不应遗漏 sizeof 因子，应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">1024</span> * <span class="built_in">sizeof</span>(<span class="type">int</span>));  <span class="comment">// Compliant</span></span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">1</span>, <span class="number">123</span> * <span class="built_in">sizeof</span>(<span class="type">int</span>));   <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><p>又如（设 p 为对象指针）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memset(p, 0, sizeof(p));   // Non-compliant</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="built_in">sizeof</span>(*p));  <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><p>sizeof 作用于指针并不能获取到对象的大小，可参见 ID_sizeof_pointer 的进一步讨论。  </p><p>又如（设 a、b 是对象）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">memset(&amp;a, 0, sizeof(&amp;a));   // Non-compliant</span><br><span class="line">memcpy(&amp;a, &amp;b, sizeof(&amp;a));  // Non-compliant</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(&amp;a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));    <span class="comment">// Compliant</span></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;a, &amp;b, <span class="built_in">sizeof</span>(a));   <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><p>这是常见的复制粘贴错误。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (memcmp(&amp;a, &amp;b, sizeof(a) != 0)) &#123;  // Non-compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>长度参数不应为比较表达式，应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">memcmp</span>(&amp;a, &amp;b, <span class="built_in">sizeof</span>(a)) != <span class="number">0</span>) &#123;  <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>括号的错误嵌套也是常见的笔误。<br><br/><br><br/></p><h4 id="参考-342"><a href="#参考-342" class="headerlink" title="参考"></a>参考</h4><p>CWE-130<br>CWE-805<br><br/><br><br/></p><h3 id="▌R13-6-memset-等函数填充值相关的参数不应有误"><a href="#▌R13-6-memset-等函数填充值相关的参数不应有误" class="headerlink" title="▌R13.6 memset 等函数填充值相关的参数不应有误"></a><span id="valueoverflow">▌R13.6 memset 等函数填充值相关的参数不应有误</span></h3><p>ID_valueOverflow&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: buffer error</p><hr/><p>memset、memset_s 等函数的填充值参数会被转为 unsigned char 型，所以填充值不应超出 unsigned char 的取值范围。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">1024</span>, <span class="number">32</span>);  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中填充值为 1024，超出了 unsigned char 的范围，在实际代码中也可能是长度参数与填充值参数被写反了。<br><br/><br><br/></p><h4 id="依据-184"><a href="#依据-184" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.21.6.1(2)<br>ISO&#x2F;IEC 9899:2011 7.24.6.1(2)<br>ISO&#x2F;IEC 9899:2011 K.3.7.4.1(4)<br><br/></p><h4 id="参考-343"><a href="#参考-343" class="headerlink" title="参考"></a>参考</h4><p>CWE-130<br><br/><br><br/></p><h2 id="14-Pointer"><a href="#14-Pointer" class="headerlink" title="14. Pointer"></a><span id="pointer">14. Pointer</span></h2><h3 id="▌R14-1-避免空指针解引用"><a href="#▌R14-1-避免空指针解引用" class="headerlink" title="▌R14.1 避免空指针解引用"></a><span id="nullderefinscp">▌R14.1 避免空指针解引用</span></h3><p>ID_nullDerefInScp&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: pointer error</p><hr/><p>通过指针的值访问相应地址中的数据称为“解引用（dereference）”，空指针是没有指向任何数据的指针，空指针解引用是一种逻辑错误，会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (cond) &#123;</span><br><span class="line">        p = &amp;i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *p;    <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中指针 p 为空的状态可以到达解引用处，往往会引发“<a href="https://en.wikipedia.org/wiki/Segmentation_fault">段错误</a>”而导致崩溃。  </p><p>崩溃会给用户不好的体验，而且要注意如果崩溃可由外部输入引起，会被攻击者利用从而迫使程序无法正常工作，具有高可靠性要求的服务类程序更应该注意这一点，可参见“<a href="https://en.wikipedia.org/wiki/Denial-of-service_attack">拒绝服务攻击</a>”的进一步说明。对于客户端程序，也要防止攻击者对崩溃产生的“<a href="https://en.wikipedia.org/wiki/Core_dump">core dump</a>”进行恶意调试，避免泄露敏感数据，总之程序的健壮性与安全性是紧密相关的。  </p><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct T &#123;</span><br><span class="line">    int foo() &#123; return 0; &#125;</span><br><span class="line">    static int bar() &#123; return 1; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">T* p = nullptr;</span><br><span class="line">auto b = p-&gt;bar();   // Compliant, but bad, use ‘T::bar()’ instead</span><br><span class="line">auto c = p-&gt;foo();   // Non-compliant, even if it may not crash</span><br></pre></td></tr></table></figure><p>在 C++ 代码中通过指针访问静态成员不算作解引用，可不受本规则约束，但这种风格易引起维护者的疑虑而增加维护成本。  </p><p>注意，非静态成员函数是对象数据的访问方法，即使非静态成员函数没有实际地访问对象数据，也不应通过空指针调用非静态成员函数，否则仍属于逻辑错误，而且如果调用的是虚函数或虚基类的成员函数也会造成崩溃。<br><br/><br><br/></p><h4 id="依据-185"><a href="#依据-185" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.3.2.1(1)-undefined<br>ISO&#x2F;IEC 9899:1999 6.5.3.2(4)-undefined<br>ISO&#x2F;IEC 9899:2011 6.3.2.1(1)-undefined<br>ISO&#x2F;IEC 9899:2011 6.5.3.2(4)-undefined<br>ISO&#x2F;IEC 14882:2003 8.3.2(4)-undefined<br>ISO&#x2F;IEC 14882:2011 8.3.2(5)-undefined<br><br/></p><h4 id="参考-344"><a href="#参考-344" class="headerlink" title="参考"></a>参考</h4><p>CWE-476<br>C++ Core Guidelines ES.65<br><br/><br><br/></p><h3 id="▌R14-2-注意逻辑表达式内的空指针解引用"><a href="#▌R14-2-注意逻辑表达式内的空指针解引用" class="headerlink" title="▌R14.2 注意逻辑表达式内的空指针解引用"></a><span id="nullderefinexp">▌R14.2 注意逻辑表达式内的空指针解引用</span></h3><p>ID_nullDerefInExp&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: pointer error</p><hr/><p>在逻辑表达式中，需注意逻辑关系以及运算符优先级，不可出现空指针解引用等问题。  </p><p>示例（设 foo、bar 是指针 p 所指对象的非静态成员函数）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p || p-&gt;foo();  // Non-compliant</span><br></pre></td></tr></table></figure><p>当 p 为空时执行“||”的右子表达式，恰好使空指针被解引用。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &amp;&amp; p-&gt;foo() || p-&gt;bar();  // Non-compliant</span><br></pre></td></tr></table></figure><p>“&amp;&amp;”的优先级高于“||”，由“||”的左子表达式可知 p 可能为空，而右子表达式却没有限制，导致空指针被解引用。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;foo() &amp;&amp; p;  // Non-compliant</span><br></pre></td></tr></table></figure><p>这是颠倒了对指针的判断和解引用次序，属于语言运用错误。<br><br/><br><br/></p><h4 id="依据-186"><a href="#依据-186" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.3.2.1(1)-undefined<br>ISO&#x2F;IEC 9899:1999 6.5.3.2(4)-undefined<br>ISO&#x2F;IEC 9899:2011 6.3.2.1(1)-undefined<br>ISO&#x2F;IEC 9899:2011 6.5.3.2(4)-undefined<br>ISO&#x2F;IEC 14882:2003 8.3.2(4)-undefined<br>ISO&#x2F;IEC 14882:2011 8.3.2(5)-undefined<br><br/></p><h4 id="参考-345"><a href="#参考-345" class="headerlink" title="参考"></a>参考</h4><p>CWE-476<br>CWE-783<br>C++ Core Guidelines ES.65<br><br/><br><br/></p><h3 id="▌R14-3-不可解引用已被释放的指针"><a href="#▌R14-3-不可解引用已被释放的指针" class="headerlink" title="▌R14.3 不可解引用已被释放的指针"></a><span id="danglingderef">▌R14.3 不可解引用已被释放的指针</span></h3><p>ID_danglingDeref&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: pointer error</p><hr/><p>已被释放的指针指向失效的内存空间，再次对其解引用会导致标准未定义的行为，往往会造成严重错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">if</span> (cond) &#123;</span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">delete</span>[] p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[<span class="number">0</span>];  <span class="comment">// Non-compliant, ‘p’ may be deallocated</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本来指针 p 指向有效的内存空间，但由于某种原因相关内存被释放，p 的值不变但已无效，这种情况被形象地称为“指针悬挂”，未经初始化的指针和这种“被悬挂”的指针统称“野指针”，均指向无效地址不可被解引用。  </p><p>应避免内层作用域中的地址向外层传递，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int foo(int i) &#123;</span><br><span class="line">    int* p = &amp;i;</span><br><span class="line">    if (cond) &#123;</span><br><span class="line">        int j = 0;</span><br><span class="line">        ....</span><br><span class="line">        p = &amp;j;   // Bad practice</span><br><span class="line">    &#125;</span><br><span class="line">    return *p;    // Non-compliant, ‘p’ may be deallocated</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中局部变量 j 的地址被传给了外层作域中的 p，j 的生命周期结束后，p 为野指针。  </p><p>另外，在 C++ 代码中，应避免持有可被自动销毁的对象地址，如容器中对象的地址、智能指针所指对象的地址等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int bar(vector&lt;int&gt;&amp; v) &#123;</span><br><span class="line">    int* p = &amp;v.front();         // Bad practice</span><br><span class="line">    v.push_back(some_value);</span><br><span class="line">    return *p;                   // ‘p’ may be invalid</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中指针 p 记录了 vector 容器中对象的地址，根据 vector 容器持有对象的策略，随着元素的增加原有对象的地址可能不再有效。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int baz() &#123;</span><br><span class="line">    auto u = make_unique&lt;int&gt;();</span><br><span class="line">    auto p = u.get();            // Bad practice</span><br><span class="line">    u = make_unique&lt;int&gt;();</span><br><span class="line">    return *p;                   // ‘p’ is invalid</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中指针 p 记录了 unique_ptr 所指对象的地址，当 unique_ptr 指向新的对象时，原对象的地址不再有效。<br><br/><br><br/></p><h4 id="相关-202"><a href="#相关-202" class="headerlink" title="相关"></a>相关</h4><p>ID_illAccess<br>ID_localAddressFlowOut<br>ID_illLifetime<br><br/></p><h4 id="依据-187"><a href="#依据-187" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.5.3.2(4)-undefined<br>ISO&#x2F;IEC 9899:2011 6.5.3.2(4)-undefined<br><br/></p><h4 id="参考-346"><a href="#参考-346" class="headerlink" title="参考"></a>参考</h4><p>CWE-822<br>CWE-825<br>C++ Core Guidelines ES.65<br>SEI CERT EXP54-CPP<br><br/><br><br/></p><h3 id="▌R14-4-避免无效的空指针检查"><a href="#▌R14-4-避免无效的空指针检查" class="headerlink" title="▌R14.4 避免无效的空指针检查"></a><span id="invalidnullcheck">▌R14.4 避免无效的空指针检查</span></h3><p>ID_invalidNullCheck&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: pointer warning</p><hr/><p>当指针的值一定不为空时，再对其进行检查是没有意义的，往往意味着逻辑错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="type">int</span>* p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">100</span>]) &#123;   <span class="comment">// Non-compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;   <span class="comment">// Invalid</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标准规定默认 new 运算符的返回值不会为空，如果分配失败则抛出异常，所以这种检查和相关错误处理是无效的。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="type">int</span>* p = <span class="built_in">new</span>(std::nothrow) <span class="type">int</span>[<span class="number">100</span>]) &#123;   <span class="comment">// Compliant</span></span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;   <span class="comment">// OK</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (p) &#123;        // Meaningless</span><br><span class="line">    delete p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于可接受空指针的接口，不必总在调用前判断指针是否为空，否则会使代码变得繁琐。delete 关键字或 free 函数可以作用于空指针，调用之前的检查是没有意义的。<br><br/><br><br/></p><h4 id="相关-203"><a href="#相关-203" class="headerlink" title="相关"></a>相关</h4><p>ID_repeatedNullCheck<br><br/></p><h4 id="依据-188"><a href="#依据-188" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 18.4<br>ISO&#x2F;IEC 14882:2011 18.6<br><br/><br><br/></p><h3 id="▌R14-5-不应重复检查指针是否为空"><a href="#▌R14-5-不应重复检查指针是否为空" class="headerlink" title="▌R14.5 不应重复检查指针是否为空"></a><span id="repeatednullcheck">▌R14.5 不应重复检查指针是否为空</span></h3><p>ID_repeatedNullCheck&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: pointer warning</p><hr/><p>重复的空指针检查是不必要的，使代码显得繁琐，且干扰编译器优化。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p) &#123;   <span class="comment">// Non-compliant, ‘p’ is not nullptr</span></span><br><span class="line">        ....</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ....   <span class="comment">// Unreachable</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-204"><a href="#相关-204" class="headerlink" title="相关"></a>相关</h4><p>ID_invalidNullCheck<br><br/><br><br/></p><h3 id="▌R14-6-不应将非零常量值赋值给指针"><a href="#▌R14-6-不应将非零常量值赋值给指针" class="headerlink" title="▌R14.6 不应将非零常量值赋值给指针"></a><span id="fixedaddrtopointer">▌R14.6 不应将非零常量值赋值给指针</span></h3><p>ID_fixedAddrToPointer&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: pointer warning</p><hr/><p>固定地址是不可移植的，且存在安全隐患。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">void</span>* badAddr = (<span class="type">void</span>*)<span class="number">0xffffffff</span>;  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>示例代码的本意是声明一个表示无效地址的值，但在 64 位系统中这个地址可能是有效的。  </p><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typedef int (*fp_t)(int);</span><br><span class="line">fp_t fp = (fp_t)0x1234abcd;  // Non-compliant</span><br><span class="line">int res = (*fp)(123);        // Unsafe</span><br></pre></td></tr></table></figure><p>示例代码假设在特定地址可以找到特定的函数，将该地址赋给一个指针并调用，这种假设是不可移植的，也可能本身就是错误的，会导致崩溃，而且函数地址往往也属于敏感信息，不应被写入代码，否则一旦泄露，攻击者可以更改预期地址上的数据，导致恶意代码被执行。  </p><p>某些框架或系统会以 -1 表示无效地址，但不具备通用性，审计工具不妨通过配置决定是否放过。  </p><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define DEVICE_BASE ((volatile Dev*)0x1234)</span><br><span class="line"></span><br><span class="line">volatile Dev* p = DEVICE_BASE;  // Let it go if the address is right</span><br></pre></td></tr></table></figure><p>如果固定地址受环境支持，如固定的设备地址，可不受本规则约束，但应通过接口获取地址，避免将常量地址写死在代码中。<br><br/><br><br/></p><h4 id="配置-36"><a href="#配置-36" class="headerlink" title="配置"></a>配置</h4><p>allowMinusOneAsPointerValue：是否允许 -1 作为指针的值<br><br/></p><h4 id="相关-205"><a href="#相关-205" class="headerlink" title="相关"></a>相关</h4><p>ID_addressExposure<br>ID_plainSensitiveInfo<br>ID_ptrIntCast<br><br/></p><h4 id="参考-347"><a href="#参考-347" class="headerlink" title="参考"></a>参考</h4><p>CWE-587<br><br/><br><br/></p><h3 id="▌R14-7-不应使用常量-0-表示空指针"><a href="#▌R14-7-不应使用常量-0-表示空指针" class="headerlink" title="▌R14.7 不应使用常量 0 表示空指针"></a><span id="zeroasptrvalue">▌R14.7 不应使用常量 0 表示空指针</span></h3><p>ID_zeroAsPtrValue&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: pointer suggestion</p><hr/><p>在 C 代码中应使用 NULL 表示空指针，在 C++ 代码中应使用 nullptr 表示空指针。  </p><p>标准允许 0、’\0’、false、1 - 1 等值为 0 的常量表达式作为空指针常量，但易与非指针混淆，不利于阅读和维护。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* p;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line">p = <span class="number">0</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="built_in">foo</span>(<span class="number">0</span>);  <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="literal">NULL</span>;      <span class="comment">// Compliant in C</span></span><br><span class="line"><span class="built_in">foo</span>(<span class="literal">nullptr</span>);  <span class="comment">// Compliant in C++</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-206"><a href="#相关-206" class="headerlink" title="相关"></a>相关</h4><p>ID_oddPtrBoolAssignment<br>ID_oddPtrCharAssignment<br>ID_oddPtrBoolComparison<br>ID_oddPtrCharComparison<br><br/></p><h4 id="依据-189"><a href="#依据-189" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.3.2.3(3)<br>ISO&#x2F;IEC 9899:2011 6.3.2.3(3)<br>ISO&#x2F;IEC 14882:2003 4.10(1)<br>ISO&#x2F;IEC 14882:2011 4.10(1)<br><br/></p><h4 id="参考-348"><a href="#参考-348" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.47<br>MISRA C++ 2008 4-10-2<br><br/><br><br/></p><h3 id="▌R14-8-不应使用-false-对指针赋值"><a href="#▌R14-8-不应使用-false-对指针赋值" class="headerlink" title="▌R14.8 不应使用 false 对指针赋值"></a><span id="oddptrboolassignment">▌R14.8 不应使用 false 对指针赋值</span></h3><p>ID_oddPtrBoolAssignment&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: pointer warning</p><hr/><p>用 false 对指针赋值是非常怪异的，会误导维护者，而且也很可能是逻辑错误。  </p><p>本规则是 ID_zeroAsPtrValue 的特化。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">bool</span>* p)</span> </span>&#123;</span><br><span class="line">    p = <span class="literal">false</span>;        <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">bool</span>* p)</span> </span>&#123;</span><br><span class="line">    *p = <span class="literal">false</span>;       <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-207"><a href="#相关-207" class="headerlink" title="相关"></a>相关</h4><p>ID_zeroAsPtrValue<br><br/></p><h4 id="参考-349"><a href="#参考-349" class="headerlink" title="参考"></a>参考</h4><p>CWE-351<br><br/><br><br/></p><h3 id="▌R14-9-不应使用-‘-0’-等字符常量对指针赋值"><a href="#▌R14-9-不应使用-‘-0’-等字符常量对指针赋值" class="headerlink" title="▌R14.9 不应使用 ‘\0’ 等字符常量对指针赋值"></a><span id="oddptrcharassignment">▌R14.9 不应使用 ‘\0’ 等字符常量对指针赋值</span></h3><p>ID_oddPtrCharAssignment&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: pointer warning</p><hr/><p>用 ‘\0’、L’\0’、u’\0’、U’\0’ 等字符常量对指针赋值是非常怪异的，往往意味着逻辑错误。  </p><p>本规则是 ID_zeroAsPtrValue 的特化。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_terminate</span><span class="params">(<span class="type">char</span>* p)</span> </span>&#123;</span><br><span class="line">    p = <span class="string">&#x27;\0&#x27;</span>;                   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_terminate</span><span class="params">(<span class="type">char</span>* p)</span> </span>&#123;</span><br><span class="line">    *p = <span class="string">&#x27;\0&#x27;</span>;                  <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-208"><a href="#相关-208" class="headerlink" title="相关"></a>相关</h4><p>ID_zeroAsPtrValue<br><br/></p><h4 id="参考-350"><a href="#参考-350" class="headerlink" title="参考"></a>参考</h4><p>CWE-351<br><br/><br><br/></p><h3 id="▌R14-10-指针不应与-false-比较大小"><a href="#▌R14-10-指针不应与-false-比较大小" class="headerlink" title="▌R14.10 指针不应与 false 比较大小"></a><span id="oddptrboolcomparison">▌R14.10 指针不应与 false 比较大小</span></h3><p>ID_oddPtrBoolComparison&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: pointer warning</p><hr/><p>指针与 false 比较大小是非常怪异的，往往是某种笔误。  </p><p>本规则是 ID_zeroAsPtrValue 的特化。  </p><p>示例（设 p 为指针）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p == false  // Non-compliant</span><br><span class="line">p != false  // Non-compliant</span><br></pre></td></tr></table></figure><p>如果判断指针是否为空，只应将指针与 NULL 或 nullptr 比较，其他常量均不符合要求。<br><br/><br><br/></p><h4 id="相关-209"><a href="#相关-209" class="headerlink" title="相关"></a>相关</h4><p>ID_zeroAsPtrValue<br><br/></p><h4 id="参考-351"><a href="#参考-351" class="headerlink" title="参考"></a>参考</h4><p>CWE-1025<br><br/><br><br/></p><h3 id="▌R14-11-指针不应与-‘-0’-等字符常量比较大小"><a href="#▌R14-11-指针不应与-‘-0’-等字符常量比较大小" class="headerlink" title="▌R14.11 指针不应与 ‘\0’ 等字符常量比较大小"></a><span id="oddptrcharcomparison">▌R14.11 指针不应与 ‘\0’ 等字符常量比较大小</span></h3><p>ID_oddPtrCharComparison&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: pointer warning</p><hr/><p>指针与 ‘\0’、L’\0’、u’\0’、U’\0’ 等字符常量比较大小是非常怪异的，往往是某种笔误。  </p><p>本规则是 ID_zeroAsPtrValue 的特化。  </p><p>示例（设 p 为指针）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (p == &#x27;\0&#x27;) &#123;   // Non-compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况很有可能是漏写了 * 号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (*p == &#x27;\0&#x27;) &#123;   // Non-compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>否则只应将指针与 NULL 或 nullptr 比较。<br><br/><br><br/></p><h4 id="相关-210"><a href="#相关-210" class="headerlink" title="相关"></a>相关</h4><p>ID_zeroAsPtrValue<br><br/></p><h4 id="参考-352"><a href="#参考-352" class="headerlink" title="参考"></a>参考</h4><p>CWE-1025<br><br/><br><br/></p><h3 id="▌R14-12-指针与空指针不应比较大小"><a href="#▌R14-12-指针与空指针不应比较大小" class="headerlink" title="▌R14.12 指针与空指针不应比较大小"></a><span id="oddptrzerocomparison">▌R14.12 指针与空指针不应比较大小</span></h3><p>ID_oddPtrZeroComparison&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: pointer warning</p><hr/><p>指针与空指针比较大小往往意味着逻辑错误，而且只有指向同一数组或对象的指针才能比较大小，否则会导致标准未定义的行为，空指针不指向任何数组或对象，故不应比较指针与空指针的大小。  </p><p>指针与空指针之间只应使用 &#x3D;&#x3D; 或 !&#x3D; 比较，其他比较运算符均不符合要求。  </p><p>本规则是 ID_illPtrDiff 的特化。  </p><p>示例（设 p 为指针）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p &lt; NULL       // Non-compliant, may be always false</span><br><span class="line">p &gt;= 0         // Non-compliant, may be always true</span><br><span class="line">p &gt; nullptr    // Non-compliant, use p != nullptr instead</span><br><span class="line">p &lt;= 0         // Non-compliant, use p == 0 instead</span><br><span class="line"></span><br><span class="line">p == NULL      // Compliant</span><br><span class="line">p != nullptr   // Compliant</span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-211"><a href="#相关-211" class="headerlink" title="相关"></a>相关</h4><p>ID_illPtrDiff<br><br/></p><h4 id="依据-190"><a href="#依据-190" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.5.8(5)-undefined<br>ISO&#x2F;IEC 9899:2011 6.5.8(5)-undefined<br><br/></p><h4 id="参考-353"><a href="#参考-353" class="headerlink" title="参考"></a>参考</h4><p>CWE-1025<br><br/><br><br/></p><h3 id="▌R14-13-不应判断-this-指针是否为空"><a href="#▌R14-13-不应判断-this-指针是否为空" class="headerlink" title="▌R14.13 不应判断 this 指针是否为空"></a><span id="this_zerocomparison">▌R14.13 不应判断 this 指针是否为空</span></h3><p>ID_this_zeroComparison&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: pointer warning</p><hr/><p>正常情况下 this 指针不会为空，而且判断 this 指针是否为空会影响编译器对 this 指针的优化，造成难以预料的后果。  </p><p>在某些环境中通过空指针调用非静态成员函数时，this 指针可能为空，但这并不符合标准。值得强调的是，任何情况下都不应逃避解引用空指针造成的问题。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>? x: <span class="number">0</span>;  <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* p = <span class="built_in">foo</span>();</span><br><span class="line"><span class="comment">// Suppose an error has occurred and a null pointer is returned</span></span><br><span class="line">cout &lt;&lt; p-&gt;<span class="built_in">getX</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><p>假设 foo 函数不应返回空指针，而某个错误导致其返回了空指针，程序本应崩溃，而 getX 函数却逃避了崩溃，这非但不能真正地解决问题，反而使问题难以定位，使程序难以调试，大大降低了可维护性。<br><br/><br><br/></p><h4 id="参考-354"><a href="#参考-354" class="headerlink" title="参考"></a>参考</h4><p>CWE-1025<br><br/><br><br/></p><h3 id="▌R14-14-析构函数中不可使用-delete-this"><a href="#▌R14-14-析构函数中不可使用-delete-this" class="headerlink" title="▌R14.14 析构函数中不可使用 delete this"></a><span id="this_deleteindestructor">▌R14.14 析构函数中不可使用 delete this</span></h3><p>ID_this_deleteInDestructor&emsp;&emsp;&emsp;&emsp;&nbsp;:boom: pointer error</p><hr/><p>析构函数中不可使用 delete this，否则造成无限递归。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>;  <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-355"><a href="#参考-355" class="headerlink" title="参考"></a>参考</h4><p>CWE-674<br><br/><br><br/></p><h3 id="▌R14-15-禁用-delete-this"><a href="#▌R14-15-禁用-delete-this" class="headerlink" title="▌R14.15 禁用 delete this"></a><span id="this_forbiddeletethis">▌R14.15 禁用 delete this</span></h3><p>ID_this_forbidDeleteThis&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: pointer suggestion</p><hr/><p>使用 delete this 须保证：  </p><ul><li>对象是用 new 创建的，但不能用 new[] 或 replacement new  </li><li>使用 delete this 之后不能再访问相关非静态成员  </li><li>不能在析构函数中使用 delete this</li></ul><p>由于限制条件易被打破，对框架以及语言工具之外的业务类或算法类代码建议禁用 delete this。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    ....</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span>* p = <span class="keyword">new</span> A;</span><br><span class="line">p-&gt;<span class="built_in">foo</span>();              <span class="comment">// Looks innocent</span></span><br><span class="line"></span><br><span class="line">p = <span class="keyword">new</span> A[<span class="number">10</span>];</span><br><span class="line">p-&gt;<span class="built_in">foo</span>();              <span class="comment">// Memory is still leaking</span></span><br></pre></td></tr></table></figure><p>如果有必要使用 delete this，应将类的析构函数设为非 public，使对象只能通过 new 创建，并确保执行 delete this 后 this 指针再也不会被访问，而且不能用 new[] 创建数组，否则仍然存在内存泄漏等问题。<br><br/><br><br/><br><br/></p><h3 id="▌R14-16-判断-dynamic-cast-转换是否成功"><a href="#▌R14-16-判断-dynamic-cast-转换是否成功" class="headerlink" title="▌R14.16 判断 dynamic_cast 转换是否成功"></a><span id="nullderefdynamiccast">▌R14.16 判断 dynamic_cast 转换是否成功</span></h3><p>ID_nullDerefDynamicCast&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: pointer warning</p><hr/><p>dynamic_cast 转换指针失败会返回空指针，转换引用失败会抛出异常，如果不作判断则失去了使用 dynamic_cast 的意义。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A* a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">dynamic_cast</span>&lt;B*&gt;(a)-&gt;<span class="built_in">foo</span>();  <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A* a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span>* b = <span class="built_in">dynamic_cast</span>&lt;B*&gt;(a)) &#123;  <span class="comment">// Compliant</span></span><br><span class="line">        b-&gt;<span class="built_in">foo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 dynamic_cast 会产生一定的开销，如果不对其结果作判断，还不如使用 static_cast 等转换，但本规则集合不建议采用非 dynamic_cast 的动态类型转换，参见 ID_nonDynamicDownCast。<br><br/><br><br/></p><h4 id="相关-212"><a href="#相关-212" class="headerlink" title="相关"></a>相关</h4><p>ID_nonDynamicDownCast<br><br/></p><h4 id="依据-191"><a href="#依据-191" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 5.2.7(9)<br>ISO&#x2F;IEC 14882:2011 5.2.7(9)<br><br/></p><h4 id="参考-356"><a href="#参考-356" class="headerlink" title="参考"></a>参考</h4><p>CWE-476<br>C++ Core Guidelines C.148<br><br/><br><br/></p><h3 id="▌R14-17-指针在释放后应置空"><a href="#▌R14-17-指针在释放后应置空" class="headerlink" title="▌R14.17 指针在释放后应置空"></a><span id="missingresetnull">▌R14.17 指针在释放后应置空</span></h3><p>ID_missingResetNull&emsp;&emsp;&emsp;&emsp;&nbsp;:bulb: pointer suggestion</p><hr/><p>内存空间被回收后相关指针不再有效，这时应将指针设为空指针，可避免重复释放等问题，如果后续对指针有错误访问，也可使问题立即显现出来，便于修正。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    <span class="type">int</span>* p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">123</span>];</span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   ~<span class="built_in">T</span>() &#123;</span><br><span class="line">        <span class="built_in">dealloc</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dealloc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span>[] p;</span><br><span class="line">        p = <span class="literal">nullptr</span>;    <span class="comment">// Good</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例中 dealloc 函数释放指针 p 后将其置为空指针，如果 dealloc 函数被外界反复调用也没有问题。本规则是对“指针悬挂”等问题的有效措施，参见 ID_danglingDeref。<br><br/><br><br/></p><h4 id="相关-213"><a href="#相关-213" class="headerlink" title="相关"></a>相关</h4><p>ID_danglingDeref<br>ID_explicitDtorCall<br><br/></p><h4 id="参考-357"><a href="#参考-357" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT MEM01-C<br><br/><br><br/></p><h2 id="15-Interruption"><a href="#15-Interruption" class="headerlink" title="15. Interruption"></a><span id="interruption">15. Interruption</span></h2><h3 id="▌R15-1-避免由信号处理产生的数据竞争"><a href="#▌R15-1-避免由信号处理产生的数据竞争" class="headerlink" title="▌R15.1 避免由信号处理产生的数据竞争"></a><span id="sig_dataraces">▌R15.1 避免由信号处理产生的数据竞争</span></h3><p>ID_sig_dataRaces&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: interruption warning</p><hr/><p>异步信号处理函数的调用会随时打断主程序的流程，当处理函数返回后，主程序在被打断的位置继续执行，这种方式称为“<a href="https://en.wikipedia.org/wiki/Interrupt">中断（interrupt）</a>”，与执行非并发的线程相似，但没有锁等同步机制，而且信号处理函数本身也可能被中断，所以在信号处理函数中访问共享数据应格外小心。  </p><p>异步信号处理函数的安全模式：  </p><ul><li>调用“<a href="https://man7.org/linux/man-pages/man7/signal-safety.7.html">异步信号安全</a>”函数执行清理或结束进程，如 abort、_Exit 等  </li><li>对 volatile sig_atomic_t 等类型的共享对象赋值，主程序周期性地检查共享对象并执行相应动作  </li><li>利用 sigsetjmp、siglongjmp 等函数使流程跳转到主程序中的预定位置  </li><li>通过管道等方式与主程序通信，向管道写入一个字节，主程序监控该管道并执行相应动作</li></ul><p>只应选择其中一种方式，且尽量避免访问共享数据，否则对共享数据的错误处理会使程序产生未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> msg[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handler</span><span class="params">(<span class="type">int</span> signum)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(msg, <span class="string">&quot;SIGINT received&quot;</span>);      <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">signal</span>(SIGINT, handler);</span><br><span class="line">    <span class="built_in">strcpy</span>(msg, <span class="string">&quot;No signal received&quot;</span>);   <span class="comment">// Race condition</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中信号处理函数和主程序均访问了共享数据，handler 中的 strcpy 可以在 main 中的 strcpy 执行之前或中途执行，造成非预期的结果。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="type">sig_atomic_t</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handler</span><span class="params">(<span class="type">int</span> signum)</span> </span>&#123;</span><br><span class="line">    flag = <span class="number">1</span>;                <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">signal</span>(SIGINT, handler);</span><br><span class="line">    ....</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s received\n&quot;</span>, flag? <span class="string">&quot;SIGINT&quot;</span>: <span class="string">&quot;No signal&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 SIG_ATOMIC_MIN 和 SIG_ATOMIC_MAX 之间的值对 sig_atomic_t 类型的对象赋值可以保证原子性，超出范围的赋值，或赋值之外的操作不能保证原子性，需要避免。<br><br/><br><br/></p><h4 id="相关-214"><a href="#相关-214" class="headerlink" title="相关"></a>相关</h4><p>ID_dataRaces<br>ID_sig_nonAsyncSafeCall<br><br/></p><h4 id="依据-192"><a href="#依据-192" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.14.1.1(5)-undefined<br>ISO&#x2F;IEC 9899:2011 7.14.1.1(5)-undefined<br>ISO&#x2F;IEC 14882:2003 1.9(9)-undefined<br>ISO&#x2F;IEC 14882:2011 1.9(6)-undefined<br><br/></p><h4 id="参考-358"><a href="#参考-358" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT SIG31-C<br><br/><br><br/></p><h3 id="▌R15-2-处理信号时避免使用非异步信号安全函数"><a href="#▌R15-2-处理信号时避免使用非异步信号安全函数" class="headerlink" title="▌R15.2 处理信号时避免使用非异步信号安全函数"></a><span id="sig_nonasyncsafecall">▌R15.2 处理信号时避免使用非异步信号安全函数</span></h3><p>ID_sig_nonAsyncSafeCall&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: interruption warning</p><hr/><p>不处理共享数据也不会影响程序状态的函数，以及不会被信号中断的函数称为“<a href="https://man7.org/linux/man-pages/man7/signal-safety.7.html">异步信号安全</a>”函数，处理信号时只应使用这种函数。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handler</span><span class="params">(<span class="type">int</span> signum)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;....&quot;</span>);          <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">signal</span>(SIGINT, handler);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;....&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>printf 不是异步信号安全函数，例中两个 printf 的输出结果可能会交织在一起，甚至会产生运行时错误。<br><br/><br><br/></p><h4 id="相关-215"><a href="#相关-215" class="headerlink" title="相关"></a>相关</h4><p>ID_sig_dataRaces<br>ID_dataRaces<br><br/></p><h4 id="依据-193"><a href="#依据-193" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.14.1.1(5)-undefined<br>ISO&#x2F;IEC 9899:2011 7.14.1.1(5)-undefined<br><br/></p><h4 id="参考-359"><a href="#参考-359" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT SIG30-C<br><br/><br><br/></p><h3 id="▌R15-3-SIGFPE、SIGILL、SIGSEGV-等信号的处理函数不可返回"><a href="#▌R15-3-SIGFPE、SIGILL、SIGSEGV-等信号的处理函数不可返回" class="headerlink" title="▌R15.3 SIGFPE、SIGILL、SIGSEGV 等信号的处理函数不可返回"></a><span id="sig_illreturn">▌R15.3 SIGFPE、SIGILL、SIGSEGV 等信号的处理函数不可返回</span></h3><p>ID_sig_illReturn&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: interruption warning</p><hr/><p>与计算异常相关的信号由不可恢复的错误引起，相关信号处理函数应终止程序的执行，否则导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handler</span><span class="params">(<span class="type">int</span> signum)</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span>;   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">signal</span>(SIGFPE, handler);</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当发生除 0 等计算异常时，程序会收到 SIGFPE 信号，这种信号对应的处理函数应使用 abort、_Exit 等函数终止程序的执行，不可正常返回，否则可能会造成更严重的损失。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">handler</span><span class="params">(<span class="type">int</span> signum)</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    _Exit(<span class="number">1</span>);   <span class="comment">// Compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或使用 sigsetjmp 和 siglongjmp 使流程跳转到主程序中的预定位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sigjmp_buf buf;</span><br><span class="line"></span><br><span class="line">void handler(int x) &#123;</span><br><span class="line">    siglongjmp(buf, 1);   // Compliant</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    signal(SIGFPE, handler);</span><br><span class="line">    if (sigsetjmp(buf, 1)) &#123;</span><br><span class="line">        ....                   // #1, Normal procedure</span><br><span class="line">        return 0;              // Normal exit</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        ....                   // #2, handle error</span><br><span class="line">        return 1;              // Abnormal exit</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种模式下，<code>#1</code> 实现程序的功能，如果收到了 SIGFPE 信号，流程就会跳转到 <code>#2</code>。<br><br/><br><br/></p><h4 id="依据-194"><a href="#依据-194" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.14.1.1(3)-undefined<br>ISO&#x2F;IEC 9899:2011 7.14.1.1(3)-undefined<br><br/></p><h4 id="参考-360"><a href="#参考-360" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT SIG35-C<br><br/><br><br/></p><h3 id="▌R15-4-禁用-signal-函数"><a href="#▌R15-4-禁用-signal-函数" class="headerlink" title="▌R15.4 禁用 signal 函数"></a><span id="forbidsignalfunction">▌R15.4 禁用 signal 函数</span></h3><p>ID_forbidSignalFunction&emsp;&emsp;&emsp;&emsp;&nbsp;:no_entry: interruption suggestion</p><hr/><p>signal 函数具有一定的局限性，且各平台实现差异较大，可用 sigaction 函数代替。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handler</span><span class="params">(<span class="type">int</span> signum)</span> </span>&#123;     <span class="comment">// #1</span></span><br><span class="line">    <span class="built_in">signal</span>(signum, handler);   <span class="comment">// #2, non-compliant, race condition</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设例中 handler 是某种信号的处理函数。在某些平台上，signal 指定的函数只能被执行一次，所以需要在 handler 中再次调用 signal 指定处理函数，但如果程序在运行到 <code>#1</code> 和 <code>#2</code> 之间时收到同样的信号，会执行不符合预期的默认处理函数，这是一种竞态条件；而在另一些平台上，signal 指定的函数会一直有效，handler 再次调用 signal 是多余的。  </p><p>sigaction 函数不存在这些问题，也可提供更多的功能，但要注意该函数尚未在语言标准中定义。<br><br/><br><br/></p><h4 id="相关-216"><a href="#相关-216" class="headerlink" title="相关"></a>相关</h4><p>ID_signalInMultiThreading<br>ID_implementationDefinedFunction<br><br/></p><h4 id="依据-195"><a href="#依据-195" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.14.1.1(3)-implementation<br>ISO&#x2F;IEC 9899:2011 7.14.1.1(3)-implementation<br>ISO&#x2F;IEC 9899:2011 7.14.1.1(7)-undefined<br><br/></p><h4 id="参考-361"><a href="#参考-361" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 21.5<br>SEI CERT SIG01-C<br>SEI CERT SIG34-C<br><br/><br><br/></p><h2 id="16-Concurrency"><a href="#16-Concurrency" class="headerlink" title="16. Concurrency"></a><span id="concurrency">16. Concurrency</span></h2><h3 id="▌R16-1-访问共享数据应遵循合理的同步机制"><a href="#▌R16-1-访问共享数据应遵循合理的同步机制" class="headerlink" title="▌R16.1 访问共享数据应遵循合理的同步机制"></a><span id="dataraces">▌R16.1 访问共享数据应遵循合理的同步机制</span></h3><p>ID_dataRaces&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: concurrency warning</p><hr/><p>如果一份数据同时被多个线程、进程或中断处理过程读写，会产生不确定的结果，这种情况称为“<a href="https://en.cppreference.com/w/cpp/language/memory_model#Threads_and_data_races">数据竞争（data race）</a>”，会导致标准未定义的行为，应落实合理的同步机制来控制访问共享数据的先后顺序。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> id++;        <span class="comment">// Data races in multithreading</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数意在每次被调用都可以返回不同的整数，但如果多个线程同时执行 id++，会使读取、计算、写入等步骤交织在一起，得到错误的结果，这是一种典型的数据竞争。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="type">static</span> atomic&lt;<span class="type">int</span>&gt; <span class="title">id</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> id.<span class="built_in">fetch_add</span>(<span class="number">1</span>);    <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 atomic 是 C++ 标准原子类，fetch_add 将对象持有的整数增 1 并返回之前的值，这个过程不会被多个线程同时执行，只能依次执行，从而保证了返回值的唯一性和正确性。  </p><p>对共享数据访问次序的控制称为“<a href="https://en.wikipedia.org/wiki/Synchronization_(computer_science)">同步（synchronization）</a>”，可使用锁、条件变量、原子操作等方法实现对线程的同步。与共享数据相关，但未落实同步机制的函数不应在多线程环境中使用，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">asctime         // use asctime_r or asctime_s instead</span><br><span class="line">ctime           // use ctime_r or ctime_s instead</span><br><span class="line">localtime       // use localtime_r or localtime_s instead</span><br><span class="line">gmtime          // use gmtime_r or gmtime_s instead</span><br><span class="line">strtok          // use strtok_r or strtok_s instead</span><br><span class="line">strerror        // use strerror_r or strerror_s instead</span><br><span class="line">tmpnam          // use tmpnam_r or tmpnam_s instead</span><br><span class="line">setlocale       // use mutex to protect multithreaded access</span><br><span class="line">rand, srand     // use random, srandom or BCryptGenRandom instead</span><br></pre></td></tr></table></figure><p>与线程同步不同，中断处理过程的同步较为特殊，可参见 ID_sig_dataRaces 的进一步讨论。  </p><p>考虑比数据竞争更高层面的问题，如果程序的正确性依赖进线程处理数据的特定时序，一旦这种特定时序被打破便会产生错误或漏洞，攻击者可以抢在某关键过程前后通过修改共享数据达到攻击目的，这种情况称为“<a href="https://en.wikipedia.org/wiki/Race_condition">竞态条件（race condition）</a>”，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int* p = get_shared();   // #0, ‘p’ points to shared data</span><br><span class="line">if (*p == 0) &#123;           // #1, ‘*p’ is unreliable</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">else if (*p == 1) &#123;      // #2, ‘*p’ is unreliable</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">else &#123;                   // #3</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 p 指向共享数据，那么攻击者可以通过修改共享数据实现对程序流程的劫持，比如在 <code>#0</code> 处 *p 的值本为 0，攻击者在 <code>#1</code> 之前改变 *p 的值，迫使流程向 <code>#2</code> 或 <code>#3</code> 处跳转。  </p><p>关于竞态条件的进一步讨论可参见 ID_TOCTOU、ID_forbidSignalFunction 等规则。<br><br/><br><br/></p><h4 id="相关-217"><a href="#相关-217" class="headerlink" title="相关"></a>相关</h4><p>ID_sig_dataRaces<br>ID_sig_nonAsyncSafeCall<br><br/></p><h4 id="依据-196"><a href="#依据-196" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:2011 5.1.2.4(3)-undefined<br>ISO&#x2F;IEC 9899:2011 5.1.2.4(20)-undefined<br>ISO&#x2F;IEC 9899:2011 5.1.2.4(25)-undefined<br><br/></p><h4 id="参考-362"><a href="#参考-362" class="headerlink" title="参考"></a>参考</h4><p>CWE-362<br>C++ Core Guidelines CP.2<br>SEI CERT CON33-C<br>SEI CERT CON43-C<br><br/><br><br/></p><h3 id="▌R16-2-避免在事务中通过路径多次访问同一文件"><a href="#▌R16-2-避免在事务中通过路径多次访问同一文件" class="headerlink" title="▌R16.2 避免在事务中通过路径多次访问同一文件"></a><span id="toctou">▌R16.2 避免在事务中通过路径多次访问同一文件</span></h3><p>ID_TOCTOU&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: concurrency warning</p><hr/><p>攻击者可以在两次通过路径访问文件的中途对文件做手脚，从而造成不良后果。  </p><p>这种问题称为“<a href="https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use">TOCTOU（Time-of-check to time-of-use）</a>”。有时需要先检查文件的某种状态，如果状态满足条件的话，再使用该文件，如果“检查”和“使用”都是通过路径完成的，攻击者可以在中途将文件替换成不满足条件的文件，如将文件替换成指向另一个文件的链接，从而对系统造成破坏，这是一种典型的“<a href="https://en.wikipedia.org/wiki/Race_condition">竞态条件</a>”。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">create</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path)</span> </span>&#123;</span><br><span class="line">    FILE* fp = <span class="built_in">fopen</span>(path, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp != <span class="literal">NULL</span>) &#123;              <span class="comment">// #1, time-of-check</span></span><br><span class="line">        <span class="built_in">fclose</span>(fp);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fp = <span class="built_in">fopen</span>(path, <span class="string">&quot;w&quot;</span>);         <span class="comment">// #2, time-of-use, non-compliant</span></span><br><span class="line">    <span class="keyword">if</span> (fp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fwrite</span>(<span class="string">&quot;abc&quot;</span>, <span class="number">1</span>, <span class="number">3</span>, fp);</span><br><span class="line">        <span class="built_in">fclose</span>(fp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码先通过路径判断文件是否存在，如果存在则不作处理，如果不存在则再次通过路径创建文件并写入数据。如果攻击者把握住时机，在程序执行到 <code>#1</code> 和 <code>#2</code> 之间时按 path 创建指向其他文件的链接，那么被指向的文件会遭到破坏，尤其是当被攻击的进程权限比较高时，破坏力是难以控制的。  </p><p>应只通过路径打开文件对象一次，只通过文件对象操作文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void create(const char* path) &#123;</span><br><span class="line">    FILE* fp = fopen(path, &quot;wx&quot;);   // Compliant, since C11</span><br><span class="line">    if (fp != NULL) &#123;</span><br><span class="line">        fwrite(&quot;abc&quot;, 1, 3, fp);</span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用“wx”模式即可保证 fopen 在文件不存在时创建文件，文件存在时返回空。  </p><p>注意，目前 C++ 的 fstream 尚无法完成与“wx”模式相同的功能，相同功能的代码要用 fopen 实现。<br><br/><br><br/></p><h4 id="依据-197"><a href="#依据-197" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 7.19.5.3(3)<br>ISO&#x2F;IEC 9899:2011 7.21.5.3(3)<br><br/></p><h4 id="参考-363"><a href="#参考-363" class="headerlink" title="参考"></a>参考</h4><p>CWE-367<br><br/><br><br/></p><h3 id="▌R16-3-避免在事务中多次非同步地访问原子对象"><a href="#▌R16-3-避免在事务中多次非同步地访问原子对象" class="headerlink" title="▌R16.3 避免在事务中多次非同步地访问原子对象"></a><span id="atomicraces">▌R16.3 避免在事务中多次非同步地访问原子对象</span></h3><p>ID_atomicRaces&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: concurrency warning</p><hr/><p>原子对象可以保证某些特定操作的原子性，但特定操作的组合并不具备原子性，非同步地访问原子对象仍然存在数据竞争。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">atomic_int i = <span class="built_in">ATOMIC_VAR_INIT</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    i = i + <span class="number">1</span>;   <span class="comment">// Non-compliant, data races</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设 thd 为线程函数，原子对象 i 在表达式中出现了多次，其读取、计算、写入等过程在多线程中仍然是交织在一起的，造成数据竞争。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">thd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">atomic_fetch_add</span>(&amp;i, <span class="number">1</span>);   <span class="comment">// Compliant, or use ‘operator++’ in C++</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于一些复杂的原子运算，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = (i + 1) % 5;   // Non-compliant</span><br></pre></td></tr></table></figure><p>可采用“<a href="https://en.wikipedia.org/wiki/Compare-and-swap">CAS（compare and swap）</a>” 方法同步：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int old_i = atomic_load(&amp;i);</span><br><span class="line">int new_i = 0;</span><br><span class="line">do &#123;</span><br><span class="line">    new_i = (old_i + 1) % 5;</span><br><span class="line">&#125; while (!compare_and_swap(&amp;i, &amp;old_i, new_i));   // Compliant</span><br></pre></td></tr></table></figure><p>首先读取原子对象的值 old_i，old_i 经过运算得到新值 new_i，再通过 compare_and_swap 更新原子对象的值。compare_and_swap 具有原子性，将 old_i 和原子对象当前值比较，相等则说明在运算过程中原子对象没有被其他线程更新，将原子对象的值设为 new_i，不相等则说明原子对象已被其他线程更新，将 old_i 设为原子对象当前值，再重复这个过程，直到原子对象可用 new_i 更新。  </p><p>compare_and_swap 是重要的原子对象同步手段，在实际代码中可与 atomic_compare_exchange_weak、atomic_compare_exchange_strong 等函数对应。<br><br/><br><br/></p><h4 id="相关-218"><a href="#相关-218" class="headerlink" title="相关"></a>相关</h4><p>ID_dataRaces<br><br/></p><h4 id="参考-364"><a href="#参考-364" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT CON40-C<br><br/><br><br/></p><h3 id="▌R16-4-避免死锁"><a href="#▌R16-4-避免死锁" class="headerlink" title="▌R16.4 避免死锁"></a><span id="deadlock">▌R16.4 避免死锁</span></h3><p>ID_deadlock&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: concurrency warning</p><hr/><p>对于锁等资源，错误的请求时序或管理方式会使程序永远陷入等待状态，这种问题称为“<a href="https://en.wikipedia.org/wiki/Deadlock">死锁（deadlock）</a>”。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">mtx_t</span> m;               <span class="comment">// Non-recursive mutex</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">mtx_lock</span>(&amp;m);      <span class="comment">// Lock the mutex</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">mtx_lock</span>(&amp;m);      <span class="comment">// Lock the mutex</span></span><br><span class="line">    <span class="built_in">foo</span>();             <span class="comment">// Undefined behavior, may deadlock</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设 m 是非递归互斥量，bar 锁定互斥量后调用 foo，而 foo 也会锁定互斥量，导致 foo 等待 bar 解锁，而 foo 返回之前 bar 不可能解锁，这是一种导致死锁的逻辑错误，C11 也明确规定在同一线程中不可重复锁定非递归互斥量。  </p><p>另外，线程之间相互等待对方解锁也是死锁的主要原因，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">struct A &#123;</span><br><span class="line">    ....</span><br><span class="line">    mtx_t m;          // Mutex</span><br><span class="line">&#125; a, b;</span><br><span class="line"></span><br><span class="line">void thr1() &#123;</span><br><span class="line">    mtx_lock(&amp;a.m);   // Lock</span><br><span class="line">    mtx_lock(&amp;b.m);</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void thr2() &#123;</span><br><span class="line">    mtx_lock(&amp;b.m);   // Lock in another order</span><br><span class="line">    mtx_lock(&amp;a.m);   // May deadlock</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设 thr1 和 thr2 是两个可以并发执行的函数，如果 a.m 被 thr1 锁定，b.m 被 thr2 锁定，thr1 等待 b.m 解锁，而 thr2 等待 a.m 解锁，这种相互等待导致了死锁的局面。例中 a 和 b 是具名全局对象，在各线程中按统一的顺序加锁可避免死锁。  </p><p>在更普遍的情况下，为不同对象加锁前，可使对象按某种内在的标准“排序”，再依次加锁，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">struct A &#123;</span><br><span class="line">    int id;           // Unique identifier</span><br><span class="line">    ....</span><br><span class="line">    mtx_t m;          // Mutex</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void lock_in_order(A* p, A* q) &#123;</span><br><span class="line">    if (p-&gt;id &gt; q-&gt;id) &#123;</span><br><span class="line">        A* t = p; p = q; q = t;</span><br><span class="line">    &#125;</span><br><span class="line">    mtx_lock(&amp;p-&gt;m);</span><br><span class="line">    mtx_lock(&amp;q-&gt;m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为每个对象分配一个 id 以标识不同的对象，每次 id 小的先加锁，可有效避免相互等待造成的死锁。示例代码忽略了 id 相等的情况，在实际代码中应补全，否则也会造成第一个例子中的问题。<br><br/><br><br/></p><h4 id="依据-198"><a href="#依据-198" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:2011 7.26.4.3(2)-undefined<br>ISO&#x2F;IEC 14882:2011 17.3.8<br><br/></p><h4 id="参考-365"><a href="#参考-365" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT CON35-C<br>SEI CERT CON53-CPP<br>SEI CERT CON56-CPP<br><br/><br><br/></p><h3 id="▌R16-5-避免异步终止线程"><a href="#▌R16-5-避免异步终止线程" class="headerlink" title="▌R16.5 避免异步终止线程"></a><span id="asynchronoustermination">▌R16.5 避免异步终止线程</span></h3><p>ID_asynchronousTermination&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: concurrency warning</p><hr/><p>资源的使用情况在异步过程中是难以掌控的，异步终止线程往往会导致泄漏或死锁等严重问题。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">foo</span><span class="params">(<span class="type">void</span>* param)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">pthread_setcanceltype</span>(</span><br><span class="line">        PTHREAD_CANCEL_ASYNCHRONOUS, ....  <span class="comment">// Non-compliant</span></span><br><span class="line">    );</span><br><span class="line">    ....                                   <span class="comment">// Allocate or lock</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thd;</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;thd, <span class="literal">NULL</span>, foo, <span class="literal">NULL</span>);</span><br><span class="line">    ....</span><br><span class="line">    <span class="built_in">pthread_cancel</span>(thd);   <span class="comment">// Non-compliant, leak or deadlock</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以 pthread 线程库为例，foo 和 bar 是两个相关的异步过程，foo 通过 PTHREAD_CANCEL_ASYNCHRONOUS 指定其线程可以随时被终止，bar 调用 pthread_cancel 终止 foo 线程，在一个过程中暴力终止另一个过程是非常危险的，会使锁、信号量或动态分配的资源无法释放。  </p><p>PTHREAD_CANCEL_ASYNCHRONOUS 等选项、TerminateThread 等 Windows API，以及具有相同功能的选项或 API 均不应使用，应使线程主动执行清理并正常结束执行。<br><br/><br><br/></p><h4 id="相关-219"><a href="#相关-219" class="headerlink" title="相关"></a>相关</h4><p>ID_resourceLeak<br>ID_deadlock<br>ID_illLifetime<br><br/></p><h4 id="参考-366"><a href="#参考-366" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT POS47-C<br><br/><br><br/></p><h3 id="▌R16-6-避免异步终止共享对象的生命周期"><a href="#▌R16-6-避免异步终止共享对象的生命周期" class="headerlink" title="▌R16.6 避免异步终止共享对象的生命周期"></a><span id="illlifetime">▌R16.6 避免异步终止共享对象的生命周期</span></h3><p>ID_illLifetime&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: concurrency warning</p><hr/><p>共享对象的使用情况在异步过程中是难以掌控的，贸然终止共享对象的生命周期往往会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(mutex* pm)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">lock</span>(pm);</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mutex m;</span><br><span class="line">    <span class="built_in">beginThread</span>(foo, &amp;m);   <span class="comment">// Non-compliant, ‘m’ is a local object</span></span><br><span class="line">    <span class="built_in">beginThread</span>(foo, &amp;m);   <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设例中 beginThread 创建执行 foo 函数的线程，bar 与 foo 是异步过程，共享对象 m 在 bar 返回后失效，如果 foo 继续访问共享对象就会出错，bar 应等待线程执行完毕或调整共享对象的生命周期。<br><br/><br><br/></p><h4 id="相关-220"><a href="#相关-220" class="headerlink" title="相关"></a>相关</h4><p>ID_asynchronousTermination<br>ID_localAddressFlowOut<br>ID_danglingDeref<br><br/></p><h4 id="依据-199"><a href="#依据-199" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2011 30.4.1.2.1(5)-undefined<br>ISO&#x2F;IEC 14882:2017 33.4.3.2.1(5)-undefined<br><br/></p><h4 id="参考-367"><a href="#参考-367" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT CON31-C<br>SEI CERT CON50-CPP<br><br/><br><br/></p><h3 id="▌R16-7-避免虚假唤醒造成同步错误"><a href="#▌R16-7-避免虚假唤醒造成同步错误" class="headerlink" title="▌R16.7 避免虚假唤醒造成同步错误"></a><span id="spuriouslywakeup">▌R16.7 避免虚假唤醒造成同步错误</span></h3><p>ID_spuriouslyWakeUp&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: concurrency warning</p><hr/><p>条件不满足时条件变量也可以被唤醒，这种情况称为“<a href="https://en.wikipedia.org/wiki/Spurious_wakeup">虚假唤醒（spurious wakeup）</a>”，条件变量被唤醒后应检查相关条件是否满足，否则会造成同步相关的错误。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">mtx_t</span> m;    <span class="comment">// Mutex</span></span><br><span class="line"><span class="type">cnd_t</span> cv;   <span class="comment">// Condition variable</span></span><br><span class="line"><span class="type">bool</span> cnd;   <span class="comment">// Represents the condition</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thd</span><span class="params">()</span> </span>&#123;                 <span class="comment">// Thread function</span></span><br><span class="line">    <span class="built_in">mtx_lock</span>(&amp;m);            <span class="comment">// Lock</span></span><br><span class="line">    <span class="keyword">if</span> (!cnd) &#123;              <span class="comment">// Non-compliant, use a while loop instead</span></span><br><span class="line">        <span class="built_in">cnd_wait</span>(&amp;cv, &amp;m);   <span class="comment">// Wait</span></span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设例中 cv 是条件变量，cnd 代表相关条件，cnd_wait 等待条件被其他异步过程满足，条件的判断与更改应是互斥的，cnd_wait 会解锁并进入等待状态，当得到 cnd_signal 或 cnd_broadcast 的通知后会退出等待状态并再次加锁，但在条件不满足时也可能退出等待，原因主要有：  </p><ul><li>一个条件变量对应多个条件，与当前条件无关的条件被满足并通知了条件变量  </li><li>在退出等待并加锁的过程中其他线程使条件不被满足  </li><li>等待过程被信号打断</li></ul><p>这些问题取决于程序和系统的具体实现，在循环中等待并判断条件可一并解决这些问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void thd() &#123;</span><br><span class="line">    mtx_lock(&amp;m);</span><br><span class="line">    while (!cnd) &#123;           // Compliant</span><br><span class="line">        cnd_wait(&amp;cv, &amp;m);</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-368"><a href="#参考-368" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT CON36-C<br>SEI CERT CON54-CPP<br><br/><br><br/></p><h3 id="▌R16-8-避免并发访问位域造成的数据竞争"><a href="#▌R16-8-避免并发访问位域造成的数据竞争" class="headerlink" title="▌R16.8 避免并发访问位域造成的数据竞争"></a><span id="bitfielddataraces">▌R16.8 避免并发访问位域造成的数据竞争</span></h3><p>ID_bitfieldDataRaces&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: concurrency warning</p><hr/><p>相邻的位域成员可能在一个存储单元中，所以并发访问位域也可能造成数据竞争。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> x: <span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> y: <span class="number">1</span>;</span><br><span class="line">&#125; a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thr1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a.x = <span class="number">0</span>;    <span class="comment">// Non-compliant, missing lock</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thr2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a.y = <span class="number">1</span>;    <span class="comment">// Non-compliant, missing lock</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设例中 thr1 和 thr2 是可以并发执行的函数，位域成员 x 和 y 在一个存储单元中，对 x 或 y 的更新相当于用新数据更新存储单元的值，再将存储单元的值整体写入内存，这个过程如果是异步并发执行的就会产生错误，所以对不同位域成员的并发访问也应保证合理的同步措施。<br><br/><br><br/></p><h4 id="相关-221"><a href="#相关-221" class="headerlink" title="相关"></a>相关</h4><p>ID_dataRaces<br>ID_forbidBitfield<br><br/></p><h4 id="依据-200"><a href="#依据-200" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:2011 3.14(3)<br>ISO&#x2F;IEC 14882:2011 1.7(4)<br><br/></p><h4 id="参考-369"><a href="#参考-369" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT CON32-C<br>SEI CERT CON52-CPP<br><br/><br><br/></p><h3 id="▌R16-9-多线程环境中不可使用-signal-函数"><a href="#▌R16-9-多线程环境中不可使用-signal-函数" class="headerlink" title="▌R16.9 多线程环境中不可使用 signal 函数"></a><span id="signalinmultithreading">▌R16.9 多线程环境中不可使用 signal 函数</span></h3><p>ID_signalInMultiThreading&emsp;&emsp;&emsp;&emsp;&nbsp;:fire: concurrency warning</p><hr/><p>在多线程环境中使用 signal 函数会导致标准未定义的行为。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;threads.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handler</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">thread</span><span class="params">(<span class="type">void</span>* param)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">signal</span>(SIGINT, handler);  <span class="comment">// Non-compliant, undefined behavior</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 thread 是线程函数，C11 标准指明在多线程环境中使用 signal 函数会导致未定义的行为。<br><br/><br><br/></p><h4 id="相关-222"><a href="#相关-222" class="headerlink" title="相关"></a>相关</h4><p>ID_forbidSignalFunction<br><br/></p><h4 id="依据-201"><a href="#依据-201" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:2011 7.14.1.1(7)-undefined<br><br/></p><h4 id="参考-370"><a href="#参考-370" class="headerlink" title="参考"></a>参考</h4><p>SEI CERT CON37-C<br><br/><br><br/></p><h2 id="17-Style"><a href="#17-Style" class="headerlink" title="17. Style"></a><span id="style">17. Style</span></h2><h3 id="▌R17-1-空格应遵循统一风格"><a href="#▌R17-1-空格应遵循统一风格" class="headerlink" title="▌R17.1 空格应遵循统一风格"></a><span id="spacestyle">▌R17.1 空格应遵循统一风格</span></h3><p>ID_spaceStyle&emsp;&emsp;&emsp;&emsp;&nbsp;:womans_hat: style suggestion</p><hr/><p>与运算符、标点符、关键字相关的空格应遵循统一风格，过于随意的空格会干扰阅读，甚至形成笔误。  </p><p>本规则暂不限定具体风格，但强调一致性，同类运算符、标点符、关键字的空格方式应保持一致，tab 等变长空白符不应用作空格。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a= <span class="number">0</span>;                   <span class="comment">// Bad</span></span><br><span class="line">b = a +<span class="number">1</span>;               <span class="comment">// Bad</span></span><br><span class="line">c =~ a;                 <span class="comment">// Bad</span></span><br><span class="line"><span class="keyword">while</span> (d --&gt; <span class="number">0</span>)         <span class="comment">// Bad</span></span><br><span class="line"></span><br><span class="line">a == <span class="number">0</span> ? <span class="built_in">foo</span>() :<span class="built_in">bar</span>();  <span class="comment">// Bad</span></span><br><span class="line"><span class="built_in">baz</span> (<span class="number">1</span> , <span class="number">2</span> ,<span class="number">3</span>);         <span class="comment">// Bad</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cond)</span><br><span class="line"><span class="keyword">if</span>(cond)                <span class="comment">// Missing a unified style</span></span><br></pre></td></tr></table></figure><p>例中运算符和关键字相关的空格风格不一致，代码显得很混乱。  </p><p>本规则是 ID_stickyAssignmentOperator 的泛化，该规则描述了一种由空格造成的错误。<br><br/><br><br/></p><h4 id="相关-223"><a href="#相关-223" class="headerlink" title="相关"></a>相关</h4><p>ID_stickyAssignmentOperator<br><br/><br><br/></p><h3 id="▌R17-2-大括号应遵循统一风格"><a href="#▌R17-2-大括号应遵循统一风格" class="headerlink" title="▌R17.2 大括号应遵循统一风格"></a><span id="bracestyle">▌R17.2 大括号应遵循统一风格</span></h3><p>ID_braceStyle&emsp;&emsp;&emsp;&emsp;&nbsp;:womans_hat: style suggestion</p><hr/><p>大括号应遵循统一的换行和缩进风格，否则不利于阅读和维护，甚至形成笔误。  </p><p>命名空间、类、函数体、复合语句等不同类别的大括号，换行方式可以不同，但同类大括号的换行方式应该是一致的，本规则暂不限定具体风格，但强调一致性。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;     <span class="comment">// Non-compliant, missing a unified style</span></span><br><span class="line">    <span class="keyword">if</span> (cond)</span><br><span class="line">    &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="built_in">bar</span>()       <span class="comment">// Non-compliant, missing a unified style</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (cond) &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中大括号换行的方式不一致，代码显得很混乱。  </p><p>本规则是 ID_if_mayBeElseIf 的泛化，该规则描述了一种由换行造成的错误。<br><br/><br><br/></p><h4 id="相关-224"><a href="#相关-224" class="headerlink" title="相关"></a>相关</h4><p>ID_if_mayBeElseIf<br><br/><br><br/></p><h3 id="▌R17-3-赋值表达式不应作为子表达式"><a href="#▌R17-3-赋值表达式不应作为子表达式" class="headerlink" title="▌R17.3 赋值表达式不应作为子表达式"></a><span id="assignmentassubexpression">▌R17.3 赋值表达式不应作为子表达式</span></h3><p>ID_assignmentAsSubExpression&emsp;&emsp;&emsp;&emsp;&nbsp;:womans_hat: style suggestion</p><hr/><p>赋值表达式作为子表达式易使人费解，也易产生优先级相关的问题。  </p><p>赋值及复合赋值表达式均受本规则约束。  </p><p>示例（设 a、b、c 为整型变量）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = b;              // Compliant</span><br><span class="line">a = b = c;          // Non-compliant</span><br><span class="line">if (a = b != 0) &#123;   // Non-compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">a += b;             // Compliant</span><br><span class="line">a += b += c;        // Non-compliant</span><br></pre></td></tr></table></figure><br/><br/><h4 id="参考-371"><a href="#参考-371" class="headerlink" title="参考"></a>参考</h4><p>CWE-481<br>MISRA C 2004 13.1<br>MISRA C 2012 13.4<br>MISRA C++ 2008 6-2-1<br><br/><br><br/></p><h3 id="▌R17-4-自增、自减表达式不应作为子表达式"><a href="#▌R17-4-自增、自减表达式不应作为子表达式" class="headerlink" title="▌R17.4 自增、自减表达式不应作为子表达式"></a><span id="incdecassubexpression">▌R17.4 自增、自减表达式不应作为子表达式</span></h3><p>ID_incDecAsSubExpression&emsp;&emsp;&emsp;&emsp;&nbsp;:womans_hat: style suggestion</p><hr/><p>自增、自减表达式作为子表达式易使人费解，也易产生求值顺序相关的问题。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = ++b + c--;   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">++b;             <span class="comment">// Compliant</span></span><br><span class="line">a = b + c;</span><br><span class="line">c--;             <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-225"><a href="#相关-225" class="headerlink" title="相关"></a>相关</h4><p>ID_evaluationOrderReliance<br><br/></p><h4 id="参考-372"><a href="#参考-372" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 13.3<br>MISRA C++ 2008 5-2-10<br><br/><br><br/></p><h3 id="▌R17-5-控制条件应为-bool-型表达式"><a href="#▌R17-5-控制条件应为-bool-型表达式" class="headerlink" title="▌R17.5 控制条件应为 bool 型表达式"></a><span id="nonboolcondition">▌R17.5 控制条件应为 bool 型表达式</span></h3><p>ID_nonBoolCondition&emsp;&emsp;&emsp;&emsp;&nbsp;:womans_hat: style suggestion</p><hr/><p>如果控制条件均为 bool 型表达式，可使逻辑结构更清晰，有效避免隐式类型转换造成的问题。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>* p, <span class="type">size_t</span> n, <span class="type">bool</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p) &#123;     <span class="comment">// Non-compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n) &#123;     <span class="comment">// Non-compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b) &#123;     <span class="comment">// Compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 p 和 n 不应直接作为条件，b 为 bool 型，可直接作为条件。  </p><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>* p, <span class="type">size_t</span> n, <span class="type">bool</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;   <span class="comment">// Compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">0</span>) &#123;      <span class="comment">// Compliant</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环条件、三元表达式的条件等所有可作为控制条件的表达式均受本规则限制。  </p><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (int* p = bar()) &#123;  // Let it go</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++03 允许将声明作为条件，这种情况可不受本规则限制。<br><br/><br><br/></p><h4 id="相关-226"><a href="#相关-226" class="headerlink" title="相关"></a>相关</h4><p>ID_nonBoolSubCondition<br><br/></p><h4 id="参考-373"><a href="#参考-373" class="headerlink" title="参考"></a>参考</h4><p>MISRA C 2012 14.4<br>MISRA C++ 2008 5-0-13<br>MISRA C++ 2008 5-0-14<br><br/><br><br/></p><h3 id="▌R17-6-、-amp-amp-、-的子表达式应为-bool-型表达式"><a href="#▌R17-6-、-amp-amp-、-的子表达式应为-bool-型表达式" class="headerlink" title="▌R17.6 !、&amp;&amp;、|| 的子表达式应为 bool 型表达式"></a><span id="nonboolsubcondition">▌R17.6 !、&amp;&amp;、|| 的子表达式应为 bool 型表达式</span></h3><p>ID_nonBoolSubCondition&emsp;&emsp;&emsp;&emsp;&nbsp;:womans_hat: style suggestion</p><hr/><p>如果 !、&amp;&amp;、|| 的子表达式均为 bool 型表达式，可使逻辑结构更清晰，有效避免隐式类型转换或运算符误用造成的问题。  </p><p>示例（设 p 为指针，a、b、c 为整型变量）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!p)             // Non-compliant </span><br><span class="line">if (a &amp;&amp; b)         // Non-compliant</span><br><span class="line">if (a || (b + c))   // Non-compliant</span><br></pre></td></tr></table></figure><p>应改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)                  <span class="comment">// Compliant </span></span><br><span class="line"><span class="keyword">if</span> ((a != <span class="number">0</span>) &amp;&amp; (b != <span class="number">0</span>))       <span class="comment">// Compliant </span></span><br><span class="line"><span class="keyword">if</span> ((a != <span class="number">0</span>) || (b + c != <span class="number">0</span>))   <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-227"><a href="#相关-227" class="headerlink" title="相关"></a>相关</h4><p>ID_nonBoolCondition<br>ID_illBoolOperation<br><br/></p><h4 id="参考-374"><a href="#参考-374" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 5-3-1<br><br/><br><br/></p><h3 id="▌R17-7-amp-amp-、-的子表达式应为后缀表达式"><a href="#▌R17-7-amp-amp-、-的子表达式应为后缀表达式" class="headerlink" title="▌R17.7 &amp;&amp;、|| 的子表达式应为后缀表达式"></a><span id="nonpostfixsubcondition">▌R17.7 &amp;&amp;、|| 的子表达式应为后缀表达式</span></h3><p>ID_nonPostfixSubCondition&emsp;&emsp;&emsp;&emsp;&nbsp;:womans_hat: style suggestion</p><hr/><p>如果 &amp;&amp;、|| 的子表达式均为后缀表达式，可使逻辑结构更清晰，有效避免各种优先级问题。  </p><p>后缀表达式（postfix-expression）是 C&#x2F;C++ 语言的文法概念，也是一类表达式的总称：  </p><ul><li>只包含标识符或常量的表达式  </li><li>用小括号括起来的表达式  </li><li>用于数组元素求值的 [ ] 表达式  </li><li>函数调用、函数式类型转换表达式  </li><li>.、-&gt; 表达式  </li><li>后置 ++、-- 表达式  </li><li>typeid 等表达式</li></ul><p>本规则意在强调子表达式应适当地用括号括起来，以便提高可读性，并确保程序的行为符合开发者的意图。  </p><p>示例（设 a、b、c 为 bool 型变量，n 为整型变量）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (n == 0 &amp;&amp; b) &#123;   // Non-compliant </span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例中 n &#x3D;&#x3D; 0 不是后缀表达式，应使用括号括起来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ((n == 0) &amp;&amp; b) &#123;   // Compliant </span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (a || b &amp;&amp; c) &#123;   // Non-compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使知道 &amp;&amp; 的优先级高于 ||，也应使用括号将 || 的子表达式括起来，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (a || (b &amp;&amp; c)) &#123;   // Compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例外：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (a || b || c)) &#123;   // Compliant</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 &amp;&amp;、|| 的子表达式运算符与其相同时，可不受本规则约束。<br><br/><br><br/></p><h4 id="依据-202"><a href="#依据-202" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 9899:1999 6.5.2(1)<br>ISO&#x2F;IEC 9899:2011 6.5.2(1)<br>ISO&#x2F;IEC 14882:2003 5.2(1)<br>ISO&#x2F;IEC 14882:2011 5.2(1)<br><br/></p><h4 id="参考-375"><a href="#参考-375" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 5-2-1<br><br/><br><br/></p><h3 id="▌R17-8-在-C-代码中-NULL-和-nullptr-不应混用"><a href="#▌R17-8-在-C-代码中-NULL-和-nullptr-不应混用" class="headerlink" title="▌R17.8 在 C++ 代码中 NULL 和 nullptr 不应混用"></a><span id="mixnullptrandnull">▌R17.8 在 C++ 代码中 NULL 和 nullptr 不应混用</span></h3><p>ID_mixNullptrAndNULL&emsp;&emsp;&emsp;&emsp;&nbsp;:womans_hat: style warning</p><hr/><p>在 C++ 代码中 NULL 和 nullptr 不应混用，应统一使用 nullptr。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>* a = <span class="literal">NULL</span>, <span class="type">int</span>* b = <span class="literal">nullptr</span>)</span></span>;    <span class="comment">// Non-compliant</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(<span class="type">int</span>* a = <span class="literal">nullptr</span>, <span class="type">int</span>* b = <span class="literal">nullptr</span>)</span></span>;    <span class="comment">// Compliant</span></span><br></pre></td></tr></table></figure><br/><br/><h4 id="相关-228"><a href="#相关-228" class="headerlink" title="相关"></a>相关</h4><p>ID_deprecatedNULL<br><br/></p><h4 id="参考-376"><a href="#参考-376" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.47<br><br/><br><br/></p><h3 id="▌R17-9-在-C-代码中用-nullptr-代替-NULL"><a href="#▌R17-9-在-C-代码中用-nullptr-代替-NULL" class="headerlink" title="▌R17.9 在 C++ 代码中用 nullptr 代替 NULL"></a><span id="deprecatednull">▌R17.9 在 C++ 代码中用 nullptr 代替 NULL</span></h3><p>ID_deprecatedNULL&emsp;&emsp;&emsp;&emsp;&nbsp;:womans_hat: style suggestion</p><hr/><p>标识符 NULL 由实现定义，在 C++ 语言中往往等同于常量 0，无法有效区分整数与指针，用 nullptr 可避免这种问题。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;foo-1\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>*)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;foo-2\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">foo</span>(<span class="literal">NULL</span>);  <span class="comment">// Non-compliant, what is output?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NULL 表示空指针，所以应该调用参数为指针的重载函数，但不同的编译器对这段代码有不同的处理，有的无法通过编译，有的编译执行后会输出 foo-1，用 nullptr 代替 NULL 可解决这种问题。<br><br/><br><br/></p><h4 id="依据-203"><a href="#依据-203" class="headerlink" title="依据"></a>依据</h4><p>ISO&#x2F;IEC 14882:2003 C.2.2.3(1)-implementation<br>ISO&#x2F;IEC 14882:2011 2.14.7(1)<br>ISO&#x2F;IEC 14882:2011 C.3.2.4(1)-implementation<br>ISO&#x2F;IEC 14882:2017 C.5.2.7(1)-implementation<br><br/></p><h4 id="参考-377"><a href="#参考-377" class="headerlink" title="参考"></a>参考</h4><p>C++ Core Guidelines ES.47<br><br/><br><br/></p><h3 id="▌R17-10-避免多余的括号"><a href="#▌R17-10-避免多余的括号" class="headerlink" title="▌R17.10 避免多余的括号"></a><span id="redundantparentheses">▌R17.10 避免多余的括号</span></h3><p>ID_redundantParentheses&emsp;&emsp;&emsp;&emsp;&nbsp;:womans_hat: style suggestion</p><hr/><p>重复的或与优先级无关的括号使代码显得繁琐，应去掉。  </p><p>宏定义中的括号不受本规则限制。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span> + (p[<span class="number">0</span>]);      <span class="comment">// Non-compliant</span></span><br><span class="line">a = <span class="number">2</span> + (p-&gt;n);      <span class="comment">// Non-compliant</span></span><br><span class="line">a = (<span class="built_in">fun</span>(x));        <span class="comment">// Non-compliant</span></span><br><span class="line">a = ((u + v)) * w;   <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><p>例中括号均作用于“后缀表达式”，与优先级无关。可参见 ID_nonPostfixSubCondition 对“后缀表达式”的说明。  </p><p>应去掉多余的括号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = 1 + p[0];        // Compliant</span><br><span class="line">a = 2 + p-&gt;n;        // Compliant</span><br><span class="line">a = fun(x);          // Compliant</span><br><span class="line">a = (u + v) * w;     // Compliant</span><br></pre></td></tr></table></figure><p>注意，设立本规则并不是为了提倡省略括号，如果可以更好地表达逻辑意义，或不确定运算符优先级时，应及时使用括号。<br><br/><br><br/></p><h4 id="参考-378"><a href="#参考-378" class="headerlink" title="参考"></a>参考</h4><p>MISRA C++ 2008 5-0-2<br><br/><br><br/></p><h3 id="▌R17-11-避免多余的分号"><a href="#▌R17-11-避免多余的分号" class="headerlink" title="▌R17.11 避免多余的分号"></a><span id="redundantsemicolon">▌R17.11 避免多余的分号</span></h3><p>ID_redundantSemicolon&emsp;&emsp;&emsp;&emsp;&nbsp;:womans_hat: style suggestion</p><hr/><p>多余的分号使代码显得繁琐，也可能意味着某种错误，应去掉。  </p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> N &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">bar</span>();;    <span class="comment">// Non-compliant</span></span><br><span class="line">    &#125;;             <span class="comment">// Non-compliant</span></span><br><span class="line">&#125;;                 <span class="comment">// Non-compliant</span></span><br></pre></td></tr></table></figure><br/><br/><br/><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>&emsp;&emsp;<a href="./c-ub-list.md"><code>c-ub-list.md</code></a>：C 未定义行为成因列表<br>&emsp;&emsp;<a href="./cpp-ub-list.md"><code>cpp-ub-list.md</code></a>：C++ 未定义行为成因列表与标准解读  </p><br/><br/><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&emsp;&emsp;保障软件安全、提升产品质量是宏大的主题，需要不断地学习、探索与实践，也难以在一篇文章中涵盖所有要点，这 467 条规则就暂且讨论至此了。欢迎提供修订意见和扩展建议，由于本文档是自动生成的，请不要直接编辑本文档，可在 Issue 区发表高见，管理员修正数据库后会在致谢列表中存档。</p><p>&emsp;&emsp;此致</p><p>祝编程愉快！</p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/07/12/hello-world/"/>
      <url>/2023/07/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CodeBlock_Test</title>
      <link href="/2023/07/11/Code/0711codeblock/"/>
      <url>/2023/07/11/Code/0711codeblock/</url>
      
        <content type="html"><![CDATA[<h2 id="测试代码块"><a href="#测试代码块" class="headerlink" title="测试代码块"></a>测试代码块</h2><p>以下是openglwithcpp 2th的构建文件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">cmake_policy</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(LearnOpenGL)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">17</span>) <span class="comment"># this does nothing for MSVC, use target_compile_options below</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_EXTENSIONS <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">IF</span>(<span class="keyword">NOT</span> CMAKE_BUILD_TYPE)</span><br><span class="line">  <span class="keyword">SET</span>(CMAKE_BUILD_TYPE Debug CACHE <span class="keyword">STRING</span> <span class="string">&quot;Choose the type of build (Debug or Release)&quot;</span> FORCE)</span><br><span class="line"><span class="keyword">ENDIF</span>(<span class="keyword">NOT</span> CMAKE_BUILD_TYPE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_MODULE_PATH <span class="variable">$&#123;CMAKE_MODULE_PATH&#125;</span> <span class="string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/cmake/modules/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(WIN32)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"><span class="keyword">endif</span>(WIN32)</span><br><span class="line"></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"></span><br><span class="line"><span class="comment"># find the required packages</span></span><br><span class="line"><span class="keyword">find_package</span>(GLM REQUIRED)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;GLM included at $&#123;GLM_INCLUDE_DIR&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">find_package</span>(GLFW3 REQUIRED)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;Found GLFW3 in $&#123;GLFW3_INCLUDE_DIR&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">find_package</span>(ASSIMP REQUIRED)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;Found ASSIMP in $&#123;ASSIMP_INCLUDE_DIR&#125;&quot;</span>)</span><br><span class="line"><span class="comment"># find_package(SOIL REQUIRED)</span></span><br><span class="line"><span class="comment"># message(STATUS &quot;Found SOIL in $&#123;SOIL_INCLUDE_DIR&#125;&quot;)</span></span><br><span class="line"><span class="comment"># find_package(GLEW REQUIRED)</span></span><br><span class="line"><span class="comment"># message(STATUS &quot;Found GLEW in $&#123;GLEW_INCLUDE_DIR&#125;&quot;)</span></span><br><span class="line"><span class="keyword">if</span>(APPLE)</span><br><span class="line">  <span class="keyword">find_package</span>(Freetype REQUIRED)</span><br><span class="line">  <span class="keyword">message</span>(STATUS <span class="string">&quot;Found Freetype in $&#123;FREETYPE_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>(APPLE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(WIN32)</span><br><span class="line">  <span class="keyword">set</span>(LIBS glfw3 opengl32 assimp freetype irrKlang)</span><br><span class="line">  <span class="keyword">add_definitions</span>(-D_CRT_SECURE_NO_WARNINGS)</span><br><span class="line"><span class="keyword">elseif</span>(UNIX <span class="keyword">AND</span> <span class="keyword">NOT</span> APPLE)</span><br><span class="line">  <span class="keyword">set</span>(CMAKE_CXX_FLAGS_DEBUG <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS_DEBUG&#125; -Wall&quot;</span>)</span><br><span class="line">  <span class="keyword">find_package</span>(OpenGL REQUIRED)</span><br><span class="line">  <span class="keyword">add_definitions</span>(<span class="variable">$&#123;OPENGL_DEFINITIONS&#125;</span>)</span><br><span class="line">  <span class="keyword">find_package</span>(X11 REQUIRED)</span><br><span class="line">  <span class="comment"># note that the order is important for setting the libs</span></span><br><span class="line">  <span class="comment"># use pkg-config --libs $(pkg-config --print-requires --print-requires-private glfw3) in a terminal to confirm</span></span><br><span class="line">  <span class="keyword">set</span>(LIBS <span class="variable">$&#123;GLFW3_LIBRARY&#125;</span> X11 Xrandr Xinerama Xi Xxf86vm Xcursor GL dl pthread freetype <span class="variable">$&#123;ASSIMP_LIBRARY&#125;</span>)</span><br><span class="line">  <span class="keyword">set</span> (CMAKE_CXX_LINK_EXECUTABLE <span class="string">&quot;$&#123;CMAKE_CXX_LINK_EXECUTABLE&#125; -ldl&quot;</span>)</span><br><span class="line"><span class="keyword">elseif</span>(APPLE)</span><br><span class="line">  <span class="keyword">INCLUDE_DIRECTORIES</span>(/System/Library/Frameworks)</span><br><span class="line">  <span class="keyword">FIND_LIBRARY</span>(COCOA_LIBRARY Cocoa)</span><br><span class="line">  <span class="keyword">FIND_LIBRARY</span>(OpenGL_LIBRARY OpenGL)</span><br><span class="line">  <span class="keyword">FIND_LIBRARY</span>(IOKit_LIBRARY IOKit)</span><br><span class="line">  <span class="keyword">FIND_LIBRARY</span>(CoreVideo_LIBRARY CoreVideo)</span><br><span class="line">  <span class="keyword">MARK_AS_ADVANCED</span>(COCOA_LIBRARY OpenGL_LIBRARY)</span><br><span class="line">  <span class="keyword">SET</span>(APPLE_LIBS <span class="variable">$&#123;COCOA_LIBRARY&#125;</span> <span class="variable">$&#123;IOKit_LIBRARY&#125;</span> <span class="variable">$&#123;OpenGL_LIBRARY&#125;</span> <span class="variable">$&#123;CoreVideo_LIBRARY&#125;</span>)</span><br><span class="line">  <span class="keyword">SET</span>(APPLE_LIBS <span class="variable">$&#123;APPLE_LIBS&#125;</span> <span class="variable">$&#123;GLFW3_LIBRARY&#125;</span> <span class="variable">$&#123;ASSIMP_LIBRARY&#125;</span> <span class="variable">$&#123;FREETYPE_LIBRARIES&#125;</span>)</span><br><span class="line">  <span class="keyword">set</span>(LIBS <span class="variable">$&#123;LIBS&#125;</span> <span class="variable">$&#123;APPLE_LIBS&#125;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">  <span class="keyword">set</span>(LIBS )</span><br><span class="line"><span class="keyword">endif</span>(WIN32)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CHAPTERS</span><br><span class="line">    <span class="number">1</span>.getting_started</span><br><span class="line">    <span class="number">2</span>.lighting</span><br><span class="line">    <span class="number">3</span>.model_loading</span><br><span class="line">    <span class="number">4</span>.advanced_opengl</span><br><span class="line">    <span class="number">5</span>.advanced_lighting</span><br><span class="line">    <span class="number">6</span>.pbr</span><br><span class="line">    <span class="number">7</span>.in_practice</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(<span class="number">1</span>.getting_started</span><br><span class="line">    <span class="number">1.1</span>.hello_window</span><br><span class="line">    <span class="number">1.2</span>.hello_window_clear</span><br><span class="line">    <span class="number">2.1</span>.hello_triangle</span><br><span class="line">    <span class="number">2.2</span>.hello_triangle_indexed</span><br><span class="line">    <span class="number">2.3</span>.hello_triangle_exercise1</span><br><span class="line">    <span class="number">2.4</span>.hello_triangle_exercise2</span><br><span class="line">    <span class="number">2.5</span>.hello_triangle_exercise3</span><br><span class="line">    <span class="number">3.1</span>.shaders_uniform</span><br><span class="line">    <span class="number">3.2</span>.shaders_interpolation</span><br><span class="line">    <span class="number">3.3</span>.shaders_class</span><br><span class="line">    <span class="number">4.1</span>.textures</span><br><span class="line">    <span class="number">4.2</span>.textures_combined</span><br><span class="line">    <span class="number">4.4</span>.textures_exercise2</span><br><span class="line">    <span class="number">4.5</span>.textures_exercise3</span><br><span class="line">    <span class="number">4.6</span>.textures_exercise4</span><br><span class="line">    <span class="number">5.1</span>.transformations</span><br><span class="line">    <span class="number">5.2</span>.transformations_exercise2</span><br><span class="line">    <span class="number">6.1</span>.coordinate_systems</span><br><span class="line">    <span class="number">6.2</span>.coordinate_systems_depth</span><br><span class="line">    <span class="number">6.3</span>.coordinate_systems_multiple</span><br><span class="line">    <span class="number">7.1</span>.camera_circle</span><br><span class="line">    <span class="number">7.2</span>.camera_keyboard_dt</span><br><span class="line">    <span class="number">7.3</span>.camera_mouse_zoom</span><br><span class="line">    <span class="number">7.4</span>.camera_class</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(<span class="number">2</span>.lighting</span><br><span class="line">    <span class="number">1</span>.colors</span><br><span class="line">    <span class="number">2.1</span>.basic_lighting_diffuse</span><br><span class="line">    <span class="number">2.2</span>.basic_lighting_specular</span><br><span class="line">    <span class="number">3.1</span>.materials</span><br><span class="line">    <span class="number">3.2</span>.materials_exercise1</span><br><span class="line">    <span class="number">4.1</span>.lighting_maps_diffuse_map</span><br><span class="line">    <span class="number">4.2</span>.lighting_maps_specular_map</span><br><span class="line">    <span class="number">4.4</span>.lighting_maps_exercise4</span><br><span class="line">    <span class="number">5.1</span>.light_casters_directional</span><br><span class="line">    <span class="number">5.2</span>.light_casters_point</span><br><span class="line">    <span class="number">5.3</span>.light_casters_spot</span><br><span class="line">    <span class="number">5.4</span>.light_casters_spot_soft</span><br><span class="line">    <span class="number">6</span>.multiple_lights</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(<span class="number">3</span>.model_loading</span><br><span class="line">    <span class="number">1</span>.model_loading</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(<span class="number">4</span>.advanced_opengl</span><br><span class="line">    <span class="number">1.1</span>.depth_testing</span><br><span class="line">    <span class="number">1.2</span>.depth_testing_view</span><br><span class="line">    <span class="number">2</span>.stencil_testing</span><br><span class="line">    <span class="number">3.1</span>.blending_discard</span><br><span class="line">    <span class="number">3.2</span>.blending_sort</span><br><span class="line">    <span class="number">5.1</span>.framebuffers</span><br><span class="line">    <span class="number">5.2</span>.framebuffers_exercise1</span><br><span class="line">    <span class="number">6.1</span>.cubemaps_skybox</span><br><span class="line">    <span class="number">6.2</span>.cubemaps_environment_mapping</span><br><span class="line">    <span class="number">8</span>.advanced_glsl_ubo</span><br><span class="line">    <span class="number">9.1</span>.geometry_shader_houses</span><br><span class="line">    <span class="number">9.2</span>.geometry_shader_exploding</span><br><span class="line">    <span class="number">9.3</span>.geometry_shader_normals</span><br><span class="line">    <span class="number">10.1</span>.instancing_quads</span><br><span class="line">    <span class="number">10.2</span>.asteroids</span><br><span class="line">    <span class="number">10.3</span>.asteroids_instanced</span><br><span class="line">    <span class="number">11.1</span>.anti_aliasing_msaa</span><br><span class="line">    <span class="number">11.2</span>.anti_aliasing_offscreen</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(<span class="number">5</span>.advanced_lighting</span><br><span class="line">    <span class="number">1</span>.advanced_lighting</span><br><span class="line">    <span class="number">2</span>.gamma_correction</span><br><span class="line">    <span class="number">3.1</span>.<span class="number">1</span>.shadow_mapping_depth</span><br><span class="line">    <span class="number">3.1</span>.<span class="number">2</span>.shadow_mapping_base</span><br><span class="line">    <span class="number">3.1</span>.<span class="number">3</span>.shadow_mapping</span><br><span class="line">    <span class="number">3.2</span>.<span class="number">1</span>.point_shadows</span><br><span class="line">    <span class="number">3.2</span>.<span class="number">2</span>.point_shadows_soft</span><br><span class="line">    <span class="number">4</span>.normal_mapping</span><br><span class="line">    <span class="number">5.1</span>.parallax_mapping</span><br><span class="line">    <span class="number">5.2</span>.steep_parallax_mapping</span><br><span class="line">    <span class="number">5.3</span>.parallax_occlusion_mapping</span><br><span class="line">    <span class="number">6</span>.hdr</span><br><span class="line">    <span class="number">7</span>.bloom</span><br><span class="line">    <span class="number">8.1</span>.deferred_shading</span><br><span class="line">    <span class="number">8.2</span>.deferred_shading_volumes</span><br><span class="line">    <span class="number">9</span>.ssao</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(<span class="number">6</span>.pbr</span><br><span class="line">    <span class="number">1.1</span>.lighting</span><br><span class="line">    <span class="number">1.2</span>.lighting_textured</span><br><span class="line">    <span class="number">2.1</span>.<span class="number">1</span>.ibl_irradiance_conversion</span><br><span class="line">    <span class="number">2.1</span>.<span class="number">2</span>.ibl_irradiance</span><br><span class="line">    <span class="number">2.2</span>.<span class="number">1</span>.ibl_specular</span><br><span class="line">    <span class="number">2.2</span>.<span class="number">2</span>.ibl_specular_textured</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(<span class="number">7</span>.in_practice</span><br><span class="line">    <span class="number">1</span>.debugging</span><br><span class="line">    <span class="number">2</span>.text_rendering</span><br><span class="line">    <span class="comment">#3.2d_game</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(GUEST_ARTICLES</span><br><span class="line"><span class="number">8</span>.guest/<span class="number">2020</span>/oit</span><br><span class="line"><span class="number">8</span>.guest/<span class="number">2020</span>/skeletal_animation</span><br><span class="line"><span class="number">8</span>.guest/<span class="number">2021</span>/<span class="number">1</span>.scene/<span class="number">1</span>.scene_graph</span><br><span class="line"><span class="number">8</span>.guest/<span class="number">2021</span>/<span class="number">1</span>.scene/<span class="number">2</span>.frustum_culling</span><br><span class="line"><span class="number">8</span>.guest/<span class="number">2021</span>/<span class="number">2</span>.csm</span><br><span class="line"><span class="number">8</span>.guest/<span class="number">2021</span>/<span class="number">3</span>.tessellation/terrain_gpu_dist</span><br><span class="line"><span class="number">8</span>.guest/<span class="number">2021</span>/<span class="number">3</span>.tessellation/terrain_cpu_src</span><br><span class="line"><span class="number">8</span>.guest/<span class="number">2021</span>/<span class="number">4</span>.dsa</span><br><span class="line"><span class="number">8</span>.guest/<span class="number">2022</span>/<span class="number">5</span>.computeshader_helloworld</span><br><span class="line"><span class="number">8</span>.guest/<span class="number">2022</span>/<span class="number">6</span>.physically_based_bloom</span><br><span class="line"><span class="number">8</span>.guest/<span class="number">2022</span>/<span class="number">7</span>.area_lights/<span class="number">1</span>.area_light</span><br><span class="line"><span class="number">8</span>.guest/<span class="number">2022</span>/<span class="number">7</span>.area_lights/<span class="number">2</span>.multiple_area_lights</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">configure_file</span>(configuration/root_directory.h.in configuration/root_directory.h)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/configuration)</span><br><span class="line"></span><br><span class="line"><span class="comment"># first create relevant static libraries required for other projects</span></span><br><span class="line"><span class="keyword">add_library</span>(STB_IMAGE <span class="string">&quot;src/stb_image.cpp&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(LIBS <span class="variable">$&#123;LIBS&#125;</span> STB_IMAGE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(GLAD <span class="string">&quot;src/glad.c&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(LIBS <span class="variable">$&#123;LIBS&#125;</span> GLAD)</span><br><span class="line"></span><br><span class="line"><span class="keyword">macro</span>(makeLink src dest <span class="keyword">target</span>)</span><br><span class="line">  <span class="keyword">add_custom_command</span>(<span class="keyword">TARGET</span> <span class="variable">$&#123;target&#125;</span> POST_BUILD <span class="keyword">COMMAND</span> <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> -E create_symlink <span class="variable">$&#123;src&#125;</span> <span class="variable">$&#123;dest&#125;</span>  DEPENDS  <span class="variable">$&#123;dest&#125;</span> COMMENT <span class="string">&quot;mklink $&#123;src&#125; -&gt; $&#123;dest&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">endmacro</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>(create_project_from_sources chapter demo)</span><br><span class="line"><span class="keyword">file</span>(GLOB SOURCE</span><br><span class="line">            <span class="string">&quot;src/$&#123;chapter&#125;/$&#123;demo&#125;/*.h&quot;</span></span><br><span class="line">            <span class="string">&quot;src/$&#123;chapter&#125;/$&#123;demo&#125;/*.cpp&quot;</span></span><br><span class="line">            <span class="string">&quot;src/$&#123;chapter&#125;/$&#123;demo&#125;/*.vs&quot;</span></span><br><span class="line">            <span class="string">&quot;src/$&#123;chapter&#125;/$&#123;demo&#125;/*.fs&quot;</span></span><br><span class="line">            <span class="string">&quot;src/$&#123;chapter&#125;/$&#123;demo&#125;/*.tcs&quot;</span></span><br><span class="line">            <span class="string">&quot;src/$&#123;chapter&#125;/$&#123;demo&#125;/*.tes&quot;</span></span><br><span class="line">            <span class="string">&quot;src/$&#123;chapter&#125;/$&#123;demo&#125;/*.gs&quot;</span></span><br><span class="line">            <span class="string">&quot;src/$&#123;chapter&#125;/$&#123;demo&#125;/*.cs&quot;</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">if</span> (demo <span class="keyword">STREQUAL</span> <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">SET</span>(replaced <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">string</span>(REPLACE <span class="string">&quot;/&quot;</span> <span class="string">&quot;_&quot;</span> replaced <span class="variable">$&#123;chapter&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(NAME <span class="variable">$&#123;replaced&#125;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line"><span class="keyword">set</span>(NAME <span class="string">&quot;$&#123;chapter&#125;__$&#123;demo&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line">    <span class="keyword">add_executable</span>(<span class="variable">$&#123;NAME&#125;</span> <span class="variable">$&#123;SOURCE&#125;</span>)</span><br><span class="line">    <span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;NAME&#125;</span> <span class="variable">$&#123;LIBS&#125;</span>)</span><br><span class="line">    <span class="keyword">if</span>(MSVC)</span><br><span class="line"><span class="keyword">target_compile_options</span>(<span class="variable">$&#123;NAME&#125;</span> PRIVATE /std:c++<span class="number">17</span> /MP)</span><br><span class="line">        <span class="keyword">target_link_options</span>(<span class="variable">$&#123;NAME&#125;</span> PUBLIC /ignore:<span class="number">4099</span>)</span><br><span class="line">    <span class="keyword">endif</span>(MSVC)</span><br><span class="line">    <span class="keyword">if</span>(WIN32)</span><br><span class="line">        <span class="keyword">set_target_properties</span>(<span class="variable">$&#123;NAME&#125;</span> PROPERTIES RUNTIME_OUTPUT_DIRECTORY <span class="string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/bin/$&#123;chapter&#125;&quot;</span>)</span><br><span class="line">        <span class="keyword">set_target_properties</span>(<span class="variable">$&#123;NAME&#125;</span> PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY <span class="string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/bin/$&#123;chapter&#125;/Debug&quot;</span>)</span><br><span class="line">    <span class="keyword">elseif</span>(UNIX <span class="keyword">AND</span> <span class="keyword">NOT</span> APPLE)</span><br><span class="line">        <span class="keyword">set_target_properties</span>(<span class="variable">$&#123;NAME&#125;</span> PROPERTIES RUNTIME_OUTPUT_DIRECTORY <span class="string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/bin/$&#123;chapter&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">elseif</span>(APPLE)</span><br><span class="line">        <span class="keyword">set_target_properties</span>(<span class="variable">$&#123;NAME&#125;</span> PROPERTIES RUNTIME_OUTPUT_DIRECTORY <span class="string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/bin/$&#123;chapter&#125;&quot;</span>)</span><br><span class="line">        <span class="keyword">set_target_properties</span>(<span class="variable">$&#123;NAME&#125;</span> PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG <span class="string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/bin/$&#123;chapter&#125;&quot;</span>)</span><br><span class="line">        <span class="keyword">set_target_properties</span>(<span class="variable">$&#123;NAME&#125;</span> PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE <span class="string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/bin/$&#123;chapter&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">endif</span>(WIN32)</span><br><span class="line">    <span class="comment"># copy shader files to build directory</span></span><br><span class="line">    <span class="keyword">file</span>(GLOB SHADERS</span><br><span class="line">             <span class="string">&quot;src/$&#123;chapter&#125;/$&#123;demo&#125;/*.vs&quot;</span></span><br><span class="line">             <span class="comment"># &quot;src/$&#123;chapter&#125;/$&#123;demo&#125;/*.frag&quot;</span></span><br><span class="line">             <span class="string">&quot;src/$&#123;chapter&#125;/$&#123;demo&#125;/*.fs&quot;</span></span><br><span class="line">             <span class="string">&quot;src/$&#123;chapter&#125;/$&#123;demo&#125;/*.tcs&quot;</span></span><br><span class="line">             <span class="string">&quot;src/$&#123;chapter&#125;/$&#123;demo&#125;/*.tes&quot;</span></span><br><span class="line">             <span class="string">&quot;src/$&#123;chapter&#125;/$&#123;demo&#125;/*.gs&quot;</span></span><br><span class="line">             <span class="string">&quot;src/$&#123;chapter&#125;/$&#123;demo&#125;/*.cs&quot;</span></span><br><span class="line">    )</span><br><span class="line"><span class="comment"># copy dlls</span></span><br><span class="line"><span class="keyword">file</span>(GLOB DLLS <span class="string">&quot;dlls/*.dll&quot;</span>)</span><br><span class="line">    <span class="keyword">foreach</span>(SHADER <span class="variable">$&#123;SHADERS&#125;</span>)</span><br><span class="line">        <span class="keyword">if</span>(WIN32)</span><br><span class="line">            <span class="comment"># configure_file($&#123;SHADER&#125; &quot;test&quot;)</span></span><br><span class="line">            <span class="keyword">add_custom_command</span>(<span class="keyword">TARGET</span> <span class="variable">$&#123;NAME&#125;</span> PRE_BUILD <span class="keyword">COMMAND</span> <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> -E copy <span class="variable">$&#123;SHADER&#125;</span> $&lt;TARGET_FILE_DIR:<span class="variable">$&#123;NAME&#125;</span>&gt;)</span><br><span class="line"><span class="keyword">add_custom_command</span>(<span class="keyword">TARGET</span> <span class="variable">$&#123;NAME&#125;</span> PRE_BUILD <span class="keyword">COMMAND</span> <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> -E copy <span class="variable">$&#123;DLLS&#125;</span> $&lt;TARGET_FILE_DIR:<span class="variable">$&#123;NAME&#125;</span>&gt;)</span><br><span class="line">        <span class="keyword">elseif</span>(UNIX <span class="keyword">AND</span> <span class="keyword">NOT</span> APPLE)</span><br><span class="line">            <span class="keyword">file</span>(COPY <span class="variable">$&#123;SHADER&#125;</span> DESTINATION <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/bin/<span class="variable">$&#123;chapter&#125;</span>)</span><br><span class="line">        <span class="keyword">elseif</span>(APPLE)</span><br><span class="line">            <span class="comment"># create symbolic link for *.vs *.fs *.gs</span></span><br><span class="line">            <span class="keyword">get_filename_component</span>(SHADERNAME <span class="variable">$&#123;SHADER&#125;</span> NAME)</span><br><span class="line">            makeLink(<span class="variable">$&#123;SHADER&#125;</span> <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/bin/<span class="variable">$&#123;chapter&#125;</span>/<span class="variable">$&#123;SHADERNAME&#125;</span> <span class="variable">$&#123;NAME&#125;</span>)</span><br><span class="line">        <span class="keyword">endif</span>(WIN32)</span><br><span class="line">    <span class="keyword">endforeach</span>(SHADER)</span><br><span class="line">    <span class="comment"># if compiling for visual studio, also use configure file for each project (specifically to set up working directory)</span></span><br><span class="line">    <span class="keyword">if</span>(MSVC)</span><br><span class="line">        <span class="keyword">configure_file</span>(<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/configuration/visualstudio.vcxproj.user.in <span class="variable">$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span>/<span class="variable">$&#123;NAME&#125;</span>.vcxproj.user @ONLY)</span><br><span class="line">    <span class="keyword">endif</span>(MSVC)</span><br><span class="line"><span class="keyword">endfunction</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># then create a project file per tutorial</span></span><br><span class="line"><span class="keyword">foreach</span>(CHAPTER <span class="variable">$&#123;CHAPTERS&#125;</span>)</span><br><span class="line">    <span class="keyword">foreach</span>(DEMO <span class="variable">$&#123;$&#123;CHAPTER&#125;</span>&#125;)</span><br><span class="line">create_project_from_sources(<span class="variable">$&#123;CHAPTER&#125;</span> <span class="variable">$&#123;DEMO&#125;</span>)</span><br><span class="line">    <span class="keyword">endforeach</span>(DEMO)</span><br><span class="line"><span class="keyword">endforeach</span>(CHAPTER)</span><br><span class="line"><span class="keyword">foreach</span>(GUEST_ARTICLE <span class="variable">$&#123;GUEST_ARTICLES&#125;</span>)</span><br><span class="line">create_project_from_sources(<span class="variable">$&#123;GUEST_ARTICLE&#125;</span> <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">endforeach</span>(GUEST_ARTICLE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/includes)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
